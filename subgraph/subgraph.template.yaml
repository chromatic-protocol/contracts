specVersion: 0.0.5
schema:
  file: ./schema.graphql
dataSources:
  - kind: ethereum/contract
    name: ChromaticMarketFactory
    network: '{{network}}'
    source:
      address: '{{ChromaticMarketFactory}}'
      abi: ChromaticMarketFactory
      startBlock: {{ChromaticMarketFactory_blockNumber}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - MarketCreated
        - Market
        - InterestRate
        - InterestRatesSnapshot
        - OracleProviderProperty
      abis:
        - name: ChromaticMarketFactory
          file: ./abis/ChromaticMarketFactory.json
        - name: IERC20Metadata
          file: ./abis/IERC20Metadata.json
        - name: IOracleProvider
          file: ./abis/IOracleProvider.json
        - name: IChromaticMarket
          file: ./abis/IChromaticMarket.json
        - name: ICLBToken
          file: ./abis/ICLBToken.json
      eventHandlers:
        - event: MarketCreated(indexed address,indexed address,indexed address)
          handler: handleMarketCreated
        - event: OracleProviderRegistered(indexed address,(uint32,uint32,uint8))
          handler: handleOracleProviderRegistered
        - event: UpdateLeverageLevel(indexed address,indexed uint8)
          handler: handleUpdateLeverageLevel
        - event: UpdateTakeProfitBPSRange(indexed address,indexed uint32,indexed uint32)
          handler: handleUpdateTakeProfitBPSRange
        - event: SettlementTokenRegistered(indexed address,indexed address,uint256,uint256,uint256,uint256,uint24)
          handler: handleSettlementTokenRegistered
        - event: InterestRateRecordAppended(indexed address,indexed uint256,indexed uint256)
          handler: handleInterestRateRecordAppended
        - event: LastInterestRateRecordRemoved(indexed address,indexed uint256,indexed uint256)
          handler: handleLastInterestRateRecordRemoved
      file: ./src/chromatic-market-factory.ts

  - kind: ethereum/contract
    name: ChromaticRouter
    network: '{{network}}'
    source:
      address: '{{ChromaticRouter}}'
      abi: ChromaticRouter
      startBlock: {{ChromaticRouter_blockNumber}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - AccountCreated
        - OpenPosition
      abis:
        - name: ChromaticRouter
          file: ./abis/ChromaticRouter.json
      eventHandlers:
        - event: AccountCreated(indexed address,indexed address)
          handler: handleAccountCreated
        - event: OpenPosition(indexed address,indexed address,indexed address,uint256,uint256)
          handler: handleOpenPosition
      file: ./src/chromatic-router.ts

  - kind: ethereum/contract
    name: IChromaticAccount
    network: '{{network}}'
    source:
      abi: IChromaticAccount
      startBlock: {{ChromaticRouter_blockNumber}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - OpenPosition
        - ClosePosition
      abis:
        - name: IChromaticAccount
          file: ./abis/IChromaticAccount.json
      eventHandlers:
        - event: OpenPosition(indexed address,indexed uint256,uint256,int256,uint256,uint256,uint256,uint256)
          handler: handleOpenPosition
        - event: ClosePosition(indexed address,indexed uint256,uint256,uint256)
          handler: handleClosePosition
        - event: ClaimPosition(indexed address,indexed uint256,uint256,uint256,int256,uint256,bytes4)
          handler: handleClaimPosition
      file: ./src/chromatic-account.ts

templates:

  - kind: ethereum/contract
    name: IChromaticMarket
    network: '{{network}}'
    source:
      abi: IChromaticMarket
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - ChromaticMarketBinStatus
        - LiquidityBinStatus
      abis:
        - name: IChromaticMarket
          file: ./abis/IChromaticMarket.json
      eventHandlers:
        - event: AddLiquidity((uint256,uint256,uint256,address,uint8,int16))
          handler: handleAddLiquidity
        - event: AddLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])
          handler: handleAddLiquidityBatch
        - event: ClaimLiquidity((uint256,uint256,uint256,address,uint8,int16),indexed uint256)
          handler: handleClaimLiquidity
        - event: ClaimLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[])
          handler: handleClaimLiquidityBatch
        - event: RemoveLiquidity((uint256,uint256,uint256,address,uint8,int16))
          handler: handleRemoveLiquidity
        - event: RemoveLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])
          handler: handleRemoveLiquidityBatch
        - event: WithdrawLiquidity((uint256,uint256,uint256,address,uint8,int16),indexed uint256,indexed uint256)
          handler: handleWithdrawLiquidity
        - event: WithdrawLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[],uint256[])
          handler: handleWithdrawLiquidityBatch
        - event: OpenPosition(indexed address,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))
          handler: handleOpenPosition
        - event: ClosePosition(indexed address,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))
          handler: handleClosePosition
        - event: ClaimPosition(indexed address,indexed int256,indexed uint256,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))
          handler: handleClaimPosition
        - event: ClaimPositionByKeeper(indexed address,indexed int256,indexed uint256,uint256,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))
          handler: handleClaimPositionByKeeper
        - event: Liquidate(indexed address,indexed int256,indexed uint256,uint256,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))
          handler: handleLiquidate
      file: ./src/chromatic-market.ts

  - kind: ethereum/contract
    name: IOracleProvider
    network: '{{network}}'
    source:
      abi: IOracleProvider
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - OracleVersion
      abis:
        - name: IOracleProvider
          file: ./abis/IOracleProvider.json
      blockHandlers:
        - handler: saveOracleVersion
      file: ./src/oracle-provider.ts

  - kind: ethereum/contract
    name: ICLBToken
    network: '{{network}}'
    source:
      abi: ICLBToken
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - CLBToken
        - CLBTokenTotalSupply
      abis:
        - name: ICLBToken
          file: ./abis/ICLBToken.json
      eventHandlers:
        - event: TransferSingle(indexed address,indexed address,indexed address,uint256,uint256)
          handler: handleTransferSingle
        - event: TransferBatch(indexed address,indexed address,indexed address,uint256[],uint256[])
          handler: handleTransferBatch
      file: ./src/clb-token.ts