{
  "address": "0xad146179F3c58053eAcE57C9fae334128cBA347F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IChromaticMarketFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IVaultEarningDistributor",
          "name": "_earningDistributor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFeePaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByDao",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByEarningDistributor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByFactoryOrDao",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByMarket",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidToTakerPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidToMakerPool",
          "type": "uint256"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "earning",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "usedKeeperFee",
          "type": "uint256"
        }
      ],
      "name": "MakerEarningDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earning",
          "type": "uint256"
        }
      ],
      "name": "MarketEarningAccumulated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "earning",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "usedKeeperFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketBalance",
          "type": "uint256"
        }
      ],
      "name": "MarketEarningDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnAddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "takerMargin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settlementAmount",
          "type": "uint256"
        }
      ],
      "name": "OnClaimPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "takerMargin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "OnOpenPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pendingDeposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pendingWithdrawal",
          "type": "uint256"
        }
      ],
      "name": "OnSettlePendingLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "OnWithdrawLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferKeeperFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferKeeperFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultEarningDistributor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldVaultEarningDistributor",
          "type": "address"
        }
      ],
      "name": "VaultEarningDistributorSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "cancelMakerEarningDistributionTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "cancelMarketEarningDistributionTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "createMakerEarningDistributionTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "createMarketEarningDistributionTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "distributeMakerEarning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "distributeMarketEarning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earningDistributor",
      "outputs": [
        {
          "internalType": "contract IVaultEarningDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IChromaticMarketFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "settlementToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "binBalance",
          "type": "uint256"
        }
      ],
      "name": "getPendingBinShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "makerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "makerMarketBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultEarningDistributor",
          "name": "oldEarningDistributor",
          "type": "address"
        }
      ],
      "name": "migrateEarningDistributionTasks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onAddLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "takerMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settlementAmount",
          "type": "uint256"
        }
      ],
      "name": "onClaimPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takerMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "onOpenPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pendingDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingWithdrawal",
          "type": "uint256"
        }
      ],
      "name": "onSettlePendingLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onWithdrawLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingMakerEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingMarketEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingWithdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_earningDistributor",
          "type": "address"
        }
      ],
      "name": "setVaultEarningDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "takerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "takerMarketBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settlementToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        }
      ],
      "name": "transferKeeperFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usedFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1853a33f6a2ab6b478ba84ceebf3d68c811b869889b8072fa95c09f315ad2f0c",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0xad146179F3c58053eAcE57C9fae334128cBA347F",
    "transactionIndex": 6,
    "gasUsed": "3041830",
    "logsBloom": "0x
    "blockHash": "0xa6458a96a2d0c47c9cb95c42795db1cd9b8aed8514f36a54a3e8bea0ee181b5f",
    "transactionHash": "0x1853a33f6a2ab6b478ba84ceebf3d68c811b869889b8072fa95c09f315ad2f0c",
    "logs": [],
    "blockNumber": 10526626,
    "cumulativeGasUsed": "6219308",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd012cA4Ac7E08819D2fD0a9cc3C569e48ffa8482",
    "0xC34C12a6290F5c6Dd2926222C8B06Ea31888139A"
  ],
  "numDeployments": 4,
  "solcInputHash": "40f30b43e578be04db1fcda481773844",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IChromaticMarketFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IVaultEarningDistributor\",\"name\":\"_earningDistributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFeePaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByDao\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByEarningDistributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByFactoryOrDao\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByMarket\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidToTakerPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidToMakerPool\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"earning\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"usedKeeperFee\",\"type\":\"uint256\"}],\"name\":\"MakerEarningDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earning\",\"type\":\"uint256\"}],\"name\":\"MarketEarningAccumulated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"earning\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"usedKeeperFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketBalance\",\"type\":\"uint256\"}],\"name\":\"MarketEarningDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnAddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takerMargin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementAmount\",\"type\":\"uint256\"}],\"name\":\"OnClaimPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"takerMargin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"OnOpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pendingDeposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pendingWithdrawal\",\"type\":\"uint256\"}],\"name\":\"OnSettlePendingLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"OnWithdrawLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferKeeperFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferKeeperFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultEarningDistributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldVaultEarningDistributor\",\"type\":\"address\"}],\"name\":\"VaultEarningDistributorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"cancelMakerEarningDistributionTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"cancelMarketEarningDistributionTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createMakerEarningDistributionTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"createMarketEarningDistributionTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"distributeMakerEarning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"distributeMarketEarning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earningDistributor\",\"outputs\":[{\"internalType\":\"contract IVaultEarningDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IChromaticMarketFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"binBalance\",\"type\":\"uint256\"}],\"name\":\"getPendingBinShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"makerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"makerMarketBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultEarningDistributor\",\"name\":\"oldEarningDistributor\",\"type\":\"address\"}],\"name\":\"migrateEarningDistributionTasks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takerMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementAmount\",\"type\":\"uint256\"}],\"name\":\"onClaimPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"onOpenPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pendingDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWithdrawal\",\"type\":\"uint256\"}],\"name\":\"onSettlePendingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingMakerEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingMarketEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earningDistributor\",\"type\":\"address\"}],\"name\":\"setVaultEarningDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takerMarketBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlementToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"transferKeeperFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usedFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract that implements the ChromaticVault interface      and provides functionality for managing positions, liquidity, and fees in Chromatic markets.\",\"errors\":{\"NotEnoughBalance()\":[{\"details\":\"Throws an error indicating that the flash loan amount exceeds the available balance in the vault.\"}],\"NotEnoughFeePaid()\":[{\"details\":\"Throws an error indicating that the recipient has not paid the sufficient flash loan fee.\"}],\"OnlyAccessableByDao()\":[{\"details\":\"Throws an error indicating that the caller is not the DAO.\"}],\"OnlyAccessableByEarningDistributor()\":[{\"details\":\"Throws an error indicating that the caller is not the Vault earning distribute contract.\"}],\"OnlyAccessableByFactoryOrDao()\":[{\"details\":\"Throws an error indicating that the caller is nether the chormatic factory contract nor the DAO.\"}],\"OnlyAccessableByMarket()\":[{\"details\":\"Throws an error indicating that the caller is not a registered market.\"}]},\"events\":{\"FlashLoan(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of the flash loan.\",\"paid\":\"The amount paid back after the flash loan.\",\"paidToMakerPool\":\"The amount paid to the maker pool after the flash loan.\",\"paidToTakerPool\":\"The amount paid to the taker pool after the flash loan.\",\"recipient\":\"The address receiving the flash loan.\",\"sender\":\"The address initiating the flash loan.\"}},\"MakerEarningDistributed(address,uint256,uint256)\":{\"details\":\"Emitted when maker earning is distributed.\",\"params\":{\"earning\":\"The amount of earning distributed.\",\"token\":\"The address of the settlement token.\",\"usedKeeperFee\":\"The amount of keeper fee used.\"}},\"MarketEarningAccumulated(address,uint256)\":{\"details\":\"Emitted when market earning is accumulated.\",\"params\":{\"earning\":\"The amount of earning accumulated.\",\"market\":\"The address of the market.\"}},\"MarketEarningDistributed(address,uint256,uint256,uint256)\":{\"details\":\"Emitted when market earning is distributed.\",\"params\":{\"earning\":\"The amount of earning distributed.\",\"market\":\"The address of the market.\",\"marketBalance\":\"The balance of the market.\",\"usedKeeperFee\":\"The amount of keeper fee used.\"}},\"OnAddLiquidity(address,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity added.\",\"market\":\"The address of the market.\"}},\"OnClaimPosition(address,uint256,address,uint256,uint256)\":{\"params\":{\"market\":\"The address of the market.\",\"positionId\":\"The ID of the claimed position.\",\"recipient\":\"The address of the recipient of the settlement amount.\",\"settlementAmount\":\"The settlement amount received by the recipient.\",\"takerMargin\":\"The margin amount provided by the taker for the position.\"}},\"OnOpenPosition(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"market\":\"The address of the market.\",\"positionId\":\"The ID of the opened position.\",\"protocolFee\":\"The protocol fee associated with the position.\",\"takerMargin\":\"The margin amount provided by the taker for the position.\",\"tradingFee\":\"The trading fee associated with the position.\"}},\"OnSettlePendingLiquidity(address,uint256,uint256)\":{\"params\":{\"market\":\"The address of the market.\",\"pendingDeposit\":\"The amount of pending deposit being settled.\",\"pendingWithdrawal\":\"The amount of pending withdrawal being settled.\"}},\"OnWithdrawLiquidity(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of liquidity withdrawn.\",\"market\":\"The address of the market.\",\"recipient\":\"The address of the recipient of the withdrawn liquidity.\"}},\"TransferKeeperFee(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of settlement token to be used for paying keeper fee.\",\"fee\":\"The amount of the transferred keeper fee as native token.\",\"market\":\"The address of the market.\"}},\"TransferKeeperFee(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of settlement token to be used for paying keeper fee.\",\"fee\":\"The amount of the transferred keeper fee as native token.\"}},\"TransferProtocolFee(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of the transferred fee.\",\"market\":\"The address of the market.\",\"positionId\":\"The ID of the position.\"}},\"VaultEarningDistributorSet(address,address)\":{\"params\":{\"oldVaultEarningDistributor\":\"The old vault earning distributor address.\",\"vaultEarningDistributor\":\"The vault earning distributor address.\"}}},\"kind\":\"dev\",\"methods\":{\"cancelMakerEarningDistributionTask(address)\":{\"params\":{\"token\":\"The address of the settlement token.\"}},\"cancelMarketEarningDistributionTask(address)\":{\"params\":{\"market\":\"The address of the market.\"}},\"constructor\":{\"details\":\"Constructs a new ChromaticVault instance.\",\"params\":{\"_earningDistributor\":\"The address of the Vault earning distribute contract.\",\"_factory\":\"The address of the Chromatic Market Factory contract.\"}},\"createMakerEarningDistributionTask(address)\":{\"params\":{\"token\":\"The address of the settlement token.\"}},\"createMarketEarningDistributionTask(address)\":{\"params\":{\"market\":\"The address of the market.\"}},\"distributeMakerEarning(address,uint256,address)\":{\"params\":{\"fee\":\"The keeper fee amount.\",\"keeper\":\"The keeper address to receive fee.\",\"token\":\"The address of the settlement token.\"}},\"distributeMarketEarning(address,uint256,address)\":{\"params\":{\"fee\":\"The fee amount.\",\"keeper\":\"The keeper address to receive fee.\",\"market\":\"The address of the market.\"}},\"flashLoan(address,uint256,address,bytes)\":{\"details\":\"Throws a `NotEnoughBalance` error if the loan amount exceeds the available balance.      Throws a `NotEnoughFeePaid` error if the fee has not been paid by the recipient. Requirements: - The loan amount must not exceed the available balance after considering pending deposits and withdrawals. - The fee for the flash loan must be paid by the recipient. - The total amount paid must be distributed between the taker pool and maker pool according to their balances. - The amount paid to the taker pool must be transferred to the DAO treasury address. - The amount paid to the maker pool must be added to the pending maker earnings. Emits a `FlashLoan` event with details of the flash loan execution.\",\"params\":{\"amount\":\"The amount of the flash loan.\",\"data\":\"Additional data for the flash loan.\",\"recipient\":\"The address to receive the flash loan.\",\"token\":\"The address of the token for the flash loan.\"}},\"getPendingBinShare(address,address,uint256)\":{\"details\":\"The pending share of earnings is calculated based on the bin balance, maker balances, and market balances.\",\"params\":{\"binBalance\":\"The balance of funds in the bin.\",\"market\":\"The address of the market.\",\"settlementToken\":\"The settlement token address.\"},\"returns\":{\"_0\":\"The pending share of earnings for the specified bin.\"}},\"onAddLiquidity(address,uint256)\":{\"details\":\"This function can only be called by a market contract.\",\"params\":{\"amount\":\"The amount of liquidity being added.\",\"settlementToken\":\"The settlement token address.\"}},\"onClaimPosition(address,uint256,address,uint256,uint256)\":{\"details\":\"This function can only be called by a market contract.\",\"params\":{\"positionId\":\"The ID of the claimed position.\",\"recipient\":\"The address that will receive the settlement amount.\",\"settlementAmount\":\"The amount to be settled for the position.\",\"settlementToken\":\"The settlement token address.\",\"takerMargin\":\"The margin amount provided by the taker for the position.\"}},\"onOpenPosition(address,uint256,uint256,uint256,uint256)\":{\"details\":\"This function can only be called by a market contract.\",\"params\":{\"positionId\":\"The ID of the opened position.\",\"protocolFee\":\"The protocol fee associated with the position.\",\"settlementToken\":\"The settlement token address.\",\"takerMargin\":\"The margin amount provided by the taker for the position.\",\"tradingFee\":\"The trading fee associated with the position.\"}},\"onSettlePendingLiquidity(address,uint256,uint256)\":{\"details\":\"This function can only be called by a market contract.\",\"params\":{\"pendingDeposit\":\"The amount of pending deposits being settled.\",\"pendingWithdrawal\":\"The amount of pending withdrawals being settled.\",\"settlementToken\":\"The settlement token address.\"}},\"onWithdrawLiquidity(address,address,uint256)\":{\"details\":\"This function can only be called by a market contract.\",\"params\":{\"amount\":\"The amount of liquidity to be withdrawn.\",\"recipient\":\"The address that will receive the withdrawn liquidity.\",\"settlementToken\":\"The settlement token address.\"}},\"setVaultEarningDistributor(address)\":{\"details\":\"This function can only be called by the DAO address.\"},\"transferKeeperFee(address,address,uint256,uint256)\":{\"details\":\"This function can only be called by a market contract.\",\"params\":{\"fee\":\"The amount of the fee to transfer as native token.\",\"keeper\":\"The address of the keeper to receive the fee.\",\"margin\":\"The margin amount used for the fee payment.\",\"settlementToken\":\"The settlement token address.\"},\"returns\":{\"usedFee\":\"The actual settlement token amount of fee used for the transfer.\"}}},\"title\":\"ChromaticVault\",\"version\":1},\"userdoc\":{\"events\":{\"FlashLoan(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a flash loan is executed.\"},\"OnAddLiquidity(address,uint256)\":{\"notice\":\"Emitted when liquidity is added to the vault.\"},\"OnClaimPosition(address,uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when a position is claimed.\"},\"OnOpenPosition(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a position is opened.\"},\"OnSettlePendingLiquidity(address,uint256,uint256)\":{\"notice\":\"Emitted when pending liquidity is settled.\"},\"OnWithdrawLiquidity(address,uint256,address)\":{\"notice\":\"Emitted when liquidity is withdrawn from the vault.\"},\"TransferKeeperFee(address,uint256,uint256)\":{\"notice\":\"Emitted when the keeper fee is transferred for a specific market.\"},\"TransferKeeperFee(uint256,uint256)\":{\"notice\":\"Emitted when the keeper fee is transferred.\"},\"TransferProtocolFee(address,uint256,uint256)\":{\"notice\":\"Emitted when the protocol fee is transferred for a specific position.\"},\"VaultEarningDistributorSet(address,address)\":{\"notice\":\"Emitted when the vault earning distributor address is set.\"}},\"kind\":\"user\",\"methods\":{\"cancelMakerEarningDistributionTask(address)\":{\"notice\":\"Cancels a maker earning distribution task for a token.\"},\"cancelMarketEarningDistributionTask(address)\":{\"notice\":\"Cancels a market earning distribution task for a market.\"},\"createMakerEarningDistributionTask(address)\":{\"notice\":\"Creates a maker earning distribution task for a token.\"},\"createMarketEarningDistributionTask(address)\":{\"notice\":\"Creates a market earning distribution task for a market.\"},\"distributeMakerEarning(address,uint256,address)\":{\"notice\":\"Distributes the maker earning for a token to the each markets.\"},\"distributeMarketEarning(address,uint256,address)\":{\"notice\":\"Distributes the market earning for a market to the each bins.\"},\"flashLoan(address,uint256,address,bytes)\":{\"notice\":\"Executes a flash loan.\"},\"getPendingBinShare(address,address,uint256)\":{\"notice\":\"Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.\"},\"onAddLiquidity(address,uint256)\":{\"notice\":\"Called when liquidity is added to the vault by a market contract.\"},\"onClaimPosition(address,uint256,address,uint256,uint256)\":{\"notice\":\"Called when a position is claimed by a market contract.\"},\"onOpenPosition(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Called when a position is opened by a market contract.\"},\"onSettlePendingLiquidity(address,uint256,uint256)\":{\"notice\":\"Called when pending liquidity is settled in the vault by a market contract.\"},\"onWithdrawLiquidity(address,address,uint256)\":{\"notice\":\"Called when liquidity is withdrawn from the vault by a market contract.\"},\"transferKeeperFee(address,address,uint256,uint256)\":{\"notice\":\"Transfers the keeper fee from the market to the specified keeper.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/ChromaticVault.sol\":\"ChromaticVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\",\"keccak256\":\"0x8b4a492c14765d24f935516cb3437a1b39fbd65f20fc8828e7880fb1bdcfba86\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/core/ChromaticVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IChromaticMarketFactory} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\\\";\\nimport {IChromaticMarket} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarket.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {IKeeperFeePayer} from \\\"@chromatic-protocol/contracts/core/interfaces/IKeeperFeePayer.sol\\\";\\nimport {IVaultEarningDistributor} from \\\"@chromatic-protocol/contracts/core/interfaces/IVaultEarningDistributor.sol\\\";\\nimport {ILendingPool} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/ILendingPool.sol\\\";\\nimport {IVault} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/IVault.sol\\\";\\nimport {IChromaticFlashLoanCallback} from \\\"@chromatic-protocol/contracts/core/interfaces/callback/IChromaticFlashLoanCallback.sol\\\";\\nimport {BPS} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\n\\n/**\\n * @title ChromaticVault\\n * @dev A contract that implements the ChromaticVault interface\\n *      and provides functionality for managing positions, liquidity, and fees in Chromatic markets.\\n */\\ncontract ChromaticVault is IChromaticVault, ReentrancyGuard {\\n    using Math for uint256;\\n\\n    IChromaticMarketFactory public immutable factory;\\n    IVaultEarningDistributor public earningDistributor;\\n\\n    mapping(address => uint256) public makerBalances; // settlement token => balance\\n    mapping(address => uint256) public takerBalances; // settlement token => balance\\n    mapping(address => uint256) public makerMarketBalances; // market => balance\\n    mapping(address => uint256) public takerMarketBalances; // market => balance\\n    mapping(address => uint256) public pendingMakerEarnings; // settlement token => earning\\n    mapping(address => uint256) public pendingMarketEarnings; // market => earning\\n    mapping(address => uint256) public pendingDeposits; // settlement token => deposit\\n    mapping(address => uint256) public pendingWithdrawals; // settlement token => deposit\\n\\n    /**\\n     * @dev Throws an error indicating that the caller is not the DAO.\\n     */\\n    error OnlyAccessableByDao();\\n\\n    /**\\n     * @dev Throws an error indicating that the caller is nether the chormatic factory contract nor the DAO.\\n     */\\n    error OnlyAccessableByFactoryOrDao();\\n\\n    /**\\n     * @dev Throws an error indicating that the caller is not a registered market.\\n     */\\n    error OnlyAccessableByMarket();\\n\\n    /**\\n     * @dev Throws an error indicating that the caller is not the Vault earning distribute contract.\\n     */\\n    error OnlyAccessableByEarningDistributor();\\n\\n    /**\\n     * @dev Throws an error indicating that the flash loan amount exceeds the available balance in the vault.\\n     */\\n    error NotEnoughBalance();\\n\\n    /**\\n     * @dev Throws an error indicating that the recipient has not paid the sufficient flash loan fee.\\n     */\\n    error NotEnoughFeePaid();\\n\\n    /**\\n     * @dev Modifier to restrict access to only the DAO.\\n     *      Throws an `OnlyAccessableByDao` error if the caller is not the DAO.\\n     */\\n    modifier onlyDao() {\\n        if (msg.sender != factory.dao()) revert OnlyAccessableByDao();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict access to only the factory or the DAO.\\n     *      Throws an `OnlyAccessableByFactoryOrDao` error if the caller is nether the chormatic factory contract nor the DAO.\\n     */\\n    modifier onlyFactoryOrDao() {\\n        if (msg.sender != address(factory) && msg.sender != factory.dao())\\n            revert OnlyAccessableByFactoryOrDao();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict access to only the Market contract.\\n     *      Throws an `OnlyAccessableByMarket` error if the caller is not a registered market.\\n     */\\n    modifier onlyMarket() {\\n        _checkMarket();\\n        _;\\n    }\\n    /**\\n     * @dev Modifier to restrict access to only the Vault earning distribute contract.\\n     *      Throws an `OnlyAccessableByEarningDistributor` error if the caller is not the Vault earning distribute contract.\\n     */\\n    modifier onlyEarningDistributor() {\\n        if (msg.sender != address(earningDistributor)) revert OnlyAccessableByEarningDistributor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructs a new ChromaticVault instance.\\n     * @param _factory The address of the Chromatic Market Factory contract.\\n     * @param _earningDistributor The address of the Vault earning distribute contract.\\n     */\\n    constructor(IChromaticMarketFactory _factory, IVaultEarningDistributor _earningDistributor) {\\n        factory = _factory;\\n        earningDistributor = _earningDistributor;\\n    }\\n\\n    // Internal Functions\\n\\n    /**\\n     * @dev This function can only be called by the modifier onlyMarket.\\n     */\\n    function _checkMarket() internal view {\\n        if (!factory.isRegisteredMarket(msg.sender)) revert OnlyAccessableByMarket();\\n    }\\n\\n    // implement IVault\\n\\n    /**\\n     * @inheritdoc IVault\\n     * @dev This function can only be called by a market contract.\\n     */\\n    function onOpenPosition(\\n        address settlementToken,\\n        uint256 positionId,\\n        uint256 takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    ) external override nonReentrant onlyMarket {\\n        address market = msg.sender;\\n\\n        takerBalances[settlementToken] += takerMargin;\\n        takerMarketBalances[market] += takerMargin;\\n\\n        makerBalances[settlementToken] += tradingFee;\\n        makerMarketBalances[market] += tradingFee;\\n\\n        transferProtocolFee(market, settlementToken, positionId, protocolFee);\\n\\n        emit OnOpenPosition(market, positionId, takerMargin, tradingFee, protocolFee);\\n    }\\n\\n    /**\\n     * @inheritdoc IVault\\n     * @dev This function can only be called by a market contract.\\n     */\\n    function onClaimPosition(\\n        address settlementToken,\\n        uint256 positionId,\\n        address recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    ) external override nonReentrant onlyMarket {\\n        address market = msg.sender;\\n\\n        takerBalances[settlementToken] -= takerMargin;\\n        takerMarketBalances[market] -= takerMargin;\\n\\n        if (settlementAmount > takerMargin) {\\n            // maker loss\\n            uint256 makerLoss = settlementAmount - takerMargin;\\n\\n            makerBalances[settlementToken] -= makerLoss;\\n            makerMarketBalances[market] -= makerLoss;\\n        } else {\\n            // maker profit\\n            uint256 makerProfit = takerMargin - settlementAmount;\\n\\n            makerBalances[settlementToken] += makerProfit;\\n            makerMarketBalances[market] += makerProfit;\\n        }\\n        emit OnClaimPosition(market, positionId, recipient, takerMargin, settlementAmount);\\n\\n        SafeERC20.safeTransfer(IERC20(settlementToken), recipient, settlementAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc IVault\\n     * @dev This function can only be called by a market contract.\\n     */\\n    function onAddLiquidity(\\n        address settlementToken,\\n        uint256 amount\\n    ) external override nonReentrant onlyMarket {\\n        address market = msg.sender;\\n\\n        pendingDeposits[settlementToken] += amount;\\n\\n        emit OnAddLiquidity(market, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IVault\\n     * @dev This function can only be called by a market contract.\\n     */\\n    function onSettlePendingLiquidity(\\n        address settlementToken,\\n        uint256 pendingDeposit,\\n        uint256 pendingWithdrawal\\n    ) external override nonReentrant onlyMarket {\\n        address market = msg.sender;\\n\\n        pendingDeposits[settlementToken] -= pendingDeposit;\\n        pendingWithdrawals[settlementToken] += pendingWithdrawal;\\n        makerBalances[settlementToken] =\\n            makerBalances[settlementToken] +\\n            pendingDeposit -\\n            pendingWithdrawal;\\n        makerMarketBalances[market] =\\n            makerMarketBalances[market] +\\n            pendingDeposit -\\n            pendingWithdrawal;\\n\\n        emit OnSettlePendingLiquidity(market, pendingDeposit, pendingWithdrawal);\\n    }\\n\\n    /**\\n     * @inheritdoc IVault\\n     * @dev This function can only be called by a market contract.\\n     */\\n    function onWithdrawLiquidity(\\n        address settlementToken,\\n        address recipient,\\n        uint256 amount\\n    ) external override nonReentrant onlyMarket {\\n        if (amount == 0) return;\\n\\n        address market = msg.sender;\\n\\n        pendingWithdrawals[settlementToken] -= amount;\\n        emit OnWithdrawLiquidity(market, amount, recipient);\\n        SafeERC20.safeTransfer(IERC20(settlementToken), recipient, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IVault\\n     * @dev This function can only be called by a market contract.\\n     */\\n    function transferKeeperFee(\\n        address settlementToken,\\n        address keeper,\\n        uint256 fee,\\n        uint256 margin\\n    ) external override nonReentrant onlyMarket returns (uint256 usedFee) {\\n        if (fee == 0) return 0;\\n\\n        address market = msg.sender;\\n\\n        usedFee = _transferKeeperFee(settlementToken, keeper, fee, margin);\\n\\n        takerBalances[settlementToken] -= usedFee;\\n        takerMarketBalances[market] -= usedFee;\\n\\n        emit TransferKeeperFee(market, fee, usedFee);\\n    }\\n\\n    /**\\n     * @notice Internal function to transfer the keeper fee.\\n     * @param token The address of the settlement token.\\n     * @param keeper The address of the keeper to receive the fee.\\n     * @param fee The amount of the fee to transfer as native token.\\n     * @param margin The margin amount used for the fee payment.\\n     * @return usedFee The actual settlement token amount of fee used for the transfer.\\n     */\\n    function _transferKeeperFee(\\n        address token,\\n        address keeper,\\n        uint256 fee,\\n        uint256 margin\\n    ) internal returns (uint256 usedFee) {\\n        if (fee == 0) return 0;\\n\\n        IKeeperFeePayer keeperFeePayer = IKeeperFeePayer(factory.keeperFeePayer());\\n        // swap to native token\\n        SafeERC20.safeTransfer(IERC20(token), address(keeperFeePayer), margin);\\n\\n        return keeperFeePayer.payKeeperFee(token, fee, keeper);\\n    }\\n\\n    /**\\n     * @notice Transfers the protocol fee to the DAO treasury address.\\n     * @param market The address of the market contract.\\n     * @param settlementToken The address of the settlement token.\\n     * @param positionId The ID of the position.\\n     * @param amount The amount of the protocol fee to transfer.\\n     */\\n    function transferProtocolFee(\\n        address market,\\n        address settlementToken,\\n        uint256 positionId,\\n        uint256 amount\\n    ) internal {\\n        if (amount != 0) {\\n            emit TransferProtocolFee(market, positionId, amount);\\n            SafeERC20.safeTransfer(IERC20(settlementToken), factory.treasury(), amount);\\n        }\\n    }\\n\\n    // implement ILendingPool\\n\\n    /**\\n     * @inheritdoc ILendingPool\\n     * @dev Throws a `NotEnoughBalance` error if the loan amount exceeds the available balance.\\n     *      Throws a `NotEnoughFeePaid` error if the fee has not been paid by the recipient.\\n     *\\n     * Requirements:\\n     * - The loan amount must not exceed the available balance after considering pending deposits and withdrawals.\\n     * - The fee for the flash loan must be paid by the recipient.\\n     * - The total amount paid must be distributed between the taker pool and maker pool according to their balances.\\n     * - The amount paid to the taker pool must be transferred to the DAO treasury address.\\n     * - The amount paid to the maker pool must be added to the pending maker earnings.\\n     *\\n     * Emits a `FlashLoan` event with details of the flash loan execution.\\n     */\\n    function flashLoan(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external nonReentrant {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n\\n        // Ensure that the loan amount does not exceed the available balance\\n        // after considering pending deposits and withdrawals\\n        if (amount > balance - pendingDeposits[token] - pendingWithdrawals[token])\\n            revert NotEnoughBalance();\\n\\n        // Calculate the fee for the flash loan based on the loan amount and the flash loan fee rate of the token\\n        uint256 fee = amount.mulDiv(factory.getFlashLoanFeeRate(token), BPS, Math.Rounding.Up);\\n\\n        //slither-disable-next-line reentrancy-benign\\n        SafeERC20.safeTransfer(IERC20(token), recipient, amount);\\n\\n        // Invoke the flash loan callback function on the sender contract to process the loan\\n        IChromaticFlashLoanCallback(msg.sender).flashLoanCallback(fee, data);\\n\\n        uint256 balanceAfter = IERC20(token).balanceOf(address(this));\\n\\n        // Ensure that the fee has been paid by the recipient\\n        if (balanceAfter < balance + fee) revert NotEnoughFeePaid();\\n\\n        uint256 paid = balanceAfter - balance;\\n\\n        // Calculate the amounts to be distributed to the taker pool and maker pool\\n        uint256 takerBalance = takerBalances[token];\\n        uint256 makerBalance = makerBalances[token];\\n        uint256 paidToTakerPool = paid.mulDiv(takerBalance, takerBalance + makerBalance);\\n        uint256 paidToMakerPool = paid - paidToTakerPool;\\n\\n        // Transfer the amount paid to the taker pool to the DAO treasury address\\n        if (paidToTakerPool != 0) {\\n            // Add the amount paid to the maker pool to the pending maker earnings\\n            pendingMakerEarnings[token] += paidToMakerPool;\\n            SafeERC20.safeTransfer(IERC20(token), factory.treasury(), paidToTakerPool);\\n        }\\n\\n        emit FlashLoan(msg.sender, recipient, amount, paid, paidToTakerPool, paidToMakerPool);\\n    }\\n\\n    /**\\n     * @inheritdoc ILendingPool\\n     * @dev The pending share of earnings is calculated based on the bin balance, maker balances, and market balances.\\n     */\\n    function getPendingBinShare(\\n        address market,\\n        address settlementToken,\\n        uint256 binBalance\\n    ) external view returns (uint256) {\\n        uint256 makerBalance = makerBalances[settlementToken];\\n        uint256 marketBalance = makerMarketBalances[market];\\n\\n        return\\n            (\\n                // Calculate the pending share of earnings for the bin based on the maker balances and bin balance\\n                makerBalance == 0\\n                    ? 0\\n                    : pendingMakerEarnings[settlementToken].mulDiv(\\n                        binBalance,\\n                        makerBalance,\\n                        Math.Rounding.Up\\n                    )\\n            ) +\\n            (\\n                // Calculate the pending share of earnings for the bin based on the market balances and bin balance\\n                marketBalance == 0\\n                    ? 0\\n                    : pendingMarketEarnings[market].mulDiv(\\n                        binBalance,\\n                        marketBalance,\\n                        Math.Rounding.Up\\n                    )\\n            );\\n    }\\n\\n    // automation - distribute maker earning to each markets\\n\\n    // for management\\n    function migrateEarningDistributionTasks(\\n        IVaultEarningDistributor oldEarningDistributor\\n    ) external nonReentrant onlyDao {\\n        require(address(oldEarningDistributor) != address(earningDistributor));\\n\\n        // migrate tasks\\n        address[] memory markets = factory.getMarkets();\\n        for (uint256 i; i < markets.length; ) {\\n            oldEarningDistributor.cancelMarketEarningDistributionTask(markets[i]);\\n            earningDistributor.createMarketEarningDistributionTask(markets[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        address[] memory tokens = factory.registeredSettlementTokens();\\n        for (uint256 i; i < tokens.length; ) {\\n            oldEarningDistributor.cancelMakerEarningDistributionTask(tokens[i]);\\n            earningDistributor.createMakerEarningDistributionTask(tokens[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticVault\\n     * @dev This function can only be called by the DAO address.\\n     */\\n    function setVaultEarningDistributor(\\n        address _earningDistributor\\n    ) external override nonReentrant onlyDao {\\n        require(_earningDistributor != address(0));\\n        require(_earningDistributor != address(earningDistributor));\\n\\n        emit VaultEarningDistributorSet(_earningDistributor, address(earningDistributor));\\n        earningDistributor = IVaultEarningDistributor(_earningDistributor);\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticVault\\n     */\\n    function createMakerEarningDistributionTask(\\n        address token\\n    ) external virtual override nonReentrant onlyFactoryOrDao {\\n        earningDistributor.createMakerEarningDistributionTask(token);\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticVault\\n     */\\n    function cancelMakerEarningDistributionTask(\\n        address token\\n    ) external override nonReentrant onlyFactoryOrDao {\\n        earningDistributor.cancelMakerEarningDistributionTask(token);\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticVault\\n     */\\n    function distributeMakerEarning(\\n        address token,\\n        uint256 fee,\\n        address keeper\\n    ) external override nonReentrant onlyEarningDistributor {\\n        if (!_makerEarningDistributable(token)) return;\\n\\n        address[] memory markets = factory.getMarketsBySettlmentToken(token);\\n\\n        uint256 earning = pendingMakerEarnings[token];\\n        delete pendingMakerEarnings[token];\\n\\n        uint256 usedFee = fee != 0 ? _transferKeeperFee(token, keeper, fee, earning) : 0;\\n        emit TransferKeeperFee(fee, usedFee);\\n\\n        uint256 remainBalance = makerBalances[token];\\n        uint256 remainEarning = earning - usedFee;\\n        for (uint256 i; i < markets.length; ) {\\n            address market = markets[i];\\n            uint256 marketBalance = makerMarketBalances[market];\\n            uint256 marketEarning = remainEarning.mulDiv(marketBalance, remainBalance);\\n\\n            pendingMarketEarnings[market] += marketEarning;\\n\\n            remainBalance -= marketBalance;\\n            remainEarning -= marketEarning;\\n\\n            emit MarketEarningAccumulated(market, marketEarning);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit MakerEarningDistributed(token, earning, usedFee);\\n    }\\n\\n    /**\\n     * @dev Private function to check if the maker earning is distributable for a token.\\n     * @param token The address of the settlement token.\\n     * @return True if the maker earning is distributable, False otherwise.\\n     */\\n    function _makerEarningDistributable(address token) private view returns (bool) {\\n        return pendingMakerEarnings[token] >= factory.getEarningDistributionThreshold(token);\\n    }\\n\\n    // automation - distribute market earning to each bins\\n\\n    /**\\n     * @inheritdoc IChromaticVault\\n     */\\n    function createMarketEarningDistributionTask(\\n        address market\\n    ) external virtual override nonReentrant onlyFactoryOrDao {\\n        earningDistributor.createMarketEarningDistributionTask(market);\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticVault\\n     */\\n    function cancelMarketEarningDistributionTask(\\n        address market\\n    ) external override nonReentrant onlyFactoryOrDao {\\n        earningDistributor.cancelMarketEarningDistributionTask(market);\\n    }\\n\\n    /**\\n     * @inheritdoc IChromaticVault\\n     */\\n    function distributeMarketEarning(\\n        address market,\\n        uint256 fee,\\n        address keeper\\n    ) external override nonReentrant onlyEarningDistributor {\\n        address token = address(IChromaticMarket(market).settlementToken());\\n        if (!_marketEarningDistributable(market, token)) return;\\n\\n        uint256 earning = pendingMarketEarnings[market];\\n        delete pendingMarketEarnings[market];\\n\\n        uint256 usedFee = fee != 0 ? _transferKeeperFee(token, keeper, fee, earning) : 0;\\n        emit TransferKeeperFee(market, fee, usedFee);\\n\\n        uint256 remainEarning = earning - usedFee;\\n\\n        uint256 balance = makerMarketBalances[market];\\n        makerMarketBalances[market] += remainEarning;\\n        makerBalances[token] += remainEarning;\\n\\n        IChromaticMarket(market).distributeEarningToBins(remainEarning, balance);\\n\\n        emit MarketEarningDistributed(market, earning, usedFee, balance);\\n    }\\n\\n    /**\\n     * @dev Private function to check if the market earning is distributable for a market.\\n     * @param market The address of the market.\\n     * @param token The address of the settlement token.\\n     * @return True if the market earning is distributable, False otherwise.\\n     */\\n    function _marketEarningDistributable(\\n        address market,\\n        address token\\n    ) private view returns (bool) {\\n        return pendingMarketEarnings[market] >= factory.getEarningDistributionThreshold(token);\\n    }\\n}\\n\",\"keccak256\":\"0xd67bf792df151d5353a001edc953d25e281d2676b13887f6927925ae389864b4\",\"license\":\"BUSL-1.1\"},\"contracts/core/interfaces/ICLBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\n\\n/**\\n * @title ICLBToken\\n * @dev Interface for CLBToken contract, which represents Liquidity Bin tokens.\\n */\\ninterface ICLBToken is IERC1155, IERC1155MetadataURI {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     * @param id The token ID for which to retrieve the total supply.\\n     * @return The total supply of tokens for the given token ID.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Total amounts of tokens in with the given ids.\\n     * @param ids The token IDs for which to retrieve the total supply.\\n     * @return The total supples of tokens for the given token IDs.\\n     */\\n    function totalSupplyBatch(uint256[] memory ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Mints new tokens and assigns them to the specified address.\\n     * @param to The address to which the minted tokens will be assigned.\\n     * @param id The token ID to mint.\\n     * @param amount The amount of tokens to mint.\\n     * @param data Additional data to pass during the minting process.\\n     */\\n    function mint(address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Burns tokens from a specified address.\\n     * @param from The address from which to burn tokens.\\n     * @param id The token ID to burn.\\n     * @param amount The amount of tokens to burn.\\n     */\\n    function burn(address from, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Retrieves the number of decimals used for token amounts.\\n     * @return The number of decimals used for token amounts.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Retrieves the name of a token.\\n     * @param id The token ID for which to retrieve the name.\\n     * @return The name of the token.\\n     */\\n    function name(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the description of a token.\\n     * @param id The token ID for which to retrieve the description.\\n     * @return The description of the token.\\n     */\\n    function description(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the image URI of a token.\\n     * @param id The token ID for which to retrieve the image URI.\\n     * @return The image URI of the token.\\n     */\\n    function image(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x104e532ccc23403fdf1b340c292d208c3837f9abd29eda787eec5b6ac1438488\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IMarketTrade} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketTrade.sol\\\";\\nimport {IMarketLiquidity} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidity.sol\\\";\\nimport {IMarketLens} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLens.sol\\\";\\nimport {IMarketState} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketState.sol\\\";\\nimport {IMarketLiquidate} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidate.sol\\\";\\nimport {IMarketSettle} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketSettle.sol\\\";\\n\\n/**\\n * @title IChromaticMarket\\n * @dev Interface for the Chromatic Market contract, which combines trade and liquidity functionalities.\\n */\\ninterface IChromaticMarket is\\n    IMarketTrade,\\n    IMarketLiquidity,\\n    IMarketLens,\\n    IMarketState,\\n    IMarketLiquidate,\\n    IMarketSettle\\n{\\n\\n}\\n\",\"keccak256\":\"0x1f4180fc5c9ce9aa38b54a38fb51ed4acdc3f9f6be8021b46f1b183b12934f5e\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IMarketDeployer} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IMarketDeployer.sol\\\";\\nimport {ISettlementTokenRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\\\";\\nimport {IOracleProviderRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IOracleProviderRegistry.sol\\\";\\n\\n/**\\n * @title IChromaticMarketFactory\\n * @dev Interface for the Chromatic Market Factory contract.\\n */\\ninterface IChromaticMarketFactory is\\n    IMarketDeployer,\\n    IOracleProviderRegistry,\\n    ISettlementTokenRegistry,\\n    IInterestCalculator\\n{\\n    /**\\n     * @notice Emitted when the DAO address is updated.\\n     * @param daoOld The old DAO address.\\n     * @param daoNew The new DAO address.\\n     */\\n    event DaoUpdated(address indexed daoOld, address indexed daoNew);\\n\\n    /**\\n     * @notice Emitted when the DAO treasury address is updated.\\n     * @param treasuryOld The old DAO treasury address.\\n     * @param treasuryNew The new DAO treasury address.\\n     */\\n    event TreasuryUpdated(address indexed treasuryOld, address indexed treasuryNew);\\n\\n    /**\\n     * @notice Emitted when the liquidator address is updated.\\n     * @param liquidatorOld The old liquidator address.\\n     * @param liquidatorNew The new liquidator address.\\n     */\\n    event LiquidatorUpdated(address indexed liquidatorOld, address indexed liquidatorNew);\\n\\n    /**\\n     * @notice Emitted when the keeper fee payer address is updated.\\n     * @param keeperFeePayerOld The old keeper fee payer address.\\n     * @param keeperFeePayerNew The new keeper fee payer address.\\n     */\\n    event KeeperFeePayerUpdated(\\n        address indexed keeperFeePayerOld,\\n        address indexed keeperFeePayerNew\\n    );\\n\\n    /**\\n     * @notice Emitted when the default protocol fee rate is updated.\\n     * @param defaultProtocolFeeRateOld The old default protocol fee rate.\\n     * @param defaultProtocolFeeRateNew The new default protocol fee rate.\\n     */\\n    event DefaultProtocolFeeRateUpdated(\\n        uint16 indexed defaultProtocolFeeRateOld,\\n        uint16 indexed defaultProtocolFeeRateNew\\n    );\\n\\n    /**\\n     * @notice Emitted when the vault address is set.\\n     * @param vault The vault address.\\n     */\\n    event VaultSet(address indexed vault);\\n\\n    /**\\n     * @notice Emitted when the market settlement task address is updated.\\n     * @param marketSettlementOld The old market settlement task address.\\n     * @param marketSettlementNew The new market settlement task address.\\n     */\\n    event MarketSettlementUpdated(\\n        address indexed marketSettlementOld,\\n        address indexed marketSettlementNew\\n    );\\n\\n    /**\\n     * @notice Emitted when a market is created.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @param market The address of the created market.\\n     */\\n    event MarketCreated(\\n        address indexed oracleProvider,\\n        address indexed settlementToken,\\n        address indexed market\\n    );\\n\\n    /**\\n     * @notice Returns the address of the DAO.\\n     * @return The address of the DAO.\\n     */\\n    function dao() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO treasury.\\n     * @return The address of the DAO treasury.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the liquidator.\\n     * @return The address of the liquidator.\\n     */\\n    function liquidator() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the vault.\\n     * @return The address of the vault.\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the keeper fee payer.\\n     * @return The address of the keeper fee payer.\\n     */\\n    function keeperFeePayer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the market settlement task.\\n     * @return The address of the market settlement task.\\n     */\\n    function marketSettlement() external view returns (address);\\n\\n    /**\\n     * @notice Returns the default protocol fee rate.\\n     * @return The default protocol fee rate.\\n     */\\n    function defaultProtocolFeeRate() external view returns (uint16);\\n\\n    /**\\n     * @notice Updates the DAO address.\\n     * @param _dao The new DAO address.\\n     */\\n    function updateDao(address _dao) external;\\n\\n    /**\\n     * @notice Updates the DAO treasury address.\\n     * @param _treasury The new DAO treasury address.\\n     */\\n    function updateTreasury(address _treasury) external;\\n\\n    /**\\n     * @notice Updates the liquidator address.\\n     * @param _liquidator The new liquidator address.\\n     */\\n    function updateLiquidator(address _liquidator) external;\\n\\n    /**\\n     * @notice Updates the keeper fee payer address.\\n     * @param _keeperFeePayer The new keeper fee payer address.\\n     */\\n    function updateKeeperFeePayer(address _keeperFeePayer) external;\\n\\n    /**\\n     * @notice Updates the default protocl fee rate.\\n     * @param _defaultProtocolFeeRate The new default protocol fee rate.\\n     */\\n    function updateDefaultProtocolFeeRate(uint16 _defaultProtocolFeeRate) external;\\n\\n    /**\\n     * @notice Sets the vault address.\\n     * @param _vault The vault address.\\n     */\\n    function setVault(address _vault) external;\\n\\n    /**\\n     * @notice Updates the market settlement task address.\\n     * @param _marketSettlement The new market settlement task address.\\n     */\\n    function updateMarketSettlement(address _marketSettlement) external;\\n\\n    /**\\n     * @notice Returns an array of all market addresses.\\n     * @return markets An array of all market addresses.\\n     */\\n    function getMarkets() external view returns (address[] memory markets);\\n\\n    /**\\n     * @notice Returns an array of market addresses associated with a settlement token.\\n     * @param settlementToken The address of the settlement token.\\n     * @return An array of market addresses.\\n     */\\n    function getMarketsBySettlmentToken(\\n        address settlementToken\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of a market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @return The address of the market.\\n     */\\n    function getMarket(\\n        address oracleProvider,\\n        address settlementToken\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Creates a new market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     */\\n    function createMarket(address oracleProvider, address settlementToken) external;\\n\\n    /**\\n     * @notice Checks if a market is registered.\\n     * @param market The address of the market.\\n     * @return True if the market is registered, false otherwise.\\n     */\\n    function isRegisteredMarket(address market) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x55af351b2b8078b2bce59668930a3d8f2102a97d38a50859f0f93183712cf2b0\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ILendingPool} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/ILendingPool.sol\\\";\\nimport {IVault} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/IVault.sol\\\";\\n\\n/**\\n * @title IChromaticVault\\n * @notice Interface for the Chromatic Vault contract.\\n */\\ninterface IChromaticVault is IVault, ILendingPool {\\n    /**\\n     * @dev Emitted when market earning is accumulated.\\n     * @param market The address of the market.\\n     * @param earning The amount of earning accumulated.\\n     */\\n    event MarketEarningAccumulated(address indexed market, uint256 earning);\\n\\n    /**\\n     * @dev Emitted when maker earning is distributed.\\n     * @param token The address of the settlement token.\\n     * @param earning The amount of earning distributed.\\n     * @param usedKeeperFee The amount of keeper fee used.\\n     */\\n    event MakerEarningDistributed(\\n        address indexed token,\\n        uint256 indexed earning,\\n        uint256 indexed usedKeeperFee\\n    );\\n\\n    /**\\n     * @dev Emitted when market earning is distributed.\\n     * @param market The address of the market.\\n     * @param earning The amount of earning distributed.\\n     * @param usedKeeperFee The amount of keeper fee used.\\n     * @param marketBalance The balance of the market.\\n     */\\n    event MarketEarningDistributed(\\n        address indexed market,\\n        uint256 indexed earning,\\n        uint256 indexed usedKeeperFee,\\n        uint256 marketBalance\\n    );\\n\\n    /**\\n     * @notice Emitted when the vault earning distributor address is set.\\n     * @param vaultEarningDistributor The vault earning distributor address.\\n     * @param oldVaultEarningDistributor The old vault earning distributor address.\\n     */\\n    event VaultEarningDistributorSet(\\n        address indexed vaultEarningDistributor,\\n        address indexed oldVaultEarningDistributor\\n    );\\n\\n    function setVaultEarningDistributor(address _earningDistributor) external;\\n\\n    function pendingMakerEarnings(address token) external view returns (uint256);\\n\\n    function pendingMarketEarnings(address market) external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function createMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Cancels a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function cancelMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Distributes the maker earning for a token to the each markets.\\n     * @param token The address of the settlement token.\\n     * @param fee The keeper fee amount.\\n     * @param keeper The keeper address to receive fee.\\n     */\\n    function distributeMakerEarning(address token, uint256 fee, address keeper) external;\\n\\n    /**\\n     * @notice Creates a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function createMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Cancels a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function cancelMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Distributes the market earning for a market to the each bins.\\n     * @param market The address of the market.\\n     * @param fee The fee amount.\\n     * @param keeper The keeper address to receive fee.\\n     */\\n    function distributeMarketEarning(address market, uint256 fee, address keeper) external;\\n}\\n\",\"keccak256\":\"0xeada749c03391140157b03f2a165f142ab55bf2aa227f98299a29c86fa13daf9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IInterestCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IInterestCalculator\\n * @dev Interface for an interest calculator contract.\\n */\\ninterface IInterestCalculator {\\n    /**\\n     * @notice Calculates the interest accrued for a given token and amount within a specified time range.\\n     * @param token The address of the token.\\n     * @param amount The amount of the token.\\n     * @param from The starting timestamp (inclusive) of the time range.\\n     * @param to The ending timestamp (exclusive) of the time range.\\n     * @return The accrued interest for the specified token and amount within the given time range.\\n     */\\n    function calculateInterest(\\n        address token,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf70b44ce6eb1422abed056169dc5db83ddbb2ee34d7751192f00e6cb3dc1ccbe\",\"license\":\"MIT\"},\"contracts/core/interfaces/IKeeperFeePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IKeeperFeePayer\\n * @dev Interface for a contract that pays keeper fees.\\n */\\ninterface IKeeperFeePayer {\\n    event SetRouter(address indexed);\\n\\n    /**\\n     * @notice Approves or revokes approval to the Uniswap router for a given token.\\n     * @param token The address of the token.\\n     * @param approve A boolean indicating whether to approve or revoke approval.\\n     */\\n    function approveToRouter(address token, bool approve) external;\\n\\n    /**\\n     * @notice Pays the keeper fee using Uniswap swaps.\\n     * @param tokenIn The address of the token being swapped.\\n     * @param amountOut The desired amount of output tokens.\\n     * @param keeperAddress The address of the keeper to receive the fee.\\n     * @return amountIn The actual amount of input tokens used for the swap.\\n     */\\n    function payKeeperFee(\\n        address tokenIn,\\n        uint256 amountOut,\\n        address keeperAddress\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xffaab8adb0713fa436e217be2aa016cf79b55ec2868db06656b150217151a66e\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultEarningDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IVaultEarningDistributor {\\n    /**\\n     * @notice Creates a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function createMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Cancels a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function cancelMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Resolves the maker earning distribution for a specific token.\\n     * @param token The address of the settlement token.\\n     * @return canExec True if the distribution can be executed, otherwise False.\\n     * @return execPayload The payload for executing the distribution.\\n     */\\n    function resolveMakerEarningDistribution(\\n        address token\\n    ) external view returns (bool canExec, bytes memory execPayload);\\n\\n    /**\\n     * @notice Distributes the maker earning for a token to the each markets.\\n     * @param token The address of the settlement token.\\n     */\\n    function distributeMakerEarning(address token) external;\\n\\n    /**\\n     * @notice Creates a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function createMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Cancels a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function cancelMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Resolves the market earning distribution for a market.\\n     * @param market The address of the market.\\n     * @return canExec True if the distribution can be executed.\\n     * @return execPayload The payload for executing the distribution.\\n     */\\n    function resolveMarketEarningDistribution(\\n        address market\\n    ) external view returns (bool canExec, bytes memory execPayload);\\n\\n    /**\\n     * @notice Distributes the market earning for a market to the each bins.\\n     * @param market The address of the market.\\n     */\\n    function distributeMarketEarning(address market) external;\\n}\\n\",\"keccak256\":\"0x38024659a3ae18f011c063756bca74d6d67832a25068a7338fdb533ce0471ff9\",\"license\":\"MIT\"},\"contracts/core/interfaces/callback/IChromaticFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IChromaticFlashLoanCallback\\n * @dev Interface for a contract that handles flash loan callbacks in the Chromatic protocol.\\n *      Flash loans are loans that are borrowed and repaid within a single transaction.\\n *      This interface defines the function signature for the flash loan callback.\\n */\\ninterface IChromaticFlashLoanCallback {\\n    /**\\n     * @notice Handles the flash loan callback after a flash loan has been executed.\\n     * @param fee The fee amount charged for the flash loan.\\n     * @param data Additional data associated with the flash loan.\\n     */\\n    function flashLoanCallback(uint256 fee, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x0bb7ac0b3badba3ef9616c955b0c4269a65337d44dcf0bd0662d0465a0134b1f\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/IMarketDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title An interface for a contract that is capable of deploying Chromatic markets\\n * @notice A contract that constructs a market must implement this to pass arguments to the market\\n * @dev This is used to avoid having constructor arguments in the market contract, which results in the init code hash\\n * of the market being constant allowing the CREATE2 address of the market to be cheaply computed on-chain\\n */\\ninterface IMarketDeployer {\\n    /**\\n     * @notice Get the parameters to be used in constructing the market, set transiently during market creation.\\n     * @dev Called by the market constructor to fetch the parameters of the market\\n     * Returns underlyingAsset The underlying asset of the market\\n     * Returns settlementToken The settlement token of the market\\n     * Returns protocolFeeRate The protocol fee rate of the market\\n     * Returns vPoolCapacity Capacity of virtual future pool\\n     * Returns vPoolA Amplification coefficient of virtual future pool, precise value\\n     */\\n    function parameters()\\n        external\\n        view\\n        returns (address oracleProvider, address settlementToken, uint16 protocolFeeRate);\\n}\\n\",\"keccak256\":\"0xd26775e3671a4b653a631c3d94de5c4e193113fb4d9d2323a2bc83081e682bff\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/IOracleProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {OracleProviderProperties} from \\\"@chromatic-protocol/contracts/core/libraries/registry/OracleProviderProperties.sol\\\";\\n\\n/**\\n * @title IOracleProviderRegistry\\n * @dev Interface for the Oracle Provider Registry contract.\\n */\\ninterface IOracleProviderRegistry {\\n    /**\\n     * @dev Emitted when a new oracle provider is registered.\\n     * @param oracleProvider The address of the registered oracle provider.\\n     * @param properties The properties of the registered oracle provider.\\n     */\\n    event OracleProviderRegistered(\\n        address indexed oracleProvider,\\n        OracleProviderProperties properties\\n    );\\n\\n    /**\\n     * @dev Emitted when an oracle provider is unregistered.\\n     * @param oracleProvider The address of the unregistered oracle provider.\\n     */\\n    event OracleProviderUnregistered(address indexed oracleProvider);\\n\\n    /**\\n     * @dev Emitted when the take-profit basis points range of an oracle provider is updated.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\\n     */\\n    event UpdateTakeProfitBPSRange(\\n        address indexed oracleProvider,\\n        uint32 indexed minTakeProfitBPS,\\n        uint32 indexed maxTakeProfitBPS\\n    );\\n\\n    /**\\n     * @dev Emitted when the level of an oracle provider is set.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new level set for the oracle provider.\\n     */\\n    event UpdateLeverageLevel(address indexed oracleProvider, uint8 indexed level);\\n\\n    /**\\n     * @notice Registers an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to register.\\n     * @param properties The properties of the oracle provider.\\n     */\\n    function registerOracleProvider(\\n        address oracleProvider,\\n        OracleProviderProperties memory properties\\n    ) external;\\n\\n    /**\\n     * @notice Unregisters an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to unregister.\\n     */\\n    function unregisterOracleProvider(address oracleProvider) external;\\n\\n    /**\\n     * @notice Gets the registered oracle providers.\\n     * @return An array of registered oracle provider addresses.\\n     */\\n    function registeredOracleProviders() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if an oracle provider is registered.\\n     * @param oracleProvider The address of the oracle provider to check.\\n     * @return A boolean indicating if the oracle provider is registered.\\n     */\\n    function isRegisteredOracleProvider(address oracleProvider) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the properties of an oracle provider.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @return The properties of the oracle provider.\\n     */\\n    function getOracleProviderProperties(\\n        address oracleProvider\\n    ) external view returns (OracleProviderProperties memory);\\n\\n    /**\\n     * @notice Updates the take-profit basis points range of an oracle provider.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\\n     */\\n    function updateTakeProfitBPSRange(\\n        address oracleProvider,\\n        uint32 minTakeProfitBPS,\\n        uint32 maxTakeProfitBPS\\n    ) external;\\n\\n    /**\\n     * @notice Updates the leverage level of an oracle provider in the registry.\\n     * @dev The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new leverage level to be set for the oracle provider.\\n     */\\n    function updateLeverageLevel(address oracleProvider, uint8 level) external;\\n}\\n\",\"keccak256\":\"0xd5d7bbf0355ac791412f58b3c469b864833cd962db6280bfa5938a20131cdc92\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {InterestRate} from \\\"@chromatic-protocol/contracts/core/libraries/InterestRate.sol\\\";\\n\\n/**\\n * @title ISettlementTokenRegistry\\n * @dev Interface for the Settlement Token Registry contract.\\n */\\ninterface ISettlementTokenRegistry {\\n    /**\\n     * @dev Emitted when a new settlement token is registered.\\n     * @param token The address of the registered settlement token.\\n     * @param oracleProvider The oracle provider address for the settlement token.\\n     * @param minimumMargin The minimum margin for the markets using this settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    event SettlementTokenRegistered(\\n        address indexed token,\\n        address indexed oracleProvider,\\n        uint256 minimumMargin,\\n        uint256 interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    );\\n\\n    /**\\n     * @dev Emitted when the oracle provider address for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param oracleProvider The oracle provider address for the settlement token.\\n     */\\n    event SetSettlementTokenOracleProvider(address indexed token, address indexed oracleProvider);\\n\\n    /**\\n     * @dev Emitted when the minimum margin for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    event SetMinimumMargin(address indexed token, uint256 indexed minimumMargin);\\n\\n    /**\\n     * @dev Emitted when the flash loan fee rate for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    event SetFlashLoanFeeRate(address indexed token, uint256 indexed flashLoanFeeRate);\\n\\n    /**\\n     * @dev Emitted when the earning distribution threshold for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    event SetEarningDistributionThreshold(\\n        address indexed token,\\n        uint256 indexed earningDistributionThreshold\\n    );\\n\\n    /**\\n     * @dev Emitted when the Uniswap fee tier for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    event SetUniswapFeeTier(address indexed token, uint24 indexed uniswapFeeTier);\\n\\n    /**\\n     * @dev Emitted when an interest rate record is appended for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event InterestRateRecordAppended(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the last interest rate record is removed for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event LastInterestRateRecordRemoved(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @notice Registers a new settlement token.\\n     * @param token The address of the settlement token to register.\\n     * @param oracleProvider The oracle provider address for the settlement token.\\n     * @param minimumMargin The minimum margin for the settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    function registerSettlementToken(\\n        address token,\\n        address oracleProvider,\\n        uint256 minimumMargin,\\n        uint256 interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    ) external;\\n\\n    /**\\n     * @notice Gets the list of registered settlement tokens.\\n     * @return An array of addresses representing the registered settlement tokens.\\n     */\\n    function registeredSettlementTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if a settlement token is registered.\\n     * @param token The address of the settlement token to check.\\n     * @return True if the settlement token is registered, false otherwise.\\n     */\\n    function isRegisteredSettlementToken(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the oracle provider address for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The oracle provider address for the settlement token.\\n     */\\n    function getSettlementTokenOracleProvider(address token) external view returns (address);\\n\\n    /**\\n     * @notice Sets the oracle provider address for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param oracleProvider The new oracle provider address for the settlement token.\\n     */\\n    function setSettlementTokenOracleProvider(address token, address oracleProvider) external;\\n\\n    /**\\n     * @notice Gets the minimum margin for a settlement token.\\n     * @dev The minimumMargin is used as the minimum value for the taker margin of a position\\n     *      or as the minimum value for the maker margin of each bin.\\n     * @param token The address of the settlement token.\\n     * @return The minimum margin for the settlement token.\\n     */\\n    function getMinimumMargin(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the minimum margin for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    function setMinimumMargin(address token, uint256 minimumMargin) external;\\n\\n    /**\\n     * @notice Gets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The flash loan fee rate for the settlement token.\\n     */\\n    function getFlashLoanFeeRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    function setFlashLoanFeeRate(address token, uint256 flashLoanFeeRate) external;\\n\\n    /**\\n     * @notice Gets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The earning distribution threshold for the settlement token.\\n     */\\n    function getEarningDistributionThreshold(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    function setEarningDistributionThreshold(\\n        address token,\\n        uint256 earningDistributionThreshold\\n    ) external;\\n\\n    /**\\n     * @notice Gets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The Uniswap fee tier for the settlement token.\\n     */\\n    function getUniswapFeeTier(address token) external view returns (uint24);\\n\\n    /**\\n     * @notice Sets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    function setUniswapFeeTier(address token, uint24 uniswapFeeTier) external;\\n\\n    /**\\n     * @notice Appends an interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    function appendInterestRateRecord(\\n        address token,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes the last interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     */\\n    function removeLastInterestRateRecord(address token) external;\\n\\n    /**\\n     * @notice Gets the current interest rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The current interest rate for the settlement token.\\n     */\\n    function currentInterestRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets all the interest rate records for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return An array of interest rate records for the settlement token.\\n     */\\n    function getInterestRateRecords(\\n        address token\\n    ) external view returns (InterestRate.Record[] memory);\\n}\\n\",\"keccak256\":\"0x5494b39be7e9f1d831e932c1d31513c5a7c8eb86e3054c12c59b71de29aefc9d\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {PendingPosition, ClosingPosition, PendingLiquidity, ClaimableLiquidity, LiquidityBinStatus} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\n\\n/**\\n * @title IMarketLens\\n * @dev The interface for liquidity information retrieval in a market.\\n */\\ninterface IMarketLens {\\n    /**\\n     * @dev Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.\\n     * @return amount The total liquidity amount for the specified trading fee rate.\\n     */\\n    function getBinLiquidity(int16 tradingFeeRate) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.\\n     * @return amount The available (free) liquidity amount for the specified trading fee rate.\\n     */\\n    function getBinFreeLiquidity(int16 tradingFeeRate) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev Retrieves the values of a specific trading fee rate's bins in the liquidity pool.\\n     *      The value of a bin represents the total valuation of the liquidity in the bin.\\n     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.\\n     * @return values The value list of the bins for the specified trading fee rates.\\n     */\\n    function getBinValues(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (uint256[] memory values);\\n\\n    /**\\n     * @dev Retrieves the liquidity receipt with the given receipt ID.\\n     *      It throws NotExistLpReceipt if the specified receipt ID does not exist.\\n     * @param receiptId The ID of the liquidity receipt to retrieve.\\n     * @return receipt The liquidity receipt with the specified ID.\\n     */\\n    function getLpReceipt(uint256 receiptId) external view returns (LpReceipt memory);\\n\\n    /**\\n     * @dev Retrieves the liquidity receipts with the given receipt IDs.\\n     *      It throws NotExistLpReceipt if the specified receipt ID does not exist.\\n     * @param receiptIds The ID list of the liquidity receipt to retrieve.\\n     * @return receipts The liquidity receipt list with the specified IDs.\\n     */\\n    function getLpReceipts(\\n        uint256[] calldata receiptIds\\n    ) external view returns (LpReceipt[] memory);\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information for a specific trading fee rate from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.\\n     * @return pendingLiquidity An instance of PendingLiquidity representing the pending liquidity information.\\n     */\\n    function pendingLiquidity(int16 tradingFeeRate) external view returns (PendingLiquidity memory);\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information for multiple trading fee rates from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.\\n     * @return pendingLiquidityBatch An array of PendingLiquidity instances representing the pending liquidity information for each trading fee rate.\\n     */\\n    function pendingLiquidityBatch(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (PendingLiquidity[] memory);\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        int16 tradingFeeRate,\\n        uint256 oracleVersion\\n    ) external view returns (ClaimableLiquidity memory);\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for multiple trading fee rates and a specific oracle version from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidityBatch An array of ClaimableLiquidity instances representing the claimable liquidity information for each trading fee rate.\\n     */\\n    function claimableLiquidityBatch(\\n        int16[] calldata tradingFeeRates,\\n        uint256 oracleVersion\\n    ) external view returns (ClaimableLiquidity[] memory);\\n\\n    /**\\n     * @dev Retrieves the liquidity bin statuses for the caller's liquidity pool.\\n     * @return statuses An array of LiquidityBinStatus representing the liquidity bin statuses.\\n     */\\n    function liquidityBinStatuses() external view returns (LiquidityBinStatus[] memory);\\n\\n    /**\\n     * @dev Retrieves the position with the given position ID.\\n     *      It throws NotExistPosition if the specified position ID does not exist.\\n     * @param positionId The ID of the position to retrieve.\\n     * @return position The position with the specified ID.\\n     */\\n    function getPosition(uint256 positionId) external view returns (Position memory);\\n\\n    /**\\n     * @dev Retrieves multiple positions by their IDs.\\n     * @param positionIds The IDs of the positions to retrieve.\\n     * @return positions An array of retrieved positions.\\n     */\\n    function getPositions(\\n        uint256[] calldata positionIds\\n    ) external view returns (Position[] memory positions);\\n\\n    /**\\n     * @dev Retrieves the pending position information for a specific trading fee rate from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.\\n     * @return pendingPosition An instance of PendingPosition representing the pending position information.\\n     */\\n    function pendingPosition(int16 tradingFeeRate) external view returns (PendingPosition memory);\\n\\n    /**\\n     * @dev Retrieves the pending position information for multiple trading fee rates from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending position.\\n     * @return pendingPositionBatch An array of PendingPosition instances representing the pending position information for each trading fee rate.\\n     */\\n    function pendingPositionBatch(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (PendingPosition[] memory);\\n\\n    /**\\n     * @dev Retrieves the closing position information for a specific trading fee rate from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the closing position.\\n     * @return closingPosition An instance of PendingPosition representing the closing position information.\\n     */\\n    function closingPosition(int16 tradingFeeRate) external view returns (ClosingPosition memory);\\n\\n    /**\\n     * @dev Retrieves the closing position information for multiple trading fee rates from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the closing position.\\n     * @return pendingPositionBatch An array of PendingPosition instances representing the closing position information for each trading fee rate.\\n     */\\n    function closingPositionBatch(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (ClosingPosition[] memory);\\n}\\n\",\"keccak256\":\"0x49c617df01dfac6b3a58354b2e865a4d92da240bc786c50bd993837e61d51693\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketLiquidate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\n\\n/**\\n * @title IMarketLiquidate\\n * @dev Interface for liquidating and claiming positions in a market.\\n */\\ninterface IMarketLiquidate {\\n    /**\\n     * @dev Emitted when a position is claimed by keeper.\\n     * @param account The address of the account claiming the position.\\n     * @param pnl The profit or loss of the claimed position.\\n     * @param interest The interest paid for the claimed position.\\n     * @param usedKeeperFee The amount of keeper fee used for the liquidation.\\n     * @param position The claimed position.\\n     */\\n    event ClaimPositionByKeeper(\\n        address indexed account,\\n        int256 indexed pnl,\\n        uint256 indexed interest,\\n        uint256 usedKeeperFee,\\n        Position position\\n    );\\n\\n    /**\\n     * @dev Emitted when a position is liquidated.\\n     * @param account The address of the account being liquidated.\\n     * @param pnl The profit or loss of the claimed position.\\n     * @param interest The interest paid for the claimed position.\\n     * @param usedKeeperFee The amount of keeper fee used for the liquidation.\\n     * @param position The liquidated position.\\n     */\\n    event Liquidate(\\n        address indexed account,\\n        int256 indexed pnl,\\n        uint256 indexed interest,\\n        uint256 usedKeeperFee,\\n        Position position\\n    );\\n\\n    /**\\n     * @dev Checks if a position is eligible for liquidation.\\n     * @param positionId The ID of the position to check.\\n     * @return A boolean indicating if the position is eligible for liquidation.\\n     */\\n    function checkLiquidation(uint256 positionId) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if a position is eligible for liquidation.\\n     * @param positionId The ID of the position to check.\\n     * @param oracleVersion The oracle version data for liquidation check.\\n     * @return A boolean indicating if the position is eligible for liquidation.\\n     */\\n    function checkLiquidationWithOracleVersion(\\n        uint256 positionId,\\n        IOracleProvider.OracleVersion memory oracleVersion\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Liquidates a position.\\n     * @param positionId The ID of the position to liquidate.\\n     * @param keeper The address of the keeper performing the liquidation.\\n     * @param keeperFee The native token amount of the keeper's fee.\\n     */\\n    function liquidate(uint256 positionId, address keeper, uint256 keeperFee) external;\\n\\n    /**\\n     * @dev Checks if a position is eligible for claim.\\n     * @param positionId The ID of the position to check.\\n     * @return A boolean indicating if the position is eligible for claim.\\n     */\\n    function checkClaimPosition(uint256 positionId) external view returns (bool);\\n\\n    /**\\n     * @dev Claims a closed position on behalf of a keeper.\\n     * @param positionId The ID of the position to claim.\\n     * @param keeper The address of the keeper claiming the position.\\n     * @param keeperFee The native token amount of the keeper's fee.\\n     */\\n    function claimPosition(uint256 positionId, address keeper, uint256 keeperFee) external;\\n}\\n\",\"keccak256\":\"0x94e7286c717c000cef88cd1f17a3bb5eacaded11d1b010b76e29b4b6c31c5bc6\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\n\\n/**\\n * @title IMarketLiquidity\\n * @dev The interface for liquidity operations in a market.\\n */\\ninterface IMarketLiquidity {\\n    /**\\n     * @dev Emitted when liquidity is added to the market.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event AddLiquidity(LpReceipt receipt);\\n\\n    /**\\n     * @dev Emitted when liquidity is added to the market.\\n     * @param receipts An array of LP receipts.\\n     */\\n    event AddLiquidityBatch(LpReceipt[] receipts);\\n\\n    /**\\n     * @dev Emitted when liquidity is claimed from the market.\\n     * @param clbTokenAmount The amount of CLB tokens claimed.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event ClaimLiquidity(LpReceipt receipt, uint256 indexed clbTokenAmount);\\n\\n    /**\\n     * @dev Emitted when liquidity is claimed from the market.\\n     * @param receipts An array of LP receipts.\\n     * @param clbTokenAmounts The amount list of CLB tokens claimed.\\n     */\\n    event ClaimLiquidityBatch(LpReceipt[] receipts, uint256[] clbTokenAmounts);\\n\\n    /**\\n     * @dev Emitted when liquidity is removed from the market.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event RemoveLiquidity(LpReceipt receipt);\\n\\n    /**\\n     * @dev Emitted when liquidity is removed from the market.\\n     * @param receipts An array of LP receipts.\\n     */\\n    event RemoveLiquidityBatch(LpReceipt[] receipts);\\n\\n    /**\\n     * @dev Emitted when liquidity is withdrawn from the market.\\n     * @param receipt The liquidity receipt.\\n     * @param amount The amount of liquidity withdrawn.\\n     * @param burnedCLBTokenAmount The amount of burned CLB tokens.\\n     */\\n    event WithdrawLiquidity(\\n        LpReceipt receipt,\\n        uint256 indexed amount,\\n        uint256 indexed burnedCLBTokenAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when liquidity is withdrawn from the market.\\n     * @param receipts An array of LP receipts.\\n     * @param amounts The amount list of liquidity withdrawn.\\n     * @param burnedCLBTokenAmounts The amount list of burned CLB tokens.\\n     */\\n    event WithdrawLiquidityBatch(\\n        LpReceipt[] receipts,\\n        uint256[] amounts,\\n        uint256[] burnedCLBTokenAmounts\\n    );\\n\\n    /**\\n     * @dev Adds liquidity to the market.\\n     * @param recipient The address to receive the liquidity tokens.\\n     * @param tradingFeeRate The trading fee rate for the liquidity.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function addLiquidity(\\n        address recipient,\\n        int16 tradingFeeRate,\\n        bytes calldata data\\n    ) external returns (LpReceipt memory);\\n\\n    /**\\n     * @notice Adds liquidity to multiple liquidity bins of the market in a batch.\\n     * @param recipient The address of the recipient for each liquidity bin.\\n     * @param tradingFeeRates An array of fee rates for each liquidity bin.\\n     * @param amounts An array of amounts to add as liquidity for each bin.\\n     * @param data Additional data for the liquidity callback.\\n     * @return An array of LP receipts.\\n     */\\n    function addLiquidityBatch(\\n        address recipient,\\n        int16[] calldata tradingFeeRates,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external returns (LpReceipt[] memory);\\n\\n    /**\\n     * @dev Claims liquidity from a liquidity receipt.\\n     * @param receiptId The ID of the liquidity receipt.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function claimLiquidity(uint256 receiptId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Claims liquidity from a liquidity receipt.\\n     * @param receiptIds The array of the liquidity receipt IDs.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function claimLiquidityBatch(uint256[] calldata receiptIds, bytes calldata data) external;\\n\\n    /**\\n     * @dev Removes liquidity from the market.\\n     * @param recipient The address to receive the removed liquidity.\\n     * @param tradingFeeRate The trading fee rate for the liquidity.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function removeLiquidity(\\n        address recipient,\\n        int16 tradingFeeRate,\\n        bytes calldata data\\n    ) external returns (LpReceipt memory);\\n\\n    /**\\n     * @dev Removes liquidity from the market.\\n     * @param recipient The address to receive the removed liquidity.\\n     * @param tradingFeeRates An array of fee rates for each liquidity bin.\\n     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function removeLiquidityBatch(\\n        address recipient,\\n        int16[] calldata tradingFeeRates,\\n        uint256[] calldata clbTokenAmounts,\\n        bytes calldata data\\n    ) external returns (LpReceipt[] memory);\\n\\n    /**\\n     * @dev Withdraws liquidity from a liquidity receipt.\\n     * @param receiptId The ID of the liquidity receipt.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function withdrawLiquidity(uint256 receiptId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Withdraws liquidity from a liquidity receipt.\\n     * @param receiptIds The array of the liquidity receipt IDs.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function withdrawLiquidityBatch(uint256[] calldata receiptIds, bytes calldata data) external;\\n\\n    /**\\n     * @dev Distributes earning to the liquidity bins.\\n     * @param earning The amount of earning to distribute.\\n     * @param marketBalance The balance of the market.\\n     */\\n    function distributeEarningToBins(uint256 earning, uint256 marketBalance) external;\\n}\\n\",\"keccak256\":\"0xe60df36a3b456aa53a5d3289673c78b5bd590e82d7f53175399365edfa1f90b6\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketSettle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IMarketSettle\\n * @dev Interface for market settlement.\\n */\\ninterface IMarketSettle {\\n    /**\\n     * @notice Executes the settlement process for the Chromatic market.\\n     * @dev This function is called to settle the market.\\n     * @param feeRates The feeRate list of liquidity bin to settle.\\n     */\\n    function settle(int16[] calldata feeRates) external;\\n\\n    /**\\n     * @notice Executes the settlement process for the Chromatic market.\\n     * @dev This function is called to settle the market.\\n     */\\n    function settleAll() external;\\n}\\n\",\"keccak256\":\"0xb88a0c6429f6311db0b58b113d880ba1816aa7e59953f457ad1585d3d8b3e8a1\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport {PositionMode, LiquidityMode, DisplayMode} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IChromaticMarketFactory} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\n\\n/**\\n * @title IMarketState\\n * @dev Interface for accessing the state of a market contract.\\n */\\ninterface IMarketState {\\n    /**\\n     * @notice Emitted when the protocol fee rate of the market is changed\\n     * @param protocolFeeRateOld The previous value of the protocol fee rate\\n     * @param protocolFeeRateNew The updated value of the protocol fee rate\\n     */\\n    event ProtocolFeeRateUpdated(uint16 protocolFeeRateOld, uint16 protocolFeeRateNew);\\n\\n    /**\\n     * @notice Emitted when the position mode of the market is changed\\n     * @param positionModeOld The previous value of the position mode\\n     * @param positionModeNew The updated value of the position mode\\n     */\\n    event PositionModeUpdated(PositionMode positionModeOld, PositionMode positionModeNew);\\n\\n    /**\\n     * @notice Emitted when the liquidity mode of the market is changed\\n     * @param liquidityModeOld The previous value of the liquidity mode\\n     * @param liquidityModeNew The updated value of the liquidity mode\\n     */\\n    event LiquidityModeUpdated(LiquidityMode liquidityModeOld, LiquidityMode liquidityModeNew);\\n\\n    /**\\n     * @notice Emitted when the display mode of the market is changed\\n     * @param displayModeOld The previous value of the display mode\\n     * @param displayModeNew The updated value of the display mode\\n     */\\n    event DisplayModeUpdated(DisplayMode displayModeOld, DisplayMode displayModeNew);\\n\\n    /**\\n     * @dev Returns the factory contract for the market.\\n     * @return The factory contract.\\n     */\\n    function factory() external view returns (IChromaticMarketFactory);\\n\\n    /**\\n     * @dev Returns the settlement token of the market.\\n     * @return The settlement token.\\n     */\\n    function settlementToken() external view returns (IERC20Metadata);\\n\\n    /**\\n     * @dev Returns the oracle provider contract for the market.\\n     * @return The oracle provider contract.\\n     */\\n    function oracleProvider() external view returns (IOracleProvider);\\n\\n    /**\\n     * @dev Returns the CLB token contract for the market.\\n     * @return The CLB token contract.\\n     */\\n    function clbToken() external view returns (ICLBToken);\\n\\n    /**\\n     * @dev Returns the vault contract for the market.\\n     * @return The vault contract.\\n     */\\n    function vault() external view returns (IChromaticVault);\\n\\n    /**\\n     * @notice Returns the protocol fee rate\\n     * @return The protocol fee rate for the market\\n     */\\n    function protocolFeeRate() external view returns (uint16);\\n\\n    /**\\n     * @notice Update the new protocol fee rate\\n     * @param _protocolFeeRate new protocol fee rate for the market\\n     */\\n    function updateProtocolFeeRate(uint16 _protocolFeeRate) external;\\n\\n    /**\\n     * @notice Returns the position mode\\n     * @return The position mode for the market\\n     */\\n    function positionMode() external view returns (PositionMode);\\n\\n    /**\\n     * @notice Update the new position mode\\n     * @param _positionMode new position mode for the market\\n     */\\n    function updatePositionMode(PositionMode _positionMode) external;\\n\\n    /**\\n     * @notice Returns the liquidity mode\\n     * @return The liquidity mode for the market\\n     */\\n    function liquidityMode() external view returns (LiquidityMode);\\n\\n    /**\\n     * @notice Update the new liquidity mode\\n     * @param _liquidityMode new liquidity mode for the market\\n     */\\n    function updateLiquidityMode(LiquidityMode _liquidityMode) external;\\n\\n    /**\\n     * @notice Returns the display mode\\n     * @return The display mode for the market\\n     */\\n    function displayMode() external view returns (DisplayMode);\\n\\n    /**\\n     * @notice Update the new display mode\\n     * @param _displayMode new display mode for the market\\n     */\\n    function updateDisplayMode(DisplayMode _displayMode) external;\\n}\\n\",\"keccak256\":\"0xb83d49f8defed9e8c0425923d366cbd842b2e213ae589bcd83640007658c1c25\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketTrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\nimport {OpenPositionInfo, ClosePositionInfo} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\n\\n/**\\n * @title IMarketTrade\\n * @dev Interface for trading positions in a market.\\n */\\ninterface IMarketTrade {\\n    /**\\n     * @dev Emitted when a position is opened.\\n     * @param account The address of the account opening the position.\\n     * @param position The opened position.\\n     */\\n    event OpenPosition(address indexed account, Position position);\\n\\n    /**\\n     * @dev Emitted when a position is closed.\\n     * @param account The address of the account closing the position.\\n     * @param position The closed position.\\n     */\\n    event ClosePosition(address indexed account, Position position);\\n\\n    /**\\n     * @dev Emitted when a position is claimed.\\n     * @param account The address of the account claiming the position.\\n     * @param pnl The profit or loss of the claimed position.\\n     * @param interest The interest paid for the claimed position.\\n     * @param position The claimed position.\\n     */\\n    event ClaimPosition(\\n        address indexed account,\\n        int256 indexed pnl,\\n        uint256 indexed interest,\\n        Position position\\n    );\\n\\n    /**\\n     * @dev Emitted when protocol fees are transferred.\\n     * @param positionId The ID of the position for which the fees are transferred.\\n     * @param amount The amount of fees transferred.\\n     */\\n    event TransferProtocolFee(uint256 indexed positionId, uint256 indexed amount);\\n\\n    /**\\n     * @dev Opens a new position in the market.\\n     * @param qty The quantity of the position.\\n     * @param takerMargin The margin amount provided by the taker.\\n     * @param makerMargin The margin amount provided by the maker.\\n     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.\\n     * @param data Additional data for the position callback.\\n     * @return The opened position.\\n     */\\n    function openPosition(\\n        int256 qty,\\n        uint256 takerMargin,\\n        uint256 makerMargin,\\n        uint256 maxAllowableTradingFee,\\n        bytes calldata data\\n    ) external returns (OpenPositionInfo memory);\\n\\n    /**\\n     * @dev Closes a position in the market.\\n     * @param positionId The ID of the position to close.\\n     * @return The closed position.\\n     */\\n    function closePosition(uint256 positionId) external returns (ClosePositionInfo memory);\\n\\n    /**\\n     * @dev Claims a closed position in the market.\\n     * @param positionId The ID of the position to claim.\\n     * @param recipient The address of the recipient of the claimed position.\\n     * @param data Additional data for the claim callback.\\n     */\\n    function claimPosition(\\n        uint256 positionId,\\n        address recipient, // EOA or account contract\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5c31415599533f50d3a2cd56674be48be1eae0c52d8699f2fa969d0a395d2039\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nbytes4 constant CLAIM_USER = \\\"UC\\\";\\nbytes4 constant CLAIM_KEEPER = \\\"KC\\\";\\nbytes4 constant CLAIM_TP = \\\"TP\\\";\\nbytes4 constant CLAIM_SL = \\\"SL\\\";\\n\\nenum PositionMode {\\n    Normal,\\n    OpenDisabled,\\n    CloseDisabled,\\n    Suspended\\n}\\n\\nenum LiquidityMode {\\n    Normal,\\n    AddDisabled,\\n    RemoveDisabled,\\n    Suspended\\n}\\n\\nenum DisplayMode {\\n    Normal,\\n    Suspended,\\n    Deprecating,\\n    Deprecated\\n}\\n\\n/**\\n * @dev The OpenPositionInfo struct represents a opened trading position.\\n * @param id The position identifier\\n * @param openVersion The version of the oracle when the position was opened\\n * @param qty The quantity of the position\\n * @param openTimestamp The timestamp when the position was opened\\n * @param takerMargin The amount of collateral that a trader must provide\\n * @param makerMargin The margin amount provided by the maker.\\n * @param tradingFee The trading fee associated with the position.\\n */\\nstruct OpenPositionInfo {\\n    uint256 id;\\n    uint256 openVersion;\\n    int256 qty;\\n    uint256 openTimestamp;\\n    uint256 takerMargin;\\n    uint256 makerMargin;\\n    uint256 tradingFee;\\n}\\n\\n/**\\n * @dev The ClosePositionInfo struct represents a closed trading position.\\n * @param id The position identifier\\n * @param closeVersion The version of the oracle when the position was closed\\n * @param closeTimestamp The timestamp when the position was closed\\n */\\nstruct ClosePositionInfo {\\n    uint256 id;\\n    uint256 closeVersion;\\n    uint256 closeTimestamp;\\n}\\n\\n/**\\n * @dev The ClaimPositionInfo struct represents a claimed position information.\\n * @param id The position identifier\\n * @param entryPrice The entry price of the position\\n * @param exitPrice The exit price of the position\\n * @param realizedPnl The profit or loss of the claimed position.\\n * @param interest The interest paid for the claimed position.\\n * @param cause The description of being claimed.\\n */\\nstruct ClaimPositionInfo {\\n    uint256 id;\\n    uint256 entryPrice;\\n    uint256 exitPrice;\\n    int256 realizedPnl;\\n    uint256 interest;\\n    bytes4 cause;\\n}\\n\\n/**\\n * @dev Represents a pending position within the LiquidityBin\\n * @param openVersion The oracle version when the position was opened.\\n * @param totalQty The total quantity of the pending position.\\n * @param totalMakerMargin The total maker margin of the pending position.\\n * @param totalTakerMargin The total taker margin of the pending position.\\n */\\nstruct PendingPosition {\\n    uint256 openVersion;\\n    int256 totalQty;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n}\\n\\n/**\\n * @dev Represents the closing position within an LiquidityBin.\\n * @param closeVersion The oracle version when the position was closed.\\n * @param totalQty The total quantity of the closing position.\\n * @param totalEntryAmount The total entry amount of the closing position.\\n * @param totalMakerMargin The total maker margin of the closing position.\\n * @param totalTakerMargin The total taker margin of the closing position.\\n */\\nstruct ClosingPosition {\\n    uint256 closeVersion;\\n    int256 totalQty;\\n    uint256 totalEntryAmount;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n}\\n\\n/**\\n * @dev A struct representing pending liquidity information.\\n * @param oracleVersion The oracle version of pending liqudity.\\n * @param mintingTokenAmountRequested The amount of settlement tokens requested for minting.\\n * @param burningCLBTokenAmountRequested The amount of CLB tokens requested for burning.\\n */\\nstruct PendingLiquidity {\\n    uint256 oracleVersion;\\n    uint256 mintingTokenAmountRequested;\\n    uint256 burningCLBTokenAmountRequested;\\n}\\n\\n/**\\n * @dev A struct representing claimable liquidity information.\\n * @param mintingTokenAmountRequested The amount of settlement tokens requested for minting.\\n * @param mintingCLBTokenAmount The actual amount of CLB tokens minted.\\n * @param burningCLBTokenAmountRequested The amount of CLB tokens requested for burning.\\n * @param burningCLBTokenAmount The actual amount of CLB tokens burned.\\n * @param burningTokenAmount The amount of settlement tokens equal in value to the burned CLB tokens.\\n */\\nstruct ClaimableLiquidity {\\n    uint256 mintingTokenAmountRequested;\\n    uint256 mintingCLBTokenAmount;\\n    uint256 burningCLBTokenAmountRequested;\\n    uint256 burningCLBTokenAmount;\\n    uint256 burningTokenAmount;\\n}\\n\\n/**\\n * @dev A struct representing status of the liquidity bin.\\n * @param liquidity The total liquidity amount in the bin\\n * @param freeLiquidity The amount of free liquidity available in the bin.\\n * @param binValue The current value of the bin.\\n * @param tradingFeeRate The trading fee rate for the liquidity.\\n */\\nstruct LiquidityBinStatus {\\n    uint256 liquidity;\\n    uint256 freeLiquidity;\\n    uint256 binValue;\\n    int16 tradingFeeRate;\\n}\\n\",\"keccak256\":\"0xf368c76559a0bd007bb497f74a6ff20fa7c46423dd4913729039ae191f9304e7\",\"license\":\"MIT\"},\"contracts/core/interfaces/vault/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title ILendingPool\\n * @dev Interface for a lending pool contract.\\n */\\ninterface ILendingPool {\\n    /**\\n     * @notice Emitted when a flash loan is executed.\\n     * @param sender The address initiating the flash loan.\\n     * @param recipient The address receiving the flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @param paid The amount paid back after the flash loan.\\n     * @param paidToTakerPool The amount paid to the taker pool after the flash loan.\\n     * @param paidToMakerPool The amount paid to the maker pool after the flash loan.\\n     */\\n    event FlashLoan(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed amount,\\n        uint256 paid,\\n        uint256 paidToTakerPool,\\n        uint256 paidToMakerPool\\n    );\\n\\n    /**\\n     * @notice Executes a flash loan.\\n     * @param token The address of the token for the flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @param recipient The address to receive the flash loan.\\n     * @param data Additional data for the flash loan.\\n     */\\n    function flashLoan(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.\\n     * @param market The address of the market.\\n     * @param settlementToken The settlement token address.\\n     * @param binBalance The balance of funds in the bin.\\n     * @return The pending share of earnings for the specified bin.\\n     */\\n    function getPendingBinShare(\\n        address market,\\n        address settlementToken,\\n        uint256 binBalance\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ff7f0f07254c591dda3c052cc6d02b89e4bcd4e9efe79f3f483ad067cfb9906\",\"license\":\"MIT\"},\"contracts/core/interfaces/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IVault\\n * @dev Interface for the Vault contract, responsible for managing positions and liquidity.\\n */\\ninterface IVault {\\n    /**\\n     * @notice Emitted when a position is opened.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the opened position.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param protocolFee The protocol fee associated with the position.\\n     */\\n    event OnOpenPosition(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        uint256 indexed takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    );\\n\\n    /**\\n     * @notice Emitted when a position is claimed.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the claimed position.\\n     * @param recipient The address of the recipient of the settlement amount.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param settlementAmount The settlement amount received by the recipient.\\n     */\\n    event OnClaimPosition(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        address indexed recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when liquidity is added to the vault.\\n     * @param market The address of the market.\\n     * @param amount The amount of liquidity added.\\n     */\\n    event OnAddLiquidity(address indexed market, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when pending liquidity is settled.\\n     * @param market The address of the market.\\n     * @param pendingDeposit The amount of pending deposit being settled.\\n     * @param pendingWithdrawal The amount of pending withdrawal being settled.\\n     */\\n    event OnSettlePendingLiquidity(\\n        address indexed market,\\n        uint256 indexed pendingDeposit,\\n        uint256 indexed pendingWithdrawal\\n    );\\n\\n    /**\\n     * @notice Emitted when liquidity is withdrawn from the vault.\\n     * @param market The address of the market.\\n     * @param amount The amount of liquidity withdrawn.\\n     * @param recipient The address of the recipient of the withdrawn liquidity.\\n     */\\n    event OnWithdrawLiquidity(\\n        address indexed market,\\n        uint256 indexed amount,\\n        address indexed recipient\\n    );\\n\\n    /**\\n     * @notice Emitted when the keeper fee is transferred.\\n     * @param fee The amount of the transferred keeper fee as native token.\\n     * @param amount The amount of settlement token to be used for paying keeper fee.\\n     */\\n    event TransferKeeperFee(uint256 indexed fee, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when the keeper fee is transferred for a specific market.\\n     * @param market The address of the market.\\n     * @param fee The amount of the transferred keeper fee as native token.\\n     * @param amount The amount of settlement token to be used for paying keeper fee.\\n     */\\n    event TransferKeeperFee(address indexed market, uint256 indexed fee, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when the protocol fee is transferred for a specific position.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the position.\\n     * @param amount The amount of the transferred fee.\\n     */\\n    event TransferProtocolFee(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @notice Called when a position is opened by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param positionId The ID of the opened position.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param protocolFee The protocol fee associated with the position.\\n     */\\n    function onOpenPosition(\\n        address settlementToken,\\n        uint256 positionId,\\n        uint256 takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    ) external;\\n\\n    /**\\n     * @notice Called when a position is claimed by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param positionId The ID of the claimed position.\\n     * @param recipient The address that will receive the settlement amount.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param settlementAmount The amount to be settled for the position.\\n     */\\n    function onClaimPosition(\\n        address settlementToken,\\n        uint256 positionId,\\n        address recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    ) external;\\n\\n    /**\\n     * @notice Called when liquidity is added to the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param amount The amount of liquidity being added.\\n     */\\n    function onAddLiquidity(address settlementToken, uint256 amount) external;\\n\\n    /**\\n     * @notice Called when pending liquidity is settled in the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param pendingDeposit The amount of pending deposits being settled.\\n     * @param pendingWithdrawal The amount of pending withdrawals being settled.\\n     */\\n    function onSettlePendingLiquidity(\\n        address settlementToken,\\n        uint256 pendingDeposit,\\n        uint256 pendingWithdrawal\\n    ) external;\\n\\n    /**\\n     * @notice Called when liquidity is withdrawn from the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param recipient The address that will receive the withdrawn liquidity.\\n     * @param amount The amount of liquidity to be withdrawn.\\n     */\\n    function onWithdrawLiquidity(\\n        address settlementToken,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Transfers the keeper fee from the market to the specified keeper.\\n     * @param settlementToken The settlement token address.\\n     * @param keeper The address of the keeper to receive the fee.\\n     * @param fee The amount of the fee to transfer as native token.\\n     * @param margin The margin amount used for the fee payment.\\n     * @return usedFee The actual settlement token amount of fee used for the transfer.\\n     */\\n    function transferKeeperFee(\\n        address settlementToken,\\n        address keeper,\\n        uint256 fee,\\n        uint256 margin\\n    ) external returns (uint256 usedFee);\\n}\\n\",\"keccak256\":\"0x3a3d8c5034d3a473347b2fe53a7973deeab827a88f6e83fc0ab2b0a85e45e429\",\"license\":\"MIT\"},\"contracts/core/libraries/BinMargin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev The BinMargin struct represents the margin information for an LP bin.\\n * @param tradingFeeRate The trading fee rate associated with the LP bin\\n * @param amount The maker margin amount specified for the LP bin\\n */\\nstruct BinMargin {\\n    uint16 tradingFeeRate;\\n    uint256 amount;\\n}\\n\\nusing BinMarginLib for BinMargin global;\\n\\n/**\\n * @title BinMarginLib\\n * @dev The BinMarginLib library provides functions to operate on BinMargin structs.\\n */\\nlibrary BinMarginLib {\\n    using Math for uint256;\\n\\n    uint256 constant TRADING_FEE_RATE_PRECISION = 10000;\\n\\n    /**\\n     * @notice Calculates the trading fee based on the margin amount and the trading fee rate.\\n     * @param self The BinMargin struct\\n     * @param _protocolFeeRate The protocol fee rate for the market\\n     * @return The trading fee amount\\n     */\\n    function tradingFee(\\n        BinMargin memory self,\\n        uint16 _protocolFeeRate\\n    ) internal pure returns (uint256) {\\n        uint256 _tradingFee = self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION);\\n        return _tradingFee - _protocolFee(_tradingFee, _protocolFeeRate);\\n    }\\n\\n    /**\\n     * @notice Calculates the protocol fee based on the margin amount and the trading fee rate.\\n     * @param self The BinMargin struct\\n     * @param _protocolFeeRate The protocol fee rate for the market\\n     * @return The protocol fee amount\\n     */\\n    function protocolFee(\\n        BinMargin memory self,\\n        uint16 _protocolFeeRate\\n    ) internal pure returns (uint256) {\\n        return\\n            _protocolFee(\\n                self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION),\\n                _protocolFeeRate\\n            );\\n    }\\n\\n    function _protocolFee(\\n        uint256 _tradingFee,\\n        uint16 _protocolFeeRate\\n    ) private pure returns (uint256) {\\n        return _tradingFee.mulDiv(_protocolFeeRate, TRADING_FEE_RATE_PRECISION);\\n    }\\n}\\n\",\"keccak256\":\"0xf9d27ff84b41e790fb04e412e4e8c583d3903e34774a24839f372392ab33db01\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/CLBTokenLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {FEE_RATES_LENGTH} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\n\\n/**\\n * @title CLBTokenLib\\n * @notice Provides utility functions for working with CLB tokens.\\n */\\nlibrary CLBTokenLib {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n\\n    uint256 private constant DIRECTION_PRECISION = 10 ** 10;\\n    uint16 private constant MIN_FEE_RATE = 1;\\n\\n    /**\\n     * @notice Encode the CLB token ID of ERC1155 token type\\n     * @dev If `tradingFeeRate` is negative, it adds `DIRECTION_PRECISION` to the absolute fee rate.\\n     *      Otherwise it returns the fee rate directly.\\n     * @return id The ID of ERC1155 token\\n     */\\n    function encodeId(int16 tradingFeeRate) internal pure returns (uint256) {\\n        bool long = tradingFeeRate > 0;\\n        return _encodeId(uint16(long ? tradingFeeRate : -tradingFeeRate), long);\\n    }\\n\\n    /**\\n     * @notice Decode the trading fee rate from the CLB token ID of ERC1155 token type\\n     * @dev If `id` is greater than or equal to `DIRECTION_PRECISION`,\\n     *      then it substracts `DIRECTION_PRECISION` from `id`\\n     *      and returns the negation of the substracted value.\\n     *      Otherwise it returns `id` directly.\\n     * @return tradingFeeRate The trading fee rate\\n     */\\n    function decodeId(uint256 id) internal pure returns (int16 tradingFeeRate) {\\n        if (id >= DIRECTION_PRECISION) {\\n            tradingFeeRate = -int16((id - DIRECTION_PRECISION).toUint16());\\n        } else {\\n            tradingFeeRate = int16(id.toUint16());\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the array of supported trading fee rates.\\n     * @dev This function returns the array of supported trading fee rates,\\n     *      ranging from the minimum fee rate to the maximum fee rate with step increments.\\n     * @return tradingFeeRates The array of supported trading fee rates.\\n     */\\n    function tradingFeeRates() internal pure returns (uint16[FEE_RATES_LENGTH] memory) {\\n        // prettier-ignore\\n        return [\\n            MIN_FEE_RATE, 2, 3, 4, 5, 6, 7, 8, 9, // 0.01% ~ 0.09%, step 0.01%\\n            10, 20, 30, 40, 50, 60, 70, 80, 90, // 0.1% ~ 0.9%, step 0.1%\\n            100, 200, 300, 400, 500, 600, 700, 800, 900, // 1% ~ 9%, step 1%\\n            1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000 // 10% ~ 50%, step 5%\\n        ];\\n    }\\n\\n    function tokenIds() internal pure returns (uint256[] memory) {\\n        uint16[FEE_RATES_LENGTH] memory feeRates = tradingFeeRates();\\n\\n        uint256[] memory ids = new uint256[](FEE_RATES_LENGTH * 2);\\n        for (uint256 i; i < FEE_RATES_LENGTH; ) {\\n            ids[i] = _encodeId(feeRates[i], true);\\n            ids[i + FEE_RATES_LENGTH] = _encodeId(feeRates[i], false);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return ids;\\n    }\\n\\n    function _encodeId(uint16 tradingFeeRate, bool long) private pure returns (uint256 id) {\\n        id = long ? tradingFeeRate : tradingFeeRate + DIRECTION_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x33b08f650ee509ef4ddcd852ed7387fc2084c1299fa68045cc5435e15ee82d1f\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nuint256 constant BPS = 10000;\\nuint256 constant FEE_RATES_LENGTH = 36;\\nuint256 constant PRICE_PRECISION = 1e18;\",\"keccak256\":\"0xd14bb41459e61008626b00dd6f5eebd6669d20a280e3d1ffcb043dd401922c7c\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Errors\\n * @dev This library provides a set of error codes as string constants for handling exceptions and revert messages in the library.\\n */\\nlibrary Errors {\\n    /**\\n     * @dev Error code indicating that there is not enough free liquidity available in liquidity pool when open a new poisition.\\n     */\\n    string constant NOT_ENOUGH_FREE_LIQUIDITY = \\\"NEFL\\\";\\n\\n    /**\\n     * @dev Error code indicating that the specified amount is too small when add liquidity to each bin.\\n     */\\n    string constant TOO_SMALL_AMOUNT = \\\"TSA\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided oracle version is invalid or unsupported.\\n     */\\n    string constant INVALID_ORACLE_VERSION = \\\"IOV\\\";\\n\\n    /**\\n     * @dev Error code indicating that the specified value exceeds the allowed margin range when claim a position.\\n     */\\n    string constant EXCEED_MARGIN_RANGE = \\\"IOV\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided trading fee rate is not supported.\\n     */\\n    string constant UNSUPPORTED_TRADING_FEE_RATE = \\\"UTFR\\\";\\n\\n    /**\\n     * @dev Error code indicating that the oracle provider is already registered.\\n     */\\n    string constant ALREADY_REGISTERED_ORACLE_PROVIDER = \\\"ARO\\\";\\n\\n    /**\\n     * @dev Error code indicating that the settlement token is already registered.\\n     */\\n    string constant ALREADY_REGISTERED_TOKEN = \\\"ART\\\";\\n\\n    /**\\n     * @dev Error code indicating that the settlement token is not registered.\\n     */\\n    string constant UNREGISTERED_TOKEN = \\\"URT\\\";\\n\\n    /**\\n     * @dev Error code indicating that the interest rate has not been initialized.\\n     */\\n    string constant INTEREST_RATE_NOT_INITIALIZED = \\\"IRNI\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided interest rate exceeds the maximum allowed rate.\\n     */\\n    string constant INTEREST_RATE_OVERFLOW = \\\"IROF\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided timestamp for an interest rate is in the past.\\n     */\\n    string constant INTEREST_RATE_PAST_TIMESTAMP = \\\"IRPT\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided interest rate record cannot be appended to the existing array.\\n     */\\n    string constant INTEREST_RATE_NOT_APPENDABLE = \\\"IRNA\\\";\\n\\n    /**\\n     * @dev Error code indicating that an interest rate has already been applied and cannot be modified further.\\n     */\\n    string constant INTEREST_RATE_ALREADY_APPLIED = \\\"IRAA\\\";\\n\\n    /**\\n     * @dev Error code indicating that the position is unsettled.\\n     */\\n    string constant UNSETTLED_POSITION = \\\"USP\\\";\\n\\n    /**\\n     * @dev Error code indicating that the position quantity is invalid.\\n     */\\n    string constant INVALID_POSITION_QTY = \\\"IPQ\\\";\\n\\n    /**\\n     * @dev Error code indicating that the oracle price is not positive.\\n     */\\n    string constant NOT_POSITIVE_PRICE = \\\"NPP\\\";\\n}\\n\",\"keccak256\":\"0x2243516d87f4b064250fa810fef1caaf62544e651556c3d5326ea2f7406d1787\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/InterestRate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {BPS} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title InterestRate\\n * @notice Provides functions for managing interest rates.\\n * @dev The library allows for the initialization, appending, and removal of interest rate records,\\n *      as well as calculating interest based on these records.\\n */\\nlibrary InterestRate {\\n    using Math for uint256;\\n\\n    /**\\n     * @dev Record type\\n     * @param annualRateBPS Annual interest rate in BPS\\n     * @param beginTimestamp Timestamp when the interest rate becomes effective\\n     */\\n    struct Record {\\n        uint256 annualRateBPS;\\n        uint256 beginTimestamp;\\n    }\\n\\n    uint256 private constant MAX_RATE_BPS = BPS; // max interest rate is 100%\\n    uint256 private constant YEAR = 365 * 24 * 3600;\\n\\n    /**\\n     * @dev Ensure that the interest rate records have been initialized before certain functions can be called.\\n     *      It checks whether the length of the Record array is greater than 0.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty (it indicates that the interest rate has not been initialized).\\n     */\\n    modifier initialized(Record[] storage self) {\\n        require(self.length != 0, Errors.INTEREST_RATE_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the interest rate records.\\n     * @param self The stored record array\\n     * @param initialInterestRate The initial interest rate\\n     */\\n    function initialize(Record[] storage self, uint256 initialInterestRate) internal {\\n        self.push(Record({annualRateBPS: initialInterestRate, beginTimestamp: 0}));\\n    }\\n\\n    /**\\n     * @notice Add a new interest rate record to the array.\\n     * @dev Annual rate is not greater than the maximum rate and that the begin timestamp is in the future,\\n     *      and the new record's begin timestamp is greater than the previous record's timestamp.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_OVERFLOW` if the rate exceed the maximum allowed rate (100%).\\n     *      Throws an error with the code `Errors.INTEREST_RATE_PAST_TIMESTAMP` if the timestamp is in the past, ensuring that the interest rate period has not already started.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_APPENDABLE` if the timestamp is greater than the last recorded timestamp, ensuring that the new record is appended in chronological order.\\n     * @param self The stored record array\\n     * @param annualRateBPS The annual interest rate in BPS\\n     * @param beginTimestamp Begin timestamp of this record\\n     */\\n    function appendRecord(\\n        Record[] storage self,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) internal initialized(self) {\\n        require(annualRateBPS <= MAX_RATE_BPS, Errors.INTEREST_RATE_OVERFLOW);\\n        //slither-disable-next-line timestamp\\n        require(beginTimestamp > block.timestamp, Errors.INTEREST_RATE_PAST_TIMESTAMP);\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        require(beginTimestamp > lastRecord.beginTimestamp, Errors.INTEREST_RATE_NOT_APPENDABLE);\\n\\n        self.push(Record({annualRateBPS: annualRateBPS, beginTimestamp: beginTimestamp}));\\n    }\\n\\n    /**\\n     * @notice Remove the last interest rate record from the array.\\n     * @dev The current time must be less than the begin timestamp of the last record.\\n     *      If the array has only one record, it returns false along with an empty record.\\n     *      Otherwise, it removes the last record from the array and returns true along with the removed record.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_ALREADY_APPLIED` if the `beginTimestamp` of the last record is not in the future.\\n     * @param self The stored record array\\n     * @return removed Whether the last record is removed\\n     * @return record The removed record\\n     */\\n    function removeLastRecord(\\n        Record[] storage self\\n    ) internal initialized(self) returns (bool removed, Record memory record) {\\n        if (self.length <= 1) {\\n            // empty\\n            return (false, Record(0, 0));\\n        }\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        //slither-disable-next-line timestamp\\n        require(block.timestamp < lastRecord.beginTimestamp, Errors.INTEREST_RATE_ALREADY_APPLIED);\\n\\n        self.pop();\\n\\n        return (true, lastRecord);\\n    }\\n\\n    /**\\n     * @notice Find the interest rate record that applies to a given timestamp.\\n     * @dev It iterates through the array from the end to the beginning\\n     *      and returns the first record with a begin timestamp less than or equal to the provided timestamp.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     * @param self The stored record array\\n     * @param timestamp Given timestamp\\n     * @return interestRate The record which is found\\n     * @return index The index of record\\n     */\\n    function findRecordAt(\\n        Record[] storage self,\\n        uint256 timestamp\\n    ) internal view initialized(self) returns (Record memory interestRate, uint256 index) {\\n        for (uint256 i = self.length; i != 0; ) {\\n            unchecked {\\n                index = i - 1;\\n            }\\n            interestRate = self[index];\\n\\n            if (interestRate.beginTimestamp <= timestamp) {\\n                return (interestRate, index);\\n            }\\n\\n            unchecked {\\n                i--;\\n            }\\n        }\\n\\n        return (self[0], 0); // empty result (this line is not reachable)\\n    }\\n\\n    /**\\n     * @notice Calculate the interest\\n     * @dev Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     * @param self The stored record array\\n     * @param amount Token amount\\n     * @param from Begin timestamp (inclusive)\\n     * @param to End timestamp (exclusive)\\n     */\\n    function calculateInterest(\\n        Record[] storage self,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) internal view initialized(self) returns (uint256) {\\n        if (from >= to) {\\n            return 0;\\n        }\\n\\n        uint256 interest = 0;\\n\\n        uint256 endTimestamp = type(uint256).max;\\n        for (uint256 idx = self.length; idx != 0; ) {\\n            Record memory record = self[idx - 1];\\n            if (endTimestamp <= from) {\\n                break;\\n            }\\n\\n            interest += _interest(\\n                amount,\\n                record.annualRateBPS,\\n                Math.min(to, endTimestamp) - Math.max(from, record.beginTimestamp)\\n            );\\n            endTimestamp = record.beginTimestamp;\\n\\n            unchecked {\\n                idx--;\\n            }\\n        }\\n        return interest;\\n    }\\n\\n    function _interest(\\n        uint256 amount,\\n        uint256 rateBPS, // annual rate\\n        uint256 period // in seconds\\n    ) private pure returns (uint256) {\\n        return amount.mulDiv(rateBPS * period, BPS * YEAR, Math.Rounding.Up);\\n    }\\n}\\n\",\"keccak256\":\"0x1ba597a94b3e70bc851d88e7340609e46e3f56cc971f5969a62c2a1264adab0a\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/LpContext.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\n\\n/**\\n * @dev Represents the context information required for LP bin operations.\\n * @param oracleProvider The Oracle Provider contract used for price feed\\n * @param interestCalculator The Interest Calculator contract used for interest calculations\\n * @param vault The Chromatic Vault contract responsible for managing liquidity and margin\\n * @param clbToken The CLB token contract that represents LP ownership in the pool\\n * @param market The address of market contract\\n * @param settlementToken The address of the settlement token used in the market\\n * @param tokenPrecision The precision of the settlement token used in the market\\n * @param _currentVersionCache Cached instance of the current oracle version\\n */\\nstruct LpContext {\\n    IOracleProvider oracleProvider;\\n    IInterestCalculator interestCalculator;\\n    IChromaticVault vault;\\n    ICLBToken clbToken;\\n    address market;\\n    address settlementToken;\\n    uint256 tokenPrecision;\\n    IOracleProvider.OracleVersion _currentVersionCache;\\n}\\n\\nusing LpContextLib for LpContext global;\\n\\n/**\\n * @title LpContextLib\\n * @notice Provides functions that operate on the `LpContext` struct\\n */\\nlibrary LpContextLib {\\n    /**\\n     * @notice Syncs the oracle version used by the market.\\n     * @param self The memory instance of `LpContext` struct\\n     */\\n    function syncOracleVersion(LpContext memory self) internal {\\n        self._currentVersionCache = self.oracleProvider.sync();\\n    }\\n\\n    /**\\n     * @notice Retrieves the current oracle version used by the market\\n     * @dev If the `_currentVersionCache` has been initialized, then returns it.\\n     *      If not, it calls the `currentVersion` function on the `oracleProvider of the market\\n     *      to fetch the current version and stores it in the cache,\\n     *      and then returns the current version.\\n     * @param self The memory instance of `LpContext` struct\\n     * @return OracleVersion The current oracle version\\n     */\\n    function currentOracleVersion(\\n        LpContext memory self\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._currentVersionCache.version == 0) {\\n            //slither-disable-next-line calls-loop\\n            self._currentVersionCache = self.oracleProvider.currentVersion();\\n        }\\n\\n        return self._currentVersionCache;\\n    }\\n\\n    /**\\n     * @notice Retrieves the oracle version at a specific version number\\n     * @dev If the `_currentVersionCache` matches the requested version, then returns it.\\n     *      Otherwise, it calls the `atVersion` function on the `oracleProvider` of the market\\n     *      to fetch the desired version.\\n     * @param self The memory instance of `LpContext` struct\\n     * @param version The requested version number\\n     * @return OracleVersion The oracle version at the requested version number\\n     */\\n    function oracleVersionAt(\\n        LpContext memory self,\\n        uint256 version\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._currentVersionCache.version == version) {\\n            return self._currentVersionCache;\\n        }\\n        return self.oracleProvider.atVersion(version);\\n    }\\n\\n    /**\\n     * @notice Calculates the interest accrued for a given amount of settlement tokens\\n               within a specified time range.\\n     * @dev This function internally calls the `calculateInterest` function on the `interestCalculator` contract.\\n     * @param self The memory instance of the `LpContext` struct.\\n     * @param amount The amount of settlement tokens for which the interest needs to be calculated.\\n     * @param from The starting timestamp of the time range (inclusive).\\n     * @param to The ending timestamp of the time range (exclusive).\\n     * @return The accrued interest as a `uint256` value.\\n     */\\n    function calculateInterest(\\n        LpContext memory self,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal view returns (uint256) {\\n        //slither-disable-next-line calls-loop\\n        return\\n            amount == 0 || from >= to\\n                ? 0\\n                : self.interestCalculator.calculateInterest(self.settlementToken, amount, from, to);\\n    }\\n\\n    /**\\n     * @notice Checks if an oracle version is in the past.\\n     * @param self The memory instance of the `LpContext` struct.\\n     * @param oracleVersion The oracle version to check.\\n     * @return A boolean value indicating whether the oracle version is in the past.\\n     */\\n    function isPastVersion(\\n        LpContext memory self,\\n        uint256 oracleVersion\\n    ) internal view returns (bool) {\\n        return oracleVersion != 0 && oracleVersion < self.currentOracleVersion().version;\\n    }\\n}\\n\",\"keccak256\":\"0x56ff062a6341949cf9ca971571c279b23f843646855699550c6bd0ea85f6e5ec\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/LpReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\n\\n/**\\n * @dev The LpAction enum represents the types of LP actions that can be performed.\\n */\\nenum LpAction {\\n    ADD_LIQUIDITY,\\n    REMOVE_LIQUIDITY\\n}\\n\\n/**\\n * @dev The LpReceipt struct represents a receipt of an LP action performed.\\n * @param id An identifier for the receipt\\n * @param oracleVersion The oracle version associated with the action\\n * @param amount The amount involved in the action,\\n *        when the action is `ADD_LIQUIDITY`, this value represents the amount of settlement tokens\\n *        when the action is `REMOVE_LIQUIDITY`, this value represents the amount of CLB tokens\\n * @param recipient The address of the recipient of the action\\n * @param action An enumeration representing the type of LP action performed (ADD_LIQUIDITY or REMOVE_LIQUIDITY)\\n * @param tradingFeeRate The trading fee rate associated with the LP action\\n */\\nstruct LpReceipt {\\n    uint256 id;\\n    uint256 oracleVersion;\\n    uint256 amount;\\n    address recipient;\\n    LpAction action;\\n    int16 tradingFeeRate;\\n}\\n\\nusing LpReceiptLib for LpReceipt global;\\n\\n/**\\n * @title LpReceiptLib\\n * @notice Provides functions that operate on the `LpReceipt` struct\\n */\\nlibrary LpReceiptLib {\\n    /**\\n     * @notice Computes the ID of the CLBToken contract based on the trading fee rate.\\n     * @param self The LpReceipt struct.\\n     * @return The ID of the CLBToken contract.\\n     */\\n    function clbTokenId(LpReceipt memory self) internal pure returns (uint256) {\\n        return CLBTokenLib.encodeId(self.tradingFeeRate);\\n    }\\n}\\n\",\"keccak256\":\"0x5c4f467639892f5005338012d3f961edb6d46f15003a0ce12c89a9c40286426b\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {BinMargin} from \\\"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\\\";\\n\\n/**\\n * @dev The Position struct represents a trading position.\\n * @param id The position identifier\\n * @param openVersion The version of the oracle when the position was opened\\n * @param closeVersion The version of the oracle when the position was closed\\n * @param qty The quantity of the position\\n * @param openTimestamp The timestamp when the position was opened\\n * @param closeTimestamp The timestamp when the position was closed\\n * @param takerMargin The amount of collateral that a trader must provide\\n * @param owner The owner of the position, usually it is the account address of trader\\n * @param liquidator The liquidator contract address\\n * @param _binMargins The bin margins for the position, it represents the amount of collateral for each bin\\n * @param _protocolFeeRate The protocol fee rate for the market\\n */\\nstruct Position {\\n    uint256 id;\\n    uint256 openVersion;\\n    uint256 closeVersion;\\n    int256 qty;\\n    uint256 openTimestamp;\\n    uint256 closeTimestamp;\\n    uint256 takerMargin;\\n    address owner;\\n    address liquidator;\\n    uint16 _protocolFeeRate;\\n    BinMargin[] _binMargins;\\n}\\n\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Provides functions that operate on the `Position` struct\\n */\\nlibrary PositionLib {\\n    // using Math for uint256;\\n    // using SafeCast for uint256;\\n    // using SignedMath for int256;\\n\\n    /**\\n     * @notice Calculates the entry price of the position based on the position's open oracle version\\n     * @dev It fetches oracle price from `IOracleProvider`\\n     *      at the settle version calculated based on the position's open oracle version\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return uint256 The entry price\\n     */\\n    function entryPrice(\\n        Position memory self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.openVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the exit price of the position based on the position's close oracle version\\n     * @dev It fetches oracle price from `IOracleProvider`\\n     *      at the settle version calculated based on the position's close oracle version\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return uint256 The exit price\\n     */\\n    function exitPrice(Position memory self, LpContext memory ctx) internal view returns (uint256) {\\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.closeVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the profit or loss of the position based on the close oracle version and the qty\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return int256 The profit or loss\\n     */\\n    function pnl(Position memory self, LpContext memory ctx) internal view returns (int256) {\\n        return\\n            self.closeVersion > self.openVersion\\n                ? PositionUtil.pnl(self.qty, self.entryPrice(ctx), self.exitPrice(ctx))\\n                : int256(0);\\n    }\\n\\n    /**\\n     * @notice Calculates the total margin required for the makers of the position\\n     * @dev The maker margin is calculated by summing up the amounts of all bin margins\\n     *      in the `_binMargins` array\\n     * @param self The memory instance of the `Position` struct\\n     * @return margin The maker margin\\n     */\\n    function makerMargin(Position memory self) internal pure returns (uint256 margin) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            margin += self._binMargins[i].amount;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total trading fee for the position\\n     * @dev The trading fee is calculated by summing up the trading fees of all bin margins\\n     *      in the `_binMargins` array\\n     * @param self The memory instance of the `Position` struct\\n     * @return fee The trading fee\\n     */\\n    function tradingFee(Position memory self) internal pure returns (uint256 fee) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            fee += self._binMargins[i].tradingFee(self._protocolFeeRate);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total protocol fee for a position.\\n     * @param self The Position struct representing the position.\\n     * @return fee The total protocol fee amount.\\n     */\\n    function protocolFee(Position memory self) internal pure returns (uint256 fee) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            fee += self._binMargins[i].protocolFee(self._protocolFeeRate);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns an array of BinMargin instances\\n     *         representing the bin margins for the position\\n     * @param self The memory instance of the `Position` struct\\n     * @return margins The bin margins for the position\\n     */\\n    function binMargins(Position memory self) internal pure returns (BinMargin[] memory margins) {\\n        margins = self._binMargins;\\n    }\\n\\n    /**\\n     * @notice Sets the `_binMargins` array for the position\\n     * @param self The memory instance of the `Position` struct\\n     * @param margins The bin margins for the position\\n     */\\n    function setBinMargins(Position memory self, BinMargin[] memory margins) internal pure {\\n        self._binMargins = margins;\\n    }\\n}\\n\",\"keccak256\":\"0x4e1217907eadec2e99b138a0d8308df7650a0dfc404ab11cf9cb8d7210cb0708\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/PositionUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PRICE_PRECISION} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title PositionUtil\\n * @notice Provides utility functions for managing positions\\n */\\nlibrary PositionUtil {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n\\n    /**\\n     * @notice Returns next oracle version to settle\\n     * @dev It adds 1 to the `oracleVersion`\\n     *      and ensures that the `oracleVersion` is greater than 0 using a require statement.\\n     *      Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if the `oracleVersion` is not valid.\\n     * @param oracleVersion Input oracle version\\n     * @return uint256 Next oracle version to settle\\n     */\\n    function settleVersion(uint256 oracleVersion) internal pure returns (uint256) {\\n        require(oracleVersion != 0, Errors.INVALID_ORACLE_VERSION);\\n        return oracleVersion + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\\n     * @dev It calls another overloaded `settlePrice` function\\n     *      with an additional `OracleVersion` parameter,\\n     *      passing the `currentVersion` obtained from the `provider`\\n     * @param provider The oracle provider\\n     * @param oracleVersion The oracle version of position\\n     * @return uint256 The calculated price to settle\\n     */\\n    function settlePrice(\\n        IOracleProvider provider,\\n        uint256 oracleVersion\\n    ) internal view returns (uint256) {\\n        return settlePrice(provider, oracleVersion, provider.currentVersion());\\n    }\\n\\n    /**\\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\\n     * @dev It calculates the price by considering the `settleVersion`\\n     *      and the `currentVersion` obtained from the `IOracleProvider`.\\n     *      It ensures that the settle version is not greater than the current version;\\n     *      otherwise, it triggers an error with the message `Errors.UNSETTLED_POSITION`.\\n     *      It retrieves the corresponding `OracleVersion` using `atVersion` from the `IOracleProvider`,\\n     *      and then calls `oraclePrice` to obtain the price.\\n     * @param provider The oracle provider\\n     * @param oracleVersion The oracle version of position\\n     * @param currentVersion The current oracle version\\n     * @return uint256 The calculated entry price to settle\\n     */\\n    function settlePrice(\\n        IOracleProvider provider,\\n        uint256 oracleVersion,\\n        IOracleProvider.OracleVersion memory currentVersion\\n    ) internal view returns (uint256) {\\n        uint256 _settleVersion = settleVersion(oracleVersion);\\n        require(_settleVersion <= currentVersion.version, Errors.UNSETTLED_POSITION);\\n\\n        //slither-disable-next-line calls-loop\\n        IOracleProvider.OracleVersion memory _oracleVersion = _settleVersion ==\\n            currentVersion.version\\n            ? currentVersion\\n            : provider.atVersion(_settleVersion);\\n        return oraclePrice(_oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Extracts the price value from an `OracleVersion` struct\\n     * @dev If the price is not positive value, it triggers an error with the message `Errors.NOT_POSITIVE_PRICE`.\\n     * @param oracleVersion The memory instance of `OracleVersion` struct\\n     * @return uint256 The price value of `oracleVersion`\\n     */\\n    function oraclePrice(\\n        IOracleProvider.OracleVersion memory oracleVersion\\n    ) internal pure returns (uint256) {\\n        require(oracleVersion.price > 0, Errors.NOT_POSITIVE_PRICE);\\n        return oracleVersion.price.abs();\\n    }\\n\\n    /**\\n     * @notice Calculates the profit or loss (PnL) for a position based on the quantity, entry price, and exit price\\n     * @dev It first calculates the price difference (`delta`) between the exit price and the entry price.\\n     *      If the quantity is negative, indicating short position, it adjusts the `delta` to reflect a negative change.\\n     *      The function then calculates the absolute PnL by multiplying the absolute value of the quantity\\n     *          with the absolute value of the `delta`, divided by the entry price.\\n     *      Finally, if `delta` is negative, indicating a loss, the absolute PnL is negated to represent a negative value.\\n     * @param qty The quantity of the position\\n     * @param _entryPrice The entry price of the position\\n     * @param _exitPrice The exit price of the position\\n     * @return int256 The profit or loss\\n     */\\n    function pnl(\\n        int256 qty, // as token precision\\n        uint256 _entryPrice,\\n        uint256 _exitPrice\\n    ) internal pure returns (int256) {\\n        if (qty == 0 || _entryPrice == _exitPrice) return 0;\\n\\n        int256 delta = _exitPrice > _entryPrice\\n            ? (_exitPrice - _entryPrice).toInt256()\\n            : -(_entryPrice - _exitPrice).toInt256();\\n        if (qty < 0) delta *= -1;\\n\\n        int256 absPnl = qty.abs().mulDiv(delta.abs(), _entryPrice).toInt256();\\n\\n        return delta < 0 ? -absPnl : absPnl;\\n    }\\n\\n    /**\\n     * @notice Verifies the validity of a position quantity added to the bin\\n     * @dev It ensures that the sign of the current quantity of the bin's position\\n     *      and the added quantity are same or zero.\\n     *      If the condition is not met, it triggers an error with the message `Errors.INVALID_POSITION_QTY`.\\n     * @param currentQty The current quantity of the bin's pending position\\n     * @param addedQty The position quantity added\\n     */\\n    function checkAddPositionQty(int256 currentQty, int256 addedQty) internal pure {\\n        require(\\n            !((currentQty > 0 && addedQty <= 0) || (currentQty < 0 && addedQty >= 0)),\\n            Errors.INVALID_POSITION_QTY\\n        );\\n    }\\n\\n    /**\\n     * @notice Verifies the validity of a position quantity removed from the bin\\n     * @dev It ensures that the sign of the current quantity of the bin's position\\n     *      and the removed quantity are same or zero,\\n     *      and the absolute removed quantity is not greater than the absolute current quantity.\\n     *      If the condition is not met, it triggers an error with the message `Errors.INVALID_POSITION_QTY`.\\n     * @param currentQty The current quantity of the bin's position\\n     * @param removeQty The position quantity removed\\n     */\\n    function checkRemovePositionQty(int256 currentQty, int256 removeQty) internal pure {\\n        require(\\n            !((currentQty == 0) ||\\n                (removeQty == 0) ||\\n                (currentQty > 0 && removeQty > currentQty) ||\\n                (currentQty < 0 && removeQty < currentQty)),\\n            Errors.INVALID_POSITION_QTY\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the transaction amount based on the quantity and price\\n     * @param qty The quantity of the position\\n     * @param price The price of the position\\n     * @return uint256 The transaction amount\\n     */\\n    function transactionAmount(int256 qty, uint256 price) internal pure returns (uint256) {\\n        return qty.abs().mulDiv(price, PRICE_PRECISION);\\n    }\\n}\\n\",\"keccak256\":\"0xd65fc99fdb27f0d40c91906514029f9ebc9a658ed45e754266c76151ec6dbefe\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/registry/OracleProviderProperties.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev The OracleProviderProperties struct represents properties of the oracle provider.\\n * @param minTakeProfitBPS The minimum take-profit basis points.\\n * @param maxTakeProfitBPS The maximum take-profit basis points.\\n * @param leverageLevel The leverage level of the oracle provider.\\n */\\nstruct OracleProviderProperties {\\n    uint32 minTakeProfitBPS;\\n    uint32 maxTakeProfitBPS;\\n    uint8 leverageLevel;\\n}\\n\\nusing OracleProviderPropertiesLib for OracleProviderProperties global;\\n\\nlibrary OracleProviderPropertiesLib {\\n    function checkValidLeverageLevel(uint8 leverageLevel) internal pure returns (bool) {\\n        return leverageLevel <= 3;\\n    }\\n\\n    function maxAllowableLeverage(\\n        OracleProviderProperties memory self\\n    ) internal pure returns (uint256 leverage) {\\n        uint8 level = self.leverageLevel;\\n        assembly {\\n            switch level\\n            case 0 {\\n                leverage := 10\\n            }\\n            case 1 {\\n                leverage := 20\\n            }\\n            case 2 {\\n                leverage := 50\\n            }\\n            case 3 {\\n                leverage := 100\\n            }\\n            default {\\n                leverage := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b5a48475f814aef56a330571cce9f27e752f7fab6a99e2284a32b85be79b284\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IOracleProvider {\\n    /// @dev Error for invalid oracle round\\n    error InvalidOracleRound();\\n\\n    /**\\n     * @dev A singular oracle version with its corresponding data\\n     * @param version The iterative version\\n     * @param timestamp the timestamp of the oracle update\\n     * @param price The oracle price of the corresponding version\\n     */\\n    struct OracleVersion {\\n        uint256 version;\\n        uint256 timestamp;\\n        int256 price;\\n    }\\n\\n    /**\\n     * @notice Checks for a new price and updates the internal phase annotation state accordingly\\n     * @dev `sync` is expected to be called soon after a phase update occurs in the underlying proxy.\\n     *      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call\\n     *      This is feasible in the short term due to how infrequent phase updates are, but phase update\\n     *      and roundCount detection should eventually be implemented at the contract level.\\n     *      Reverts if there is more than 1 phase to update in a single sync because we currently cannot\\n     *      determine the startingRoundId for the intermediary phase.\\n     * @return The current oracle version after sync\\n     */\\n    function sync() external returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @return oracleVersion Current oracle version\\n     */\\n    function currentVersion() external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @param version The version of which to lookup\\n     * @return oracleVersion Oracle version at version `version`\\n     */\\n    function atVersion(uint256 version) external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Retrieves the description of the Oracle Provider.\\n     * @return A string representing the description of the Oracle Provider.\\n     */\\n    function description() external view returns (string memory);\\n\\n    /**\\n     * @notice Retrieves the name of the Oracle Provider.\\n     * @return A string representing the name of the Oracle Provider.\\n     */\\n    function oracleProviderName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7578ac3fc7a41e93a3e3d0c8eebebd559a0a34f8464079914e9f4f5cf39e427d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620036e5380380620036e583398101604081905262000034916200007b565b600160008190556001600160a01b0392831660805280546001600160a01b03191691909216179055620000ba565b6001600160a01b03811681146200007857600080fd5b50565b600080604083850312156200008f57600080fd5b82516200009c8162000062565b6020840151909250620000af8162000062565b809150509250929050565b60805161358362000162600039600081816103bc015281816106800152818161079d015281816109b201528181610cf301528181610d1e01528181610f7e0152818161138d015281816113b8015281816115240152818161154f01528181611c5201528181611ece01528181611ff00152818161201b01528181612216015281816126110152818161271a015281816127c901528181612a400152612c5001526135836000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806373574596116100ee578063c440a65c11610097578063cbd88db111610071578063cbd88db1146103f1578063d02f1b3014610411578063eb3349b914610424578063f3f437031461044457600080fd5b8063c440a65c146103a4578063c45a0155146103b7578063c4d39eee146103de57600080fd5b80638f7b59fe116100c85780638f7b59fe146103515780639b96cc1714610371578063adf51de11461039157600080fd5b806373574596146102e657806381ebafee1461032b5780638b4141171461033e57600080fd5b80634d4edc671161015b578063637414ad11610135578063637414ad1461029a57806367130c8c146102ad578063687d5dd4146102c057806371f8122b146102d357600080fd5b80634d4edc67146102475780634e82c4b7146102675780635372d35c1461027a57600080fd5b80632fe2fa251161018c5780632fe2fa251461020e578063342de3be146102215780634818c2fe1461023457600080fd5b80630963c61a146101b357806310235ad9146101e6578063113217fc146101fb575b600080fd5b6101d36101c1366004612f90565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b6101f96101f4366004612fad565b610464565b005b6101f9610209366004612ff1565b6105d8565b6101f961021c366004612f90565b610676565b6101d361022f36600461301d565b610bd2565b6101f9610242366004612f90565b610cd3565b6101d3610255366004612f90565b60026020526000908152604090205481565b6101d3610275366004613063565b610ea2565b6101d3610288366004612f90565b60076020526000908152604090205481565b6101f96102a8366004612f90565b610f74565b6101f96102bb3660046130a4565b611145565b6101f96102ce366004612f90565b61136d565b6101f96102e1366004612f90565b611504565b6001546103069073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101dd565b6101f96103393660046130f6565b61169b565b6101f961034c366004613138565b611977565b6101d361035f366004612f90565b60046020526000908152604090205481565b6101d361037f366004612f90565b60036020526000908152604090205481565b6101f961039f36600461316d565b611aea565b6101f96103b2366004612f90565b611fd0565b6103067f000000000000000000000000000000000000000000000000000000000000000081565b6101f96103ec3660046130f6565b612167565b6101d36103ff366004612f90565b60056020526000908152604090205481565b6101f961041f366004613063565b6124bc565b6101d3610432366004612f90565b60086020526000908152604090205481565b6101d3610452366004612f90565b60096020526000908152604090205481565b61046c61256b565b6104746125e3565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600360205260408120805433928692916104ab90849061323b565b909155505073ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040812080548692906104e590849061323b565b909155505073ffffffffffffffffffffffffffffffffffffffff86166000908152600260205260408120805485929061051f90849061323b565b909155505073ffffffffffffffffffffffffffffffffffffffff81166000908152600460205260408120805485929061055990849061323b565b9091555061056b9050818787856126c9565b83858273ffffffffffffffffffffffffffffffffffffffff167f55d8d1757457440c2753c42acc4a14b6860f25976b2635c2ea24ac344bfe730f86866040516105be929190918252602082015260400190565b60405180910390a4506105d16001600055565b5050505050565b6105e061256b565b6105e86125e3565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604081208054339284929161061f90849061323b565b9091555050604051829073ffffffffffffffffffffffffffffffffffffffff8316907f1bf8e13daf39d6f603c0f4047a0719c50094093eddb15b3dd26c71ec7e141d0090600090a3506106726001600055565b5050565b61067e61256b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610771576040517f808ca14f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015473ffffffffffffffffffffffffffffffffffffffff9081169082160361079957600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ec2c90166040518163ffffffff1660e01b8152600401600060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261084c91908101906132aa565b905060005b81518110156109ad578273ffffffffffffffffffffffffffffffffffffffff16634818c2fe8383815181106108885761088861338d565b60200260200101516040518263ffffffff1660e01b81526004016108c8919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381600087803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b5050600154845173ffffffffffffffffffffffffffffffffffffffff909116925063c440a65c91508490849081106109305761093061338d565b60200260200101516040518263ffffffff1660e01b8152600401610970919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381600087803b15801561098a57600080fd5b505af115801561099e573d6000803e3d6000fd5b50505050806001019050610851565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306216c376040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a1b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a6191908101906132aa565b905060005b8151811015610bc2578373ffffffffffffffffffffffffffffffffffffffff166371f8122b838381518110610a9d57610a9d61338d565b60200260200101516040518263ffffffff1660e01b8152600401610add919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381600087803b158015610af757600080fd5b505af1158015610b0b573d6000803e3d6000fd5b5050600154845173ffffffffffffffffffffffffffffffffffffffff909116925063687d5dd49150849084908110610b4557610b4561338d565b60200260200101516040518263ffffffff1660e01b8152600401610b85919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381600087803b158015610b9f57600080fd5b505af1158015610bb3573d6000803e3d6000fd5b50505050806001019050610a66565b505050610bcf6001600055565b50565b6000610bdc61256b565b610be46125e3565b82600003610bf457506000610cc1565b33610c01868686866127b3565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260036020526040812080549294508492909190610c3b9084906133bc565b909155505073ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604081208054849290610c759084906133bc565b90915550506040518290859073ffffffffffffffffffffffffffffffffffffffff8416907f31332ac845265ba9db701f457b8eb917667355d10a1f312e95622f27939d166c90600090a4505b610ccb6001600055565b949350505050565b610cdb61256b565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801590610ddb57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dab919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610e12576040517f6119ddb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517f4818c2fe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690634818c2fe906024015b600060405180830381600087803b158015610e8057600080fd5b505af1158015610e94573d6000803e3d6000fd5b50505050610bcf6001600055565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260026020908152604080832054938716835260049091528120549091908015610f1a5773ffffffffffffffffffffffffffffffffffffffff8616600090815260076020526040902054610f15908583600161290e565b610f1d565b60005b8215610f5b5773ffffffffffffffffffffffffffffffffffffffff8616600090815260066020526040902054610f56908685600161290e565b610f5e565b60005b610f68919061323b565b925050505b9392505050565b610f7c61256b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100b919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461106f576040517f808ca14f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811661108f57600080fd5b60015473ffffffffffffffffffffffffffffffffffffffff908116908216036110b757600080fd5b60015460405173ffffffffffffffffffffffffffffffffffffffff918216918316907f659609154f43db07621ef5a737c9b338c4818b88d41c6025f130d6eb05ed028b90600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617815560005550565b61114d61256b565b6111556125e3565b73ffffffffffffffffffffffffffffffffffffffff851660009081526003602052604081208054339285929161118c9084906133bc565b909155505073ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040812080548592906111c69084906133bc565b90915550508282111561125f5760006111df84846133bc565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600260205260408120805492935083929091906112199084906133bc565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040812080548392906112539084906133bc565b909155506112e6915050565b600061126b83856133bc565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600260205260408120805492935083929091906112a590849061323b565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040812080548392906112df90849061323b565b9091555050505b8373ffffffffffffffffffffffffffffffffffffffff16858273ffffffffffffffffffffffffffffffffffffffff167f5f8026a5f3cf54454ad6e760ded9b50bc89ea13a2f7a000e996533be4f0664ec868660405161134f929190918252602082015260400190565b60405180910390a461136286858461296b565b506105d16001600055565b61137561256b565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480159061147557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611421573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611445919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156114ac576040517f6119ddb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517f687d5dd400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063687d5dd490602401610e66565b61150c61256b565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480159061160c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dc919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611643576040517f6119ddb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517f71f8122b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152909116906371f8122b90602401610e66565b6116a361256b565b60015473ffffffffffffffffffffffffffffffffffffffff1633146116f4576040517f6d0340d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff16637b9e618d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611741573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611765919061325e565b905061177184826129f8565b61177b5750611968565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600760205260408120805490829055908481036117b55760006117c1565b6117c1838587856127b3565b905080858773ffffffffffffffffffffffffffffffffffffffff167f31332ac845265ba9db701f457b8eb917667355d10a1f312e95622f27939d166c60405160405180910390a4600061181482846133bc565b73ffffffffffffffffffffffffffffffffffffffff881660009081526004602052604081208054929350839161184a838561323b565b909155505073ffffffffffffffffffffffffffffffffffffffff85166000908152600260205260408120805484929061188490849061323b565b90915550506040517f28b5bd1e000000000000000000000000000000000000000000000000000000008152600481018390526024810182905273ffffffffffffffffffffffffffffffffffffffff8916906328b5bd1e90604401600060405180830381600087803b1580156118f857600080fd5b505af115801561190c573d6000803e3d6000fd5b5050505082848973ffffffffffffffffffffffffffffffffffffffff167fad1f1a056b9857eab5e447a17c2580435764d4219e831cd5bd9ecef30070c7278460405161195a91815260200190565b60405180910390a450505050505b6119726001600055565b505050565b61197f61256b565b6119876125e3565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600860205260408120805433928592916119be9084906133bc565b909155505073ffffffffffffffffffffffffffffffffffffffff8416600090815260096020526040812080548492906119f890849061323b565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600260205260409020548290611a3090859061323b565b611a3a91906133bc565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600260209081526040808320949094559184168152600490915220548290611a8090859061323b565b611a8a91906133bc565b73ffffffffffffffffffffffffffffffffffffffff821660008181526004602052604080822093909355915184928692917ffe6f0208aa042f739ede2198851bf2945b80c1052fc2f1366e428faf83a4fa7c9190a4506119726001600055565b611af261256b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa158015611b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8391906133cf565b73ffffffffffffffffffffffffffffffffffffffff871660009081526009602090815260408083205460089092529091205491925090611bc390836133bc565b611bcd91906133bc565b851115611c06576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f28abb76300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600091611cc9917f000000000000000000000000000000000000000000000000000000000000000016906328abb76390602401602060405180830381865afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbd91906133cf565b8790612710600161290e565b9050611cd687868861296b565b6040517f47bc6a8e00000000000000000000000000000000000000000000000000000000815233906347bc6a8e90611d16908490889088906004016133e8565b600060405180830381600087803b158015611d3057600080fd5b505af1158015611d44573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000925073ffffffffffffffffffffffffffffffffffffffff8a1691506370a0823190602401602060405180830381865afa158015611db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd991906133cf565b9050611de5828461323b565b811015611e1e576040517f3244470d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611e2a84836133bc565b73ffffffffffffffffffffffffffffffffffffffff8a1660009081526003602090815260408083205460029092528220549293509190611e7683611e6e848261323b565b869190612ade565b90506000611e8482866133bc565b90508115611f615773ffffffffffffffffffffffffffffffffffffffff8d1660009081526006602052604081208054839290611ec190849061323b565b92505081905550611f618d7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5b919061325e565b8461296b565b60408051868152602081018490529081018290528c9073ffffffffffffffffffffffffffffffffffffffff8d169033907f5b8f46461c1dd69fb968f1a003acee221ea3e19540e350233b612ddb43433b559060600160405180910390a450505050505050506105d16001600055565b611fd861256b565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906120d857507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a8919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561210f576040517f6119ddb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517fc440a65c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063c440a65c90602401610e66565b61216f61256b565b60015473ffffffffffffffffffffffffffffffffffffffff1633146121c0576040517f6d0340d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121c983612c08565b15611968576040517ffc3e902600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063fc3e902690602401600060405180830381865afa15801561225f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526122a591908101906132aa565b73ffffffffffffffffffffffffffffffffffffffff851660009081526006602052604081208054908290559192508481036122e15760006122ed565b6122ed868587856127b3565b905080857f916ed1b5bdd37491a3a78d6ca4aff7c2d6216a39a2e006c3bdba3579fe7781ee60405160405180910390a373ffffffffffffffffffffffffffffffffffffffff86166000908152600260205260408120549061234e83856133bc565b905060005b85518110156124675760008682815181106123705761237061338d565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff8116600090815260049092526040822054909250906123b1858388612ade565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600760205260408120805492935083929091906123eb90849061323b565b909155506123fb905082876133bc565b955061240781866133bc565b94508273ffffffffffffffffffffffffffffffffffffffff167f5d61d1733044ba19fc3a248fdeb20b6a86f043bcc178d1199a996c6fdc03af698260405161245191815260200190565b60405180910390a2836001019350505050612353565b5082848973ffffffffffffffffffffffffffffffffffffffff167f742cede2307fae58bf2454c5dda6af2ccf6c38a9b12484989afe79af33fd7f3a60405160405180910390a450505050506119726001600055565b6124c461256b565b6124cc6125e3565b80156119685773ffffffffffffffffffffffffffffffffffffffff83166000908152600960205260408120805433928492916125099084906133bc565b909155505060405173ffffffffffffffffffffffffffffffffffffffff8085169184918416907f5f47c32b777ebd5486a5c3ca3d91644eaf7de2b3410fb14ea55bbfa41c9b3ad490600090a461256084848461296b565b506119726001600055565b6002600054036125dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b6040517f4a58e49e0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634a58e49e90602401602060405180830381865afa15801561266d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612691919061343c565b6126c7576040517f1353f3f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b80156127ad5780828573ffffffffffffffffffffffffffffffffffffffff167f5f71c80c263695df78884e6822148b66c1cb73498b21aa8fec9095966ac6f30860405160405180910390a46127ad837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a7919061325e565b8361296b565b50505050565b6000826000036127c557506000610ccb565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635b5b52c06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612832573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612856919061325e565b905061286386828561296b565b6040517f780205b100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201869052868116604483015282169063780205b1906064016020604051808303816000875af11580156128e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290491906133cf565b9695505050505050565b60008061291c868686612ade565b905060018360028111156129325761293261345e565b14801561294f57506000848061294a5761294a61348d565b868809115b156129625761295f60018261323b565b90505b95945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611972908490612cee565b6040517ffddd4d8f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063fddd4d8f90602401602060405180830381865afa158015612a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aad91906133cf565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260076020526040902054101590505b92915050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600003612b3657838281612b2c57612b2c61348d565b0492505050610f6d565b808411612b9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f77000000000000000000000060448201526064016125d3565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040517ffddd4d8f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063fddd4d8f90602401602060405180830381865afa158015612c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbd91906133cf565b73ffffffffffffffffffffffffffffffffffffffff9092166000908152600660205260409020549190911015919050565b6000612d50826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612dfd9092919063ffffffff16565b9050805160001480612d71575080806020019051810190612d71919061343c565b611972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016125d3565b6060610ccb8484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e3191906134e0565b60006040518083038185875af1925050503d8060008114612e6e576040519150601f19603f3d011682016040523d82523d6000602084013e612e73565b606091505b5091509150612e8487838387612e8f565b979650505050505050565b60608315612f25578251600003612f1e5773ffffffffffffffffffffffffffffffffffffffff85163b612f1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016125d3565b5081610ccb565b610ccb8383815115612f3a5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d391906134fc565b73ffffffffffffffffffffffffffffffffffffffff81168114610bcf57600080fd5b600060208284031215612fa257600080fd5b8135610f6d81612f6e565b600080600080600060a08688031215612fc557600080fd5b8535612fd081612f6e565b97602087013597506040870135966060810135965060800135945092505050565b6000806040838503121561300457600080fd5b823561300f81612f6e565b946020939093013593505050565b6000806000806080858703121561303357600080fd5b843561303e81612f6e565b9350602085013561304e81612f6e565b93969395505050506040820135916060013590565b60008060006060848603121561307857600080fd5b833561308381612f6e565b9250602084013561309381612f6e565b929592945050506040919091013590565b600080600080600060a086880312156130bc57600080fd5b85356130c781612f6e565b94506020860135935060408601356130de81612f6e565b94979396509394606081013594506080013592915050565b60008060006060848603121561310b57600080fd5b833561311681612f6e565b925060208401359150604084013561312d81612f6e565b809150509250925092565b60008060006060848603121561314d57600080fd5b833561315881612f6e565b95602085013595506040909401359392505050565b60008060008060006080868803121561318557600080fd5b853561319081612f6e565b94506020860135935060408601356131a781612f6e565b9250606086013567ffffffffffffffff808211156131c457600080fd5b818801915088601f8301126131d857600080fd5b8135818111156131e757600080fd5b8960208285010111156131f957600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115612ad857612ad861320c565b805161325981612f6e565b919050565b60006020828403121561327057600080fd5b8151610f6d81612f6e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156132bd57600080fd5b825167ffffffffffffffff808211156132d557600080fd5b818501915085601f8301126132e957600080fd5b8151818111156132fb576132fb61327b565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561333e5761333e61327b565b60405291825284820192508381018501918883111561335c57600080fd5b938501935b82851015613381576133728561324e565b84529385019392850192613361565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115612ad857612ad861320c565b6000602082840312156133e157600080fd5b5051919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60006020828403121561344e57600080fd5b81518015158114610f6d57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60005b838110156134d75781810151838201526020016134bf565b50506000910152565b600082516134f28184602087016134bc565b9190910192915050565b602081526000825180602084015261351b8160408501602087016134bc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212208525cfd2739e45becb1665ba76796e399bd3d0c4f8db313b2773aa25173c79b664736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c806373574596116100ee578063c440a65c11610097578063cbd88db111610071578063cbd88db1146103f1578063d02f1b3014610411578063eb3349b914610424578063f3f437031461044457600080fd5b8063c440a65c146103a4578063c45a0155146103b7578063c4d39eee146103de57600080fd5b80638f7b59fe116100c85780638f7b59fe146103515780639b96cc1714610371578063adf51de11461039157600080fd5b806373574596146102e657806381ebafee1461032b5780638b4141171461033e57600080fd5b80634d4edc671161015b578063637414ad11610135578063637414ad1461029a57806367130c8c146102ad578063687d5dd4146102c057806371f8122b146102d357600080fd5b80634d4edc67146102475780634e82c4b7146102675780635372d35c1461027a57600080fd5b80632fe2fa251161018c5780632fe2fa251461020e578063342de3be146102215780634818c2fe1461023457600080fd5b80630963c61a146101b357806310235ad9146101e6578063113217fc146101fb575b600080fd5b6101d36101c1366004612f90565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b6101f96101f4366004612fad565b610464565b005b6101f9610209366004612ff1565b6105d8565b6101f961021c366004612f90565b610676565b6101d361022f36600461301d565b610bd2565b6101f9610242366004612f90565b610cd3565b6101d3610255366004612f90565b60026020526000908152604090205481565b6101d3610275366004613063565b610ea2565b6101d3610288366004612f90565b60076020526000908152604090205481565b6101f96102a8366004612f90565b610f74565b6101f96102bb3660046130a4565b611145565b6101f96102ce366004612f90565b61136d565b6101f96102e1366004612f90565b611504565b6001546103069073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101dd565b6101f96103393660046130f6565b61169b565b6101f961034c366004613138565b611977565b6101d361035f366004612f90565b60046020526000908152604090205481565b6101d361037f366004612f90565b60036020526000908152604090205481565b6101f961039f36600461316d565b611aea565b6101f96103b2366004612f90565b611fd0565b6103067f000000000000000000000000000000000000000000000000000000000000000081565b6101f96103ec3660046130f6565b612167565b6101d36103ff366004612f90565b60056020526000908152604090205481565b6101f961041f366004613063565b6124bc565b6101d3610432366004612f90565b60086020526000908152604090205481565b6101d3610452366004612f90565b60096020526000908152604090205481565b61046c61256b565b6104746125e3565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600360205260408120805433928692916104ab90849061323b565b909155505073ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040812080548692906104e590849061323b565b909155505073ffffffffffffffffffffffffffffffffffffffff86166000908152600260205260408120805485929061051f90849061323b565b909155505073ffffffffffffffffffffffffffffffffffffffff81166000908152600460205260408120805485929061055990849061323b565b9091555061056b9050818787856126c9565b83858273ffffffffffffffffffffffffffffffffffffffff167f55d8d1757457440c2753c42acc4a14b6860f25976b2635c2ea24ac344bfe730f86866040516105be929190918252602082015260400190565b60405180910390a4506105d16001600055565b5050505050565b6105e061256b565b6105e86125e3565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604081208054339284929161061f90849061323b565b9091555050604051829073ffffffffffffffffffffffffffffffffffffffff8316907f1bf8e13daf39d6f603c0f4047a0719c50094093eddb15b3dd26c71ec7e141d0090600090a3506106726001600055565b5050565b61067e61256b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610771576040517f808ca14f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015473ffffffffffffffffffffffffffffffffffffffff9081169082160361079957600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ec2c90166040518163ffffffff1660e01b8152600401600060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261084c91908101906132aa565b905060005b81518110156109ad578273ffffffffffffffffffffffffffffffffffffffff16634818c2fe8383815181106108885761088861338d565b60200260200101516040518263ffffffff1660e01b81526004016108c8919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381600087803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b5050600154845173ffffffffffffffffffffffffffffffffffffffff909116925063c440a65c91508490849081106109305761093061338d565b60200260200101516040518263ffffffff1660e01b8152600401610970919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381600087803b15801561098a57600080fd5b505af115801561099e573d6000803e3d6000fd5b50505050806001019050610851565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306216c376040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a1b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a6191908101906132aa565b905060005b8151811015610bc2578373ffffffffffffffffffffffffffffffffffffffff166371f8122b838381518110610a9d57610a9d61338d565b60200260200101516040518263ffffffff1660e01b8152600401610add919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381600087803b158015610af757600080fd5b505af1158015610b0b573d6000803e3d6000fd5b5050600154845173ffffffffffffffffffffffffffffffffffffffff909116925063687d5dd49150849084908110610b4557610b4561338d565b60200260200101516040518263ffffffff1660e01b8152600401610b85919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381600087803b158015610b9f57600080fd5b505af1158015610bb3573d6000803e3d6000fd5b50505050806001019050610a66565b505050610bcf6001600055565b50565b6000610bdc61256b565b610be46125e3565b82600003610bf457506000610cc1565b33610c01868686866127b3565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260036020526040812080549294508492909190610c3b9084906133bc565b909155505073ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604081208054849290610c759084906133bc565b90915550506040518290859073ffffffffffffffffffffffffffffffffffffffff8416907f31332ac845265ba9db701f457b8eb917667355d10a1f312e95622f27939d166c90600090a4505b610ccb6001600055565b949350505050565b610cdb61256b565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801590610ddb57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dab919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610e12576040517f6119ddb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517f4818c2fe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690634818c2fe906024015b600060405180830381600087803b158015610e8057600080fd5b505af1158015610e94573d6000803e3d6000fd5b50505050610bcf6001600055565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260026020908152604080832054938716835260049091528120549091908015610f1a5773ffffffffffffffffffffffffffffffffffffffff8616600090815260076020526040902054610f15908583600161290e565b610f1d565b60005b8215610f5b5773ffffffffffffffffffffffffffffffffffffffff8616600090815260066020526040902054610f56908685600161290e565b610f5e565b60005b610f68919061323b565b925050505b9392505050565b610f7c61256b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100b919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461106f576040517f808ca14f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811661108f57600080fd5b60015473ffffffffffffffffffffffffffffffffffffffff908116908216036110b757600080fd5b60015460405173ffffffffffffffffffffffffffffffffffffffff918216918316907f659609154f43db07621ef5a737c9b338c4818b88d41c6025f130d6eb05ed028b90600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617815560005550565b61114d61256b565b6111556125e3565b73ffffffffffffffffffffffffffffffffffffffff851660009081526003602052604081208054339285929161118c9084906133bc565b909155505073ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040812080548592906111c69084906133bc565b90915550508282111561125f5760006111df84846133bc565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600260205260408120805492935083929091906112199084906133bc565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040812080548392906112539084906133bc565b909155506112e6915050565b600061126b83856133bc565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600260205260408120805492935083929091906112a590849061323b565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040812080548392906112df90849061323b565b9091555050505b8373ffffffffffffffffffffffffffffffffffffffff16858273ffffffffffffffffffffffffffffffffffffffff167f5f8026a5f3cf54454ad6e760ded9b50bc89ea13a2f7a000e996533be4f0664ec868660405161134f929190918252602082015260400190565b60405180910390a461136286858461296b565b506105d16001600055565b61137561256b565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480159061147557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611421573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611445919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156114ac576040517f6119ddb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517f687d5dd400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063687d5dd490602401610e66565b61150c61256b565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480159061160c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dc919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611643576040517f6119ddb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517f71f8122b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152909116906371f8122b90602401610e66565b6116a361256b565b60015473ffffffffffffffffffffffffffffffffffffffff1633146116f4576040517f6d0340d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff16637b9e618d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611741573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611765919061325e565b905061177184826129f8565b61177b5750611968565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600760205260408120805490829055908481036117b55760006117c1565b6117c1838587856127b3565b905080858773ffffffffffffffffffffffffffffffffffffffff167f31332ac845265ba9db701f457b8eb917667355d10a1f312e95622f27939d166c60405160405180910390a4600061181482846133bc565b73ffffffffffffffffffffffffffffffffffffffff881660009081526004602052604081208054929350839161184a838561323b565b909155505073ffffffffffffffffffffffffffffffffffffffff85166000908152600260205260408120805484929061188490849061323b565b90915550506040517f28b5bd1e000000000000000000000000000000000000000000000000000000008152600481018390526024810182905273ffffffffffffffffffffffffffffffffffffffff8916906328b5bd1e90604401600060405180830381600087803b1580156118f857600080fd5b505af115801561190c573d6000803e3d6000fd5b5050505082848973ffffffffffffffffffffffffffffffffffffffff167fad1f1a056b9857eab5e447a17c2580435764d4219e831cd5bd9ecef30070c7278460405161195a91815260200190565b60405180910390a450505050505b6119726001600055565b505050565b61197f61256b565b6119876125e3565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600860205260408120805433928592916119be9084906133bc565b909155505073ffffffffffffffffffffffffffffffffffffffff8416600090815260096020526040812080548492906119f890849061323b565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600260205260409020548290611a3090859061323b565b611a3a91906133bc565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600260209081526040808320949094559184168152600490915220548290611a8090859061323b565b611a8a91906133bc565b73ffffffffffffffffffffffffffffffffffffffff821660008181526004602052604080822093909355915184928692917ffe6f0208aa042f739ede2198851bf2945b80c1052fc2f1366e428faf83a4fa7c9190a4506119726001600055565b611af261256b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa158015611b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8391906133cf565b73ffffffffffffffffffffffffffffffffffffffff871660009081526009602090815260408083205460089092529091205491925090611bc390836133bc565b611bcd91906133bc565b851115611c06576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f28abb76300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600091611cc9917f000000000000000000000000000000000000000000000000000000000000000016906328abb76390602401602060405180830381865afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbd91906133cf565b8790612710600161290e565b9050611cd687868861296b565b6040517f47bc6a8e00000000000000000000000000000000000000000000000000000000815233906347bc6a8e90611d16908490889088906004016133e8565b600060405180830381600087803b158015611d3057600080fd5b505af1158015611d44573d6000803e3d6000fd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000925073ffffffffffffffffffffffffffffffffffffffff8a1691506370a0823190602401602060405180830381865afa158015611db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd991906133cf565b9050611de5828461323b565b811015611e1e576040517f3244470d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611e2a84836133bc565b73ffffffffffffffffffffffffffffffffffffffff8a1660009081526003602090815260408083205460029092528220549293509190611e7683611e6e848261323b565b869190612ade565b90506000611e8482866133bc565b90508115611f615773ffffffffffffffffffffffffffffffffffffffff8d1660009081526006602052604081208054839290611ec190849061323b565b92505081905550611f618d7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5b919061325e565b8461296b565b60408051868152602081018490529081018290528c9073ffffffffffffffffffffffffffffffffffffffff8d169033907f5b8f46461c1dd69fb968f1a003acee221ea3e19540e350233b612ddb43433b559060600160405180910390a450505050505050506105d16001600055565b611fd861256b565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906120d857507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a8919061325e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561210f576040517f6119ddb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517fc440a65c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063c440a65c90602401610e66565b61216f61256b565b60015473ffffffffffffffffffffffffffffffffffffffff1633146121c0576040517f6d0340d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121c983612c08565b15611968576040517ffc3e902600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063fc3e902690602401600060405180830381865afa15801561225f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526122a591908101906132aa565b73ffffffffffffffffffffffffffffffffffffffff851660009081526006602052604081208054908290559192508481036122e15760006122ed565b6122ed868587856127b3565b905080857f916ed1b5bdd37491a3a78d6ca4aff7c2d6216a39a2e006c3bdba3579fe7781ee60405160405180910390a373ffffffffffffffffffffffffffffffffffffffff86166000908152600260205260408120549061234e83856133bc565b905060005b85518110156124675760008682815181106123705761237061338d565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff8116600090815260049092526040822054909250906123b1858388612ade565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600760205260408120805492935083929091906123eb90849061323b565b909155506123fb905082876133bc565b955061240781866133bc565b94508273ffffffffffffffffffffffffffffffffffffffff167f5d61d1733044ba19fc3a248fdeb20b6a86f043bcc178d1199a996c6fdc03af698260405161245191815260200190565b60405180910390a2836001019350505050612353565b5082848973ffffffffffffffffffffffffffffffffffffffff167f742cede2307fae58bf2454c5dda6af2ccf6c38a9b12484989afe79af33fd7f3a60405160405180910390a450505050506119726001600055565b6124c461256b565b6124cc6125e3565b80156119685773ffffffffffffffffffffffffffffffffffffffff83166000908152600960205260408120805433928492916125099084906133bc565b909155505060405173ffffffffffffffffffffffffffffffffffffffff8085169184918416907f5f47c32b777ebd5486a5c3ca3d91644eaf7de2b3410fb14ea55bbfa41c9b3ad490600090a461256084848461296b565b506119726001600055565b6002600054036125dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b6040517f4a58e49e0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634a58e49e90602401602060405180830381865afa15801561266d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612691919061343c565b6126c7576040517f1353f3f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b80156127ad5780828573ffffffffffffffffffffffffffffffffffffffff167f5f71c80c263695df78884e6822148b66c1cb73498b21aa8fec9095966ac6f30860405160405180910390a46127ad837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a7919061325e565b8361296b565b50505050565b6000826000036127c557506000610ccb565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635b5b52c06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612832573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612856919061325e565b905061286386828561296b565b6040517f780205b100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201869052868116604483015282169063780205b1906064016020604051808303816000875af11580156128e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290491906133cf565b9695505050505050565b60008061291c868686612ade565b905060018360028111156129325761293261345e565b14801561294f57506000848061294a5761294a61348d565b868809115b156129625761295f60018261323b565b90505b95945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611972908490612cee565b6040517ffddd4d8f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063fddd4d8f90602401602060405180830381865afa158015612a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aad91906133cf565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260076020526040902054101590505b92915050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600003612b3657838281612b2c57612b2c61348d565b0492505050610f6d565b808411612b9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f77000000000000000000000060448201526064016125d3565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040517ffddd4d8f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063fddd4d8f90602401602060405180830381865afa158015612c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbd91906133cf565b73ffffffffffffffffffffffffffffffffffffffff9092166000908152600660205260409020549190911015919050565b6000612d50826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612dfd9092919063ffffffff16565b9050805160001480612d71575080806020019051810190612d71919061343c565b611972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016125d3565b6060610ccb8484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e3191906134e0565b60006040518083038185875af1925050503d8060008114612e6e576040519150601f19603f3d011682016040523d82523d6000602084013e612e73565b606091505b5091509150612e8487838387612e8f565b979650505050505050565b60608315612f25578251600003612f1e5773ffffffffffffffffffffffffffffffffffffffff85163b612f1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016125d3565b5081610ccb565b610ccb8383815115612f3a5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d391906134fc565b73ffffffffffffffffffffffffffffffffffffffff81168114610bcf57600080fd5b600060208284031215612fa257600080fd5b8135610f6d81612f6e565b600080600080600060a08688031215612fc557600080fd5b8535612fd081612f6e565b97602087013597506040870135966060810135965060800135945092505050565b6000806040838503121561300457600080fd5b823561300f81612f6e565b946020939093013593505050565b6000806000806080858703121561303357600080fd5b843561303e81612f6e565b9350602085013561304e81612f6e565b93969395505050506040820135916060013590565b60008060006060848603121561307857600080fd5b833561308381612f6e565b9250602084013561309381612f6e565b929592945050506040919091013590565b600080600080600060a086880312156130bc57600080fd5b85356130c781612f6e565b94506020860135935060408601356130de81612f6e565b94979396509394606081013594506080013592915050565b60008060006060848603121561310b57600080fd5b833561311681612f6e565b925060208401359150604084013561312d81612f6e565b809150509250925092565b60008060006060848603121561314d57600080fd5b833561315881612f6e565b95602085013595506040909401359392505050565b60008060008060006080868803121561318557600080fd5b853561319081612f6e565b94506020860135935060408601356131a781612f6e565b9250606086013567ffffffffffffffff808211156131c457600080fd5b818801915088601f8301126131d857600080fd5b8135818111156131e757600080fd5b8960208285010111156131f957600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115612ad857612ad861320c565b805161325981612f6e565b919050565b60006020828403121561327057600080fd5b8151610f6d81612f6e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156132bd57600080fd5b825167ffffffffffffffff808211156132d557600080fd5b818501915085601f8301126132e957600080fd5b8151818111156132fb576132fb61327b565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561333e5761333e61327b565b60405291825284820192508381018501918883111561335c57600080fd5b938501935b82851015613381576133728561324e565b84529385019392850192613361565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115612ad857612ad861320c565b6000602082840312156133e157600080fd5b5051919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60006020828403121561344e57600080fd5b81518015158114610f6d57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60005b838110156134d75781810151838201526020016134bf565b50506000910152565b600082516134f28184602087016134bc565b9190910192915050565b602081526000825180602084015261351b8160408501602087016134bc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212208525cfd2739e45becb1665ba76796e399bd3d0c4f8db313b2773aa25173c79b664736f6c63430008130033",
  "devdoc": {
    "details": "A contract that implements the ChromaticVault interface      and provides functionality for managing positions, liquidity, and fees in Chromatic markets.",
    "errors": {
      "NotEnoughBalance()": [
        {
          "details": "Throws an error indicating that the flash loan amount exceeds the available balance in the vault."
        }
      ],
      "NotEnoughFeePaid()": [
        {
          "details": "Throws an error indicating that the recipient has not paid the sufficient flash loan fee."
        }
      ],
      "OnlyAccessableByDao()": [
        {
          "details": "Throws an error indicating that the caller is not the DAO."
        }
      ],
      "OnlyAccessableByEarningDistributor()": [
        {
          "details": "Throws an error indicating that the caller is not the Vault earning distribute contract."
        }
      ],
      "OnlyAccessableByFactoryOrDao()": [
        {
          "details": "Throws an error indicating that the caller is nether the chormatic factory contract nor the DAO."
        }
      ],
      "OnlyAccessableByMarket()": [
        {
          "details": "Throws an error indicating that the caller is not a registered market."
        }
      ]
    },
    "events": {
      "FlashLoan(address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "amount": "The amount of the flash loan.",
          "paid": "The amount paid back after the flash loan.",
          "paidToMakerPool": "The amount paid to the maker pool after the flash loan.",
          "paidToTakerPool": "The amount paid to the taker pool after the flash loan.",
          "recipient": "The address receiving the flash loan.",
          "sender": "The address initiating the flash loan."
        }
      },
      "MakerEarningDistributed(address,uint256,uint256)": {
        "details": "Emitted when maker earning is distributed.",
        "params": {
          "earning": "The amount of earning distributed.",
          "token": "The address of the settlement token.",
          "usedKeeperFee": "The amount of keeper fee used."
        }
      },
      "MarketEarningAccumulated(address,uint256)": {
        "details": "Emitted when market earning is accumulated.",
        "params": {
          "earning": "The amount of earning accumulated.",
          "market": "The address of the market."
        }
      },
      "MarketEarningDistributed(address,uint256,uint256,uint256)": {
        "details": "Emitted when market earning is distributed.",
        "params": {
          "earning": "The amount of earning distributed.",
          "market": "The address of the market.",
          "marketBalance": "The balance of the market.",
          "usedKeeperFee": "The amount of keeper fee used."
        }
      },
      "OnAddLiquidity(address,uint256)": {
        "params": {
          "amount": "The amount of liquidity added.",
          "market": "The address of the market."
        }
      },
      "OnClaimPosition(address,uint256,address,uint256,uint256)": {
        "params": {
          "market": "The address of the market.",
          "positionId": "The ID of the claimed position.",
          "recipient": "The address of the recipient of the settlement amount.",
          "settlementAmount": "The settlement amount received by the recipient.",
          "takerMargin": "The margin amount provided by the taker for the position."
        }
      },
      "OnOpenPosition(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "market": "The address of the market.",
          "positionId": "The ID of the opened position.",
          "protocolFee": "The protocol fee associated with the position.",
          "takerMargin": "The margin amount provided by the taker for the position.",
          "tradingFee": "The trading fee associated with the position."
        }
      },
      "OnSettlePendingLiquidity(address,uint256,uint256)": {
        "params": {
          "market": "The address of the market.",
          "pendingDeposit": "The amount of pending deposit being settled.",
          "pendingWithdrawal": "The amount of pending withdrawal being settled."
        }
      },
      "OnWithdrawLiquidity(address,uint256,address)": {
        "params": {
          "amount": "The amount of liquidity withdrawn.",
          "market": "The address of the market.",
          "recipient": "The address of the recipient of the withdrawn liquidity."
        }
      },
      "TransferKeeperFee(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of settlement token to be used for paying keeper fee.",
          "fee": "The amount of the transferred keeper fee as native token.",
          "market": "The address of the market."
        }
      },
      "TransferKeeperFee(uint256,uint256)": {
        "params": {
          "amount": "The amount of settlement token to be used for paying keeper fee.",
          "fee": "The amount of the transferred keeper fee as native token."
        }
      },
      "TransferProtocolFee(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of the transferred fee.",
          "market": "The address of the market.",
          "positionId": "The ID of the position."
        }
      },
      "VaultEarningDistributorSet(address,address)": {
        "params": {
          "oldVaultEarningDistributor": "The old vault earning distributor address.",
          "vaultEarningDistributor": "The vault earning distributor address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancelMakerEarningDistributionTask(address)": {
        "params": {
          "token": "The address of the settlement token."
        }
      },
      "cancelMarketEarningDistributionTask(address)": {
        "params": {
          "market": "The address of the market."
        }
      },
      "constructor": {
        "details": "Constructs a new ChromaticVault instance.",
        "params": {
          "_earningDistributor": "The address of the Vault earning distribute contract.",
          "_factory": "The address of the Chromatic Market Factory contract."
        }
      },
      "createMakerEarningDistributionTask(address)": {
        "params": {
          "token": "The address of the settlement token."
        }
      },
      "createMarketEarningDistributionTask(address)": {
        "params": {
          "market": "The address of the market."
        }
      },
      "distributeMakerEarning(address,uint256,address)": {
        "params": {
          "fee": "The keeper fee amount.",
          "keeper": "The keeper address to receive fee.",
          "token": "The address of the settlement token."
        }
      },
      "distributeMarketEarning(address,uint256,address)": {
        "params": {
          "fee": "The fee amount.",
          "keeper": "The keeper address to receive fee.",
          "market": "The address of the market."
        }
      },
      "flashLoan(address,uint256,address,bytes)": {
        "details": "Throws a `NotEnoughBalance` error if the loan amount exceeds the available balance.      Throws a `NotEnoughFeePaid` error if the fee has not been paid by the recipient. Requirements: - The loan amount must not exceed the available balance after considering pending deposits and withdrawals. - The fee for the flash loan must be paid by the recipient. - The total amount paid must be distributed between the taker pool and maker pool according to their balances. - The amount paid to the taker pool must be transferred to the DAO treasury address. - The amount paid to the maker pool must be added to the pending maker earnings. Emits a `FlashLoan` event with details of the flash loan execution.",
        "params": {
          "amount": "The amount of the flash loan.",
          "data": "Additional data for the flash loan.",
          "recipient": "The address to receive the flash loan.",
          "token": "The address of the token for the flash loan."
        }
      },
      "getPendingBinShare(address,address,uint256)": {
        "details": "The pending share of earnings is calculated based on the bin balance, maker balances, and market balances.",
        "params": {
          "binBalance": "The balance of funds in the bin.",
          "market": "The address of the market.",
          "settlementToken": "The settlement token address."
        },
        "returns": {
          "_0": "The pending share of earnings for the specified bin."
        }
      },
      "onAddLiquidity(address,uint256)": {
        "details": "This function can only be called by a market contract.",
        "params": {
          "amount": "The amount of liquidity being added.",
          "settlementToken": "The settlement token address."
        }
      },
      "onClaimPosition(address,uint256,address,uint256,uint256)": {
        "details": "This function can only be called by a market contract.",
        "params": {
          "positionId": "The ID of the claimed position.",
          "recipient": "The address that will receive the settlement amount.",
          "settlementAmount": "The amount to be settled for the position.",
          "settlementToken": "The settlement token address.",
          "takerMargin": "The margin amount provided by the taker for the position."
        }
      },
      "onOpenPosition(address,uint256,uint256,uint256,uint256)": {
        "details": "This function can only be called by a market contract.",
        "params": {
          "positionId": "The ID of the opened position.",
          "protocolFee": "The protocol fee associated with the position.",
          "settlementToken": "The settlement token address.",
          "takerMargin": "The margin amount provided by the taker for the position.",
          "tradingFee": "The trading fee associated with the position."
        }
      },
      "onSettlePendingLiquidity(address,uint256,uint256)": {
        "details": "This function can only be called by a market contract.",
        "params": {
          "pendingDeposit": "The amount of pending deposits being settled.",
          "pendingWithdrawal": "The amount of pending withdrawals being settled.",
          "settlementToken": "The settlement token address."
        }
      },
      "onWithdrawLiquidity(address,address,uint256)": {
        "details": "This function can only be called by a market contract.",
        "params": {
          "amount": "The amount of liquidity to be withdrawn.",
          "recipient": "The address that will receive the withdrawn liquidity.",
          "settlementToken": "The settlement token address."
        }
      },
      "setVaultEarningDistributor(address)": {
        "details": "This function can only be called by the DAO address."
      },
      "transferKeeperFee(address,address,uint256,uint256)": {
        "details": "This function can only be called by a market contract.",
        "params": {
          "fee": "The amount of the fee to transfer as native token.",
          "keeper": "The address of the keeper to receive the fee.",
          "margin": "The margin amount used for the fee payment.",
          "settlementToken": "The settlement token address."
        },
        "returns": {
          "usedFee": "The actual settlement token amount of fee used for the transfer."
        }
      }
    },
    "title": "ChromaticVault",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FlashLoan(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when a flash loan is executed."
      },
      "OnAddLiquidity(address,uint256)": {
        "notice": "Emitted when liquidity is added to the vault."
      },
      "OnClaimPosition(address,uint256,address,uint256,uint256)": {
        "notice": "Emitted when a position is claimed."
      },
      "OnOpenPosition(address,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when a position is opened."
      },
      "OnSettlePendingLiquidity(address,uint256,uint256)": {
        "notice": "Emitted when pending liquidity is settled."
      },
      "OnWithdrawLiquidity(address,uint256,address)": {
        "notice": "Emitted when liquidity is withdrawn from the vault."
      },
      "TransferKeeperFee(address,uint256,uint256)": {
        "notice": "Emitted when the keeper fee is transferred for a specific market."
      },
      "TransferKeeperFee(uint256,uint256)": {
        "notice": "Emitted when the keeper fee is transferred."
      },
      "TransferProtocolFee(address,uint256,uint256)": {
        "notice": "Emitted when the protocol fee is transferred for a specific position."
      },
      "VaultEarningDistributorSet(address,address)": {
        "notice": "Emitted when the vault earning distributor address is set."
      }
    },
    "kind": "user",
    "methods": {
      "cancelMakerEarningDistributionTask(address)": {
        "notice": "Cancels a maker earning distribution task for a token."
      },
      "cancelMarketEarningDistributionTask(address)": {
        "notice": "Cancels a market earning distribution task for a market."
      },
      "createMakerEarningDistributionTask(address)": {
        "notice": "Creates a maker earning distribution task for a token."
      },
      "createMarketEarningDistributionTask(address)": {
        "notice": "Creates a market earning distribution task for a market."
      },
      "distributeMakerEarning(address,uint256,address)": {
        "notice": "Distributes the maker earning for a token to the each markets."
      },
      "distributeMarketEarning(address,uint256,address)": {
        "notice": "Distributes the market earning for a market to the each bins."
      },
      "flashLoan(address,uint256,address,bytes)": {
        "notice": "Executes a flash loan."
      },
      "getPendingBinShare(address,address,uint256)": {
        "notice": "Retrieves the pending share of earnings for a specific bin (subset) of funds in a market."
      },
      "onAddLiquidity(address,uint256)": {
        "notice": "Called when liquidity is added to the vault by a market contract."
      },
      "onClaimPosition(address,uint256,address,uint256,uint256)": {
        "notice": "Called when a position is claimed by a market contract."
      },
      "onOpenPosition(address,uint256,uint256,uint256,uint256)": {
        "notice": "Called when a position is opened by a market contract."
      },
      "onSettlePendingLiquidity(address,uint256,uint256)": {
        "notice": "Called when pending liquidity is settled in the vault by a market contract."
      },
      "onWithdrawLiquidity(address,address,uint256)": {
        "notice": "Called when liquidity is withdrawn from the vault by a market contract."
      },
      "transferKeeperFee(address,address,uint256,uint256)": {
        "notice": "Transfers the keeper fee from the market to the specified keeper."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/core/ChromaticVault.sol:ChromaticVault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9234,
        "contract": "contracts/core/ChromaticVault.sol:ChromaticVault",
        "label": "earningDistributor",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVaultEarningDistributor)18315"
      },
      {
        "astId": 9238,
        "contract": "contracts/core/ChromaticVault.sol:ChromaticVault",
        "label": "makerBalances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9242,
        "contract": "contracts/core/ChromaticVault.sol:ChromaticVault",
        "label": "takerBalances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9246,
        "contract": "contracts/core/ChromaticVault.sol:ChromaticVault",
        "label": "makerMarketBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9250,
        "contract": "contracts/core/ChromaticVault.sol:ChromaticVault",
        "label": "takerMarketBalances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9254,
        "contract": "contracts/core/ChromaticVault.sol:ChromaticVault",
        "label": "pendingMakerEarnings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9258,
        "contract": "contracts/core/ChromaticVault.sol:ChromaticVault",
        "label": "pendingMarketEarnings",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9262,
        "contract": "contracts/core/ChromaticVault.sol:ChromaticVault",
        "label": "pendingDeposits",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9266,
        "contract": "contracts/core/ChromaticVault.sol:ChromaticVault",
        "label": "pendingWithdrawals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultEarningDistributor)18315": {
        "encoding": "inplace",
        "label": "contract IVaultEarningDistributor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}