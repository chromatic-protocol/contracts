{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/IERC1155.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/extensions/IERC1155MetadataURI.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/IERC20Metadata.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "contracts/core/automation/mate2/IMate2Automation1_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nenum ExtraModule {\n    None,\n    Echo, // for debugging\n    Pyth\n}\n\nstruct PythOffchainPrice {\n    uint256 publishTime;\n    int64 price;\n    int32 expo;\n    bytes vaa;\n}\n\ninterface IMate2Automation1_1 {\n    event catchErr(string _name, string _err);\n    /**\n     * @notice method that is simulated by the keepers to see if any work actually\n     * needs to be performed. This method does does not actually need to be\n     * executable, and since it is only ever simulated it can consume lots of gas.\n     * @dev To ensure that it is never called, you may want to add the\n     * cannotExecute modifier from KeeperBase to your implementation of this\n     * method.\n     * @param checkData specified in the upkeep registration so it is always the\n     * same for a registered upkeep. This can easily be broken down into specific\n     * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n     * same contract and easily differentiated by the contract.\n     * @param extraData passed by keeper for passing offchain data\n     * @return upkeepNeeded boolean to indicate whether the keeper should call\n     * performUpkeep or not.\n     * @return performData bytes that the keeper should call performUpkeep with, if\n     * upkeep is needed. If you would like to encode data to decode later, try\n     * `abi.encode`.\n     */\n    function checkUpkeep(\n        bytes calldata checkData,\n        bytes calldata extraData\n    ) external view returns (bool upkeepNeeded, bytes memory performData);\n\n    /**\n     * @notice method that is actually executed by the keepers, via the registry.\n     * The data returned by the checkUpkeep simulation will be passed into\n     * this method to actually be executed.\n     * @dev The input to this method should not be trusted, and the caller of the\n     * method should not even be restricted to any single registry. Anyone should\n     * be able call it, and the input should be validated, there is no guarantee\n     * that the data passed in is the performData returned from checkUpkeep. This\n     * could happen due to malicious keepers, racing keepers, or simply a state\n     * change while the performUpkeep transaction is waiting for confirmation.\n     * Always validate the data passed in.\n     * @param performData is the data which was passed back from the checkData\n     * simulation. If it is encoded, it can easily be decoded into other types by\n     * calling `abi.decode`. This data should not be trusted, and should be\n     * validated against the contract's current state.\n     */\n    function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/core/automation/mate2/IMate2AutomationRegistry1_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {ExtraModule} from \"./IMate2Automation1_1.sol\";\n\nstruct ExtraData {\n    ExtraModule extraModule;\n    bytes extraParam;\n}\n\ninterface IMate2AutomationRegistry1_1 {\n    // function getUpkeepAdmin(address target) external returns (address admin);\n    function registerUpkeep(\n        address target,\n        uint32 gasLimit,\n        address admin,\n        bool useTreasury,\n        bool singleExec,\n        bytes calldata checkData,\n        ExtraModule extraModule,\n        bytes calldata extraParam\n    ) external returns (uint256 id);\n\n    function cancelUpkeep(uint256 id) external;\n\n    function pauseUpkeep(uint256 id) external;\n\n    function unpauseUpkeep(uint256 id) external;\n\n    function transferUpkeepAdmin(uint256 id, address proposed) external;\n\n    function updateCheckData(uint256 id, bytes calldata newCheckData) external;\n\n    function getUpkeep(\n        uint256 id\n    )\n        external\n        view\n        returns (\n            address target,\n            uint32 executeGas,\n            bytes memory checkData,\n            ExtraData memory extraData, // to avoid stack too deep\n            address lastKeeper,\n            address admin,\n            uint64 maxValidBlocknumber,\n            uint256 amountSpent,\n            bool[3] memory flags // [bool useTreasury, bool singleExec, bool paused]\n        );\n\n    function getUpkeepTreasury() external view returns (address);\n\n    function checkUpkeep(\n        uint256 upkeepId,\n        address from,\n        bytes calldata extraData\n    ) external view returns (bytes memory performData, uint256 maxPayment, uint256 gasLimit);\n\n    function getPerformUpkeepFee() external view returns (uint256 fee);\n\n    function addWhitelistedRegistrar(address registrar) external;\n\n    function removeWhitelistedRegistrar(address registrar) external;\n}\n"
    },
    "contracts/core/automation/mate2/IUpkeepTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IUpkeepTreasury {\n    function userBalance(address owner) external view returns (uint256);\n\n    function useFunds(uint256 _amount, address _user) external;\n\n    function depositFunds(address _receiver) external payable;\n\n    function withdrawFunds(address payable _receiver, uint256 _amount) external;\n}\n"
    },
    "contracts/core/automation/Mate2MarketSettlement.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IChromaticMarketFactory} from \"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\";\nimport {IChromaticMarket} from \"@chromatic-protocol/contracts/core/interfaces/IChromaticMarket.sol\";\nimport {IOracleProvider} from \"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\";\nimport {IOracleProviderPullBased} from \"@chromatic-protocol/contracts/oracle/interfaces/IOracleProviderPullBased.sol\";\nimport {IMarketSettlement} from \"@chromatic-protocol/contracts/core/interfaces/IMarketSettlement.sol\";\nimport {IMate2Automation1_1} from \"@chromatic-protocol/contracts/core/automation/mate2/IMate2Automation1_1.sol\";\nimport {IMate2AutomationRegistry1_1, ExtraModule} from \"@chromatic-protocol/contracts/core/automation/mate2/IMate2AutomationRegistry1_1.sol\";\nimport {IUpkeepTreasury} from \"@chromatic-protocol/contracts/core/automation/mate2/IUpkeepTreasury.sol\";\nimport {CLBTokenLib} from \"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\";\nimport {FEE_RATES_LENGTH} from \"@chromatic-protocol/contracts/core/libraries/Constants.sol\";\nimport {PendingPosition, ClosingPosition, PendingLiquidity} from \"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\";\nimport {OracleProviderLib} from \"@chromatic-protocol/contracts/oracle/libraries/OracleProviderLib.sol\";\n\ncontract Mate2MarketSettlement is IMarketSettlement, IMate2Automation1_1 {\n    uint32 public constant DEFAULT_UPKEEP_GAS_LIMIT = 2e7;\n\n    IChromaticMarketFactory public immutable factory;\n    IMate2AutomationRegistry1_1 public immutable automate;\n\n    uint32 public upkeepGasLimit;\n    mapping(address => uint256) public marketSettlementUpkeepIds; // market => upkeep id\n\n    event UpkeepGasLimitUpdated(uint32 gasLimitOld, uint32 gasLimitNew);\n\n    /**\n     * @dev Throws an error indicating that the caller is not the DAO.\n     */\n    error OnlyAccessableByDao();\n\n    /**\n     * @dev Throws an error indicating that the caller is neither the chromatic factory contract nor the DAO.\n     */\n    error OnlyAccessableByFactoryOrDao();\n\n    /**\n     * @dev Throws an error indicating that a market settlement task already exists.\n     */\n    error ExistMarketSettlementTask();\n\n    /**\n     * @dev Throws an error indicating that the keeper fee is insufficient\n     */\n    error InsufficientKeeperFee();\n\n    /**\n     * @dev Throws an error indicating that the payment of the keeper fee has failed.\n     */\n    error PayKeeperFeeFailed();\n\n    /**\n     * @dev Throws an error indicating that the transfer of Ether has failed.\n     */\n    error EthTransferFailed();\n\n    /**\n     * @dev Modifier to restrict access to only the DAO.\n     *      Throws an `OnlyAccessableByDao` error if the caller is not the DAO.\n     */\n    modifier onlyDao() {\n        if (msg.sender != factory.dao()) revert OnlyAccessableByDao();\n        _;\n    }\n\n    /**\n     * @dev Modifier to restrict access to only the factory or the DAO.\n     *      Throws an `OnlyAccessableByFactoryOrDao` error if the caller is neither the chromatic factory contract nor the DAO.\n     */\n    modifier onlyFactoryOrDao() {\n        if (msg.sender != address(factory) && msg.sender != factory.dao())\n            revert OnlyAccessableByFactoryOrDao();\n        _;\n    }\n\n    constructor(IChromaticMarketFactory _factory, address _automate) {\n        factory = _factory;\n        automate = IMate2AutomationRegistry1_1(_automate);\n        upkeepGasLimit = DEFAULT_UPKEEP_GAS_LIMIT;\n    }\n\n    /**\n     * @inheritdoc IMate2Automation1_1\n     */\n    function checkUpkeep(\n        bytes calldata checkData,\n        bytes calldata extraData\n    ) external view returns (bool upkeepNeeded, bytes memory performData) {\n        address market = abi.decode(checkData, (address));\n        return resolveSettlement(market, extraData);\n    }\n\n    /**\n     * @inheritdoc IMate2Automation1_1\n     */\n    function performUpkeep(bytes calldata performData) external {\n        _payKeeperFee();\n        (address market, bytes memory extraData) = abi.decode(performData, (address, bytes));\n        updatePrice(market, extraData);\n        // settle(market);\n    }\n\n    /**\n     * @inheritdoc IMarketSettlement\n     * @dev This function can only be called by the Chromatic factory contract or the DAO.\n     *      Throws an `ExistMarketSettlementTask` error if a market earning distribution task already exists for the market.\n     */\n    function createSettlementTask(address market) external override onlyFactoryOrDao {\n        if (marketSettlementUpkeepIds[market] != 0) revert ExistMarketSettlementTask();\n\n        IOracleProvider oracleProvider = IChromaticMarket(market).oracleProvider();\n\n        if (!OracleProviderLib.isPullBased(oracleProvider)) {\n            return;\n        }\n\n        IOracleProviderPullBased pullBasedOracle = IOracleProviderPullBased(\n            address(oracleProvider)\n        );\n\n        automate.registerUpkeep(\n            address(this),\n            upkeepGasLimit,\n            address(this), // address admin,\n            false, // bool useTreasury,\n            false, // bool singleExec,\n            abi.encode(market),\n            pullBasedOracle.extraModule(),\n            pullBasedOracle.extraParam()\n        );\n    }\n\n    /**\n     * @inheritdoc IMarketSettlement\n     */\n    function cancelSettlementTask(address market) external override onlyFactoryOrDao {\n        uint256 upkeepId = marketSettlementUpkeepIds[market];\n        if (upkeepId != 0) {\n            delete marketSettlementUpkeepIds[market];\n            try automate.cancelUpkeep(upkeepId) {} catch Error(string memory reason) {\n                //slither-disable-next-line reentrancy-events\n                emit catchErr(\"cancelUpkeep\", reason);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IMarketSettlement\n     */\n    function resolveSettlement(\n        address market,\n        bytes calldata extraData\n    ) public view override returns (bool canExec, bytes memory execPayload) {\n        int16[] memory feeRates = _feeRates();\n        IOracleProvider.OracleVersion memory currentOracleVersion = IChromaticMarket(market)\n            .oracleProvider()\n            .currentVersion();\n\n        PendingPosition[] memory pendingPositions = IChromaticMarket(market).pendingPositionBatch(\n            feeRates\n        );\n        for (uint256 i; i < pendingPositions.length; ) {\n            PendingPosition memory _pos = pendingPositions[i];\n            if (_pos.openVersion != 0 && _pos.openVersion < currentOracleVersion.version) {\n                return (true, abi.encode(market, extraData));\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        ClosingPosition[] memory closingPositions = IChromaticMarket(market).closingPositionBatch(\n            feeRates\n        );\n        for (uint256 i; i < closingPositions.length; ) {\n            ClosingPosition memory _pos = closingPositions[i];\n            if (_pos.closeVersion != 0 && _pos.closeVersion < currentOracleVersion.version) {\n                return (true, abi.encode(market, extraData));\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        PendingLiquidity[] memory pendingLiquidities = IChromaticMarket(market)\n            .pendingLiquidityBatch(feeRates);\n        for (uint256 i; i < pendingLiquidities.length; ) {\n            PendingLiquidity memory _liq = pendingLiquidities[i];\n            if (_liq.oracleVersion != 0 && _liq.oracleVersion < currentOracleVersion.version) {\n                return (true, abi.encode(market, extraData));\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (false, \"\");\n    }\n\n    /**\n     * @inheritdoc IMarketSettlement\n     */\n    function settle(address market) public override {\n        IChromaticMarket(market).settleAll();\n    }\n\n    function _feeRates() private pure returns (int16[] memory rates) {\n        rates = new int16[](FEE_RATES_LENGTH * 2);\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\n        for (uint i; i < FEE_RATES_LENGTH; ) {\n            rates[i] = int16(_tradingFeeRates[i]);\n            rates[i + FEE_RATES_LENGTH] = -int16(_tradingFeeRates[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // for management\n    function balanceOfUpkeepTreasury() external view returns (uint256) {\n        IUpkeepTreasury treasury = IUpkeepTreasury(automate.getUpkeepTreasury());\n        return treasury.userBalance(address(this));\n    }\n\n    function withdrawUpkeepTreasuryFunds(\n        address payable _receiver,\n        uint256 _amount\n    ) external onlyDao {\n        IUpkeepTreasury treasury = IUpkeepTreasury(automate.getUpkeepTreasury());\n        treasury.withdrawFunds(_receiver, _amount);\n    }\n\n    function cancelUpkeep(uint256 upkeepId) external onlyDao {\n        automate.cancelUpkeep(upkeepId);\n    }\n\n    function updateUpkeepGasLimit(uint32 gasLimit) external onlyDao {\n        uint32 gasLimitOld = upkeepGasLimit;\n        upkeepGasLimit = gasLimit;\n        emit UpkeepGasLimitUpdated(gasLimitOld, gasLimit);\n    }\n\n    /**\n     * @inheritdoc IMarketSettlement\n     */\n    function updatePrice(address market, bytes memory extraData) public override {\n        IOracleProvider oracleProvider = IChromaticMarket(market).oracleProvider();\n\n        if (OracleProviderLib.isPullBased(oracleProvider)) {\n            IOracleProviderPullBased pullBasedOracle = IOracleProviderPullBased(\n                address(oracleProvider)\n            );\n            uint256 fee = pullBasedOracle.getUpdateFee(extraData);\n            pullBasedOracle.updatePrice{value: fee}(extraData);\n            pullBasedOracle.sync();\n        }\n    }\n\n    function _payKeeperFee() private {\n        uint256 keeperFee = automate.getPerformUpkeepFee();\n        if (address(this).balance < keeperFee) revert InsufficientKeeperFee();\n        (bool success, ) = address(automate).call{value: keeperFee}(\"\");\n        if (!success) revert PayKeeperFeeFailed();\n    }\n\n    /**\n     * @dev Fallback function to receive ETH payments.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev Fallback function to receive ETH payments.\n     */\n    fallback() external payable {}\n\n    /**\n     * @inheritdoc IMarketSettlement\n     */\n    function withdraw(address recipient, uint256 amount) external override onlyDao {\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) revert EthTransferFailed();\n    }\n}\n"
    },
    "contracts/core/interfaces/factory/IMarketDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title An interface for a contract that is capable of deploying Chromatic markets\n * @notice A contract that constructs a market must implement this to pass arguments to the market\n * @dev This is used to avoid having constructor arguments in the market contract, which results in the init code hash\n * of the market being constant allowing the CREATE2 address of the market to be cheaply computed on-chain\n */\ninterface IMarketDeployer {\n    /**\n     * @notice Get the parameters to be used in constructing the market, set transiently during market creation.\n     * @dev Called by the market constructor to fetch the parameters of the market\n     * Returns underlyingAsset The underlying asset of the market\n     * Returns settlementToken The settlement token of the market\n     * Returns protocolFeeRate The protocol fee rate of the market\n     * Returns vPoolCapacity Capacity of virtual future pool\n     * Returns vPoolA Amplification coefficient of virtual future pool, precise value\n     */\n    function parameters()\n        external\n        view\n        returns (address oracleProvider, address settlementToken, uint16 protocolFeeRate);\n}\n"
    },
    "contracts/core/interfaces/factory/IOracleProviderRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {OracleProviderProperties} from \"@chromatic-protocol/contracts/core/libraries/registry/OracleProviderProperties.sol\";\n\n/**\n * @title IOracleProviderRegistry\n * @dev Interface for the Oracle Provider Registry contract.\n */\ninterface IOracleProviderRegistry {\n    /**\n     * @dev Emitted when a new oracle provider is registered.\n     * @param oracleProvider The address of the registered oracle provider.\n     * @param properties The properties of the registered oracle provider.\n     */\n    event OracleProviderRegistered(\n        address indexed oracleProvider,\n        OracleProviderProperties properties\n    );\n\n    /**\n     * @dev Emitted when an oracle provider is unregistered.\n     * @param oracleProvider The address of the unregistered oracle provider.\n     */\n    event OracleProviderUnregistered(address indexed oracleProvider);\n\n    /**\n     * @dev Emitted when the take-profit basis points range of an oracle provider is updated.\n     * @param oracleProvider The address of the oracle provider.\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\n     */\n    event UpdateTakeProfitBPSRange(\n        address indexed oracleProvider,\n        uint32 indexed minTakeProfitBPS,\n        uint32 indexed maxTakeProfitBPS\n    );\n\n    /**\n     * @dev Emitted when the level of an oracle provider is set.\n     * @param oracleProvider The address of the oracle provider.\n     * @param level The new level set for the oracle provider.\n     */\n    event UpdateLeverageLevel(address indexed oracleProvider, uint8 indexed level);\n\n    /**\n     * @notice Registers an oracle provider.\n     * @param oracleProvider The address of the oracle provider to register.\n     * @param properties The properties of the oracle provider.\n     */\n    function registerOracleProvider(\n        address oracleProvider,\n        OracleProviderProperties memory properties\n    ) external;\n\n    /**\n     * @notice Unregisters an oracle provider.\n     * @param oracleProvider The address of the oracle provider to unregister.\n     */\n    function unregisterOracleProvider(address oracleProvider) external;\n\n    /**\n     * @notice Gets the registered oracle providers.\n     * @return An array of registered oracle provider addresses.\n     */\n    function registeredOracleProviders() external view returns (address[] memory);\n\n    /**\n     * @notice Checks if an oracle provider is registered.\n     * @param oracleProvider The address of the oracle provider to check.\n     * @return A boolean indicating if the oracle provider is registered.\n     */\n    function isRegisteredOracleProvider(address oracleProvider) external view returns (bool);\n\n    /**\n     * @notice Retrieves the properties of an oracle provider.\n     * @param oracleProvider The address of the oracle provider.\n     * @return The properties of the oracle provider.\n     */\n    function getOracleProviderProperties(\n        address oracleProvider\n    ) external view returns (OracleProviderProperties memory);\n\n    /**\n     * @notice Updates the take-profit basis points range of an oracle provider.\n     * @param oracleProvider The address of the oracle provider.\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\n     */\n    function updateTakeProfitBPSRange(\n        address oracleProvider,\n        uint32 minTakeProfitBPS,\n        uint32 maxTakeProfitBPS\n    ) external;\n\n    /**\n     * @notice Updates the leverage level of an oracle provider in the registry.\n     * @dev The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\n     * @param oracleProvider The address of the oracle provider.\n     * @param level The new leverage level to be set for the oracle provider.\n     */\n    function updateLeverageLevel(address oracleProvider, uint8 level) external;\n}\n"
    },
    "contracts/core/interfaces/factory/ISettlementTokenRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {InterestRate} from \"@chromatic-protocol/contracts/core/libraries/InterestRate.sol\";\n\n/**\n * @title ISettlementTokenRegistry\n * @dev Interface for the Settlement Token Registry contract.\n */\ninterface ISettlementTokenRegistry {\n    /**\n     * @dev Emitted when a new settlement token is registered.\n     * @param token The address of the registered settlement token.\n     * @param oracleProvider The oracle provider address for the settlement token.\n     * @param minimumMargin The minimum margin for the markets using this settlement token.\n     * @param interestRate The interest rate for the settlement token.\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\n     */\n    event SettlementTokenRegistered(\n        address indexed token,\n        address indexed oracleProvider,\n        uint256 minimumMargin,\n        uint256 interestRate,\n        uint256 flashLoanFeeRate,\n        uint256 earningDistributionThreshold,\n        uint24 uniswapFeeTier\n    );\n\n    /**\n     * @dev Emitted when the oracle provider address for a settlement token is set.\n     * @param token The address of the settlement token.\n     * @param oracleProvider The oracle provider address for the settlement token.\n     */\n    event SetSettlementTokenOracleProvider(address indexed token, address indexed oracleProvider);\n\n    /**\n     * @dev Emitted when the minimum margin for a settlement token is set.\n     * @param token The address of the settlement token.\n     * @param minimumMargin The new minimum margin for the settlement token.\n     */\n    event SetMinimumMargin(address indexed token, uint256 indexed minimumMargin);\n\n    /**\n     * @dev Emitted when the flash loan fee rate for a settlement token is set.\n     * @param token The address of the settlement token.\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\n     */\n    event SetFlashLoanFeeRate(address indexed token, uint256 indexed flashLoanFeeRate);\n\n    /**\n     * @dev Emitted when the earning distribution threshold for a settlement token is set.\n     * @param token The address of the settlement token.\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\n     */\n    event SetEarningDistributionThreshold(\n        address indexed token,\n        uint256 indexed earningDistributionThreshold\n    );\n\n    /**\n     * @dev Emitted when the Uniswap fee tier for a settlement token is set.\n     * @param token The address of the settlement token.\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\n     */\n    event SetUniswapFeeTier(address indexed token, uint24 indexed uniswapFeeTier);\n\n    /**\n     * @dev Emitted when an interest rate record is appended for a settlement token.\n     * @param token The address of the settlement token.\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\n     * @param beginTimestamp The timestamp when the interest rate record begins.\n     */\n    event InterestRateRecordAppended(\n        address indexed token,\n        uint256 indexed annualRateBPS,\n        uint256 indexed beginTimestamp\n    );\n\n    /**\n     * @dev Emitted when the last interest rate record is removed for a settlement token.\n     * @param token The address of the settlement token.\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\n     * @param beginTimestamp The timestamp when the interest rate record begins.\n     */\n    event LastInterestRateRecordRemoved(\n        address indexed token,\n        uint256 indexed annualRateBPS,\n        uint256 indexed beginTimestamp\n    );\n\n    /**\n     * @notice Registers a new settlement token.\n     * @param token The address of the settlement token to register.\n     * @param oracleProvider The oracle provider address for the settlement token.\n     * @param minimumMargin The minimum margin for the settlement token.\n     * @param interestRate The interest rate for the settlement token.\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\n     */\n    function registerSettlementToken(\n        address token,\n        address oracleProvider,\n        uint256 minimumMargin,\n        uint256 interestRate,\n        uint256 flashLoanFeeRate,\n        uint256 earningDistributionThreshold,\n        uint24 uniswapFeeTier\n    ) external;\n\n    /**\n     * @notice Gets the list of registered settlement tokens.\n     * @return An array of addresses representing the registered settlement tokens.\n     */\n    function registeredSettlementTokens() external view returns (address[] memory);\n\n    /**\n     * @notice Checks if a settlement token is registered.\n     * @param token The address of the settlement token to check.\n     * @return True if the settlement token is registered, false otherwise.\n     */\n    function isRegisteredSettlementToken(address token) external view returns (bool);\n\n    /**\n     * @notice Gets the oracle provider address for a settlement token.\n     * @param token The address of the settlement token.\n     * @return The oracle provider address for the settlement token.\n     */\n    function getSettlementTokenOracleProvider(address token) external view returns (address);\n\n    /**\n     * @notice Sets the oracle provider address for a settlement token.\n     * @param token The address of the settlement token.\n     * @param oracleProvider The new oracle provider address for the settlement token.\n     */\n    function setSettlementTokenOracleProvider(address token, address oracleProvider) external;\n\n    /**\n     * @notice Gets the minimum margin for a settlement token.\n     * @dev The minimumMargin is used as the minimum value for the taker margin of a position\n     *      or as the minimum value for the maker margin of each bin.\n     * @param token The address of the settlement token.\n     * @return The minimum margin for the settlement token.\n     */\n    function getMinimumMargin(address token) external view returns (uint256);\n\n    /**\n     * @notice Sets the minimum margin for a settlement token.\n     * @param token The address of the settlement token.\n     * @param minimumMargin The new minimum margin for the settlement token.\n     */\n    function setMinimumMargin(address token, uint256 minimumMargin) external;\n\n    /**\n     * @notice Gets the flash loan fee rate for a settlement token.\n     * @param token The address of the settlement token.\n     * @return The flash loan fee rate for the settlement token.\n     */\n    function getFlashLoanFeeRate(address token) external view returns (uint256);\n\n    /**\n     * @notice Sets the flash loan fee rate for a settlement token.\n     * @param token The address of the settlement token.\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\n     */\n    function setFlashLoanFeeRate(address token, uint256 flashLoanFeeRate) external;\n\n    /**\n     * @notice Gets the earning distribution threshold for a settlement token.\n     * @param token The address of the settlement token.\n     * @return The earning distribution threshold for the settlement token.\n     */\n    function getEarningDistributionThreshold(address token) external view returns (uint256);\n\n    /**\n     * @notice Sets the earning distribution threshold for a settlement token.\n     * @param token The address of the settlement token.\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\n     */\n    function setEarningDistributionThreshold(\n        address token,\n        uint256 earningDistributionThreshold\n    ) external;\n\n    /**\n     * @notice Gets the Uniswap fee tier for a settlement token.\n     * @param token The address of the settlement token.\n     * @return The Uniswap fee tier for the settlement token.\n     */\n    function getUniswapFeeTier(address token) external view returns (uint24);\n\n    /**\n     * @notice Sets the Uniswap fee tier for a settlement token.\n     * @param token The address of the settlement token.\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\n     */\n    function setUniswapFeeTier(address token, uint24 uniswapFeeTier) external;\n\n    /**\n     * @notice Appends an interest rate record for a settlement token.\n     * @param token The address of the settlement token.\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\n     * @param beginTimestamp The timestamp when the interest rate record begins.\n     */\n    function appendInterestRateRecord(\n        address token,\n        uint256 annualRateBPS,\n        uint256 beginTimestamp\n    ) external;\n\n    /**\n     * @notice Removes the last interest rate record for a settlement token.\n     * @param token The address of the settlement token.\n     */\n    function removeLastInterestRateRecord(address token) external;\n\n    /**\n     * @notice Gets the current interest rate for a settlement token.\n     * @param token The address of the settlement token.\n     * @return The current interest rate for the settlement token.\n     */\n    function currentInterestRate(address token) external view returns (uint256);\n\n    /**\n     * @notice Gets all the interest rate records for a settlement token.\n     * @param token The address of the settlement token.\n     * @return An array of interest rate records for the settlement token.\n     */\n    function getInterestRateRecords(\n        address token\n    ) external view returns (InterestRate.Record[] memory);\n}\n"
    },
    "contracts/core/interfaces/IChromaticMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IMarketTradeOpenPosition} from \"@chromatic-protocol/contracts/core/interfaces/market/IMarketTradeOpenPosition.sol\";\nimport {IMarketTradeClosePosition} from \"@chromatic-protocol/contracts/core/interfaces/market/IMarketTradeClosePosition.sol\";\nimport {IMarketLiquidity} from \"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidity.sol\";\nimport {IMarketLens} from \"@chromatic-protocol/contracts/core/interfaces/market/IMarketLens.sol\";\nimport {IMarketState} from \"@chromatic-protocol/contracts/core/interfaces/market/IMarketState.sol\";\nimport {IMarketLiquidate} from \"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidate.sol\";\nimport {IMarketSettle} from \"@chromatic-protocol/contracts/core/interfaces/market/IMarketSettle.sol\";\n\n/**\n * @title IChromaticMarket\n * @dev Interface for the Chromatic Market contract, which combines trade and liquidity functionalities.\n */\ninterface IChromaticMarket is\n    IMarketTradeOpenPosition,\n    IMarketTradeClosePosition,\n    IMarketLiquidity,\n    IMarketLens,\n    IMarketState,\n    IMarketLiquidate,\n    IMarketSettle\n{\n\n}\n"
    },
    "contracts/core/interfaces/IChromaticMarketFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IInterestCalculator} from \"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\";\nimport {IMarketDeployer} from \"@chromatic-protocol/contracts/core/interfaces/factory/IMarketDeployer.sol\";\nimport {ISettlementTokenRegistry} from \"@chromatic-protocol/contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\";\nimport {IOracleProviderRegistry} from \"@chromatic-protocol/contracts/core/interfaces/factory/IOracleProviderRegistry.sol\";\n\n/**\n * @title IChromaticMarketFactory\n * @dev Interface for the Chromatic Market Factory contract.\n */\ninterface IChromaticMarketFactory is\n    IMarketDeployer,\n    IOracleProviderRegistry,\n    ISettlementTokenRegistry,\n    IInterestCalculator\n{\n    /**\n     * @notice Emitted when the DAO address is updated.\n     * @param daoOld The old DAO address.\n     * @param daoNew The new DAO address.\n     */\n    event DaoUpdated(address indexed daoOld, address indexed daoNew);\n\n    /**\n     * @notice Emitted when the DAO treasury address is updated.\n     * @param treasuryOld The old DAO treasury address.\n     * @param treasuryNew The new DAO treasury address.\n     */\n    event TreasuryUpdated(address indexed treasuryOld, address indexed treasuryNew);\n\n    /**\n     * @notice Emitted when the liquidator address is updated.\n     * @param liquidatorOld The old liquidator address.\n     * @param liquidatorNew The new liquidator address.\n     */\n    event LiquidatorUpdated(address indexed liquidatorOld, address indexed liquidatorNew);\n\n    /**\n     * @notice Emitted when the keeper fee payer address is updated.\n     * @param keeperFeePayerOld The old keeper fee payer address.\n     * @param keeperFeePayerNew The new keeper fee payer address.\n     */\n    event KeeperFeePayerUpdated(\n        address indexed keeperFeePayerOld,\n        address indexed keeperFeePayerNew\n    );\n\n    /**\n     * @notice Emitted when the default protocol fee rate is updated.\n     * @param defaultProtocolFeeRateOld The old default protocol fee rate.\n     * @param defaultProtocolFeeRateNew The new default protocol fee rate.\n     */\n    event DefaultProtocolFeeRateUpdated(\n        uint16 indexed defaultProtocolFeeRateOld,\n        uint16 indexed defaultProtocolFeeRateNew\n    );\n\n    /**\n     * @notice Emitted when the vault address is set.\n     * @param vault The vault address.\n     */\n    event VaultSet(address indexed vault);\n\n    /**\n     * @notice Emitted when the market settlement task address is updated.\n     * @param marketSettlementOld The old market settlement task address.\n     * @param marketSettlementNew The new market settlement task address.\n     */\n    event MarketSettlementUpdated(\n        address indexed marketSettlementOld,\n        address indexed marketSettlementNew\n    );\n\n    /**\n     * @notice Emitted when a market is created.\n     * @param oracleProvider The address of the oracle provider.\n     * @param settlementToken The address of the settlement token.\n     * @param market The address of the created market.\n     */\n    event MarketCreated(\n        address indexed oracleProvider,\n        address indexed settlementToken,\n        address indexed market\n    );\n\n    /**\n     * @notice Returns the address of the DAO.\n     * @return The address of the DAO.\n     */\n    function dao() external view returns (address);\n\n    /**\n     * @notice Returns the address of the DAO treasury.\n     * @return The address of the DAO treasury.\n     */\n    function treasury() external view returns (address);\n\n    /**\n     * @notice Returns the address of the liquidator.\n     * @return The address of the liquidator.\n     */\n    function liquidator() external view returns (address);\n\n    /**\n     * @notice Returns the address of the vault.\n     * @return The address of the vault.\n     */\n    function vault() external view returns (address);\n\n    /**\n     * @notice Returns the address of the keeper fee payer.\n     * @return The address of the keeper fee payer.\n     */\n    function keeperFeePayer() external view returns (address);\n\n    /**\n     * @notice Returns the address of the market settlement task.\n     * @return The address of the market settlement task.\n     */\n    function marketSettlement() external view returns (address);\n\n    /**\n     * @notice Returns the default protocol fee rate.\n     * @return The default protocol fee rate.\n     */\n    function defaultProtocolFeeRate() external view returns (uint16);\n\n    /**\n     * @notice Updates the DAO address.\n     * @param _dao The new DAO address.\n     */\n    function updateDao(address _dao) external;\n\n    /**\n     * @notice Updates the DAO treasury address.\n     * @param _treasury The new DAO treasury address.\n     */\n    function updateTreasury(address _treasury) external;\n\n    /**\n     * @notice Updates the liquidator address.\n     * @param _liquidator The new liquidator address.\n     */\n    function updateLiquidator(address _liquidator) external;\n\n    /**\n     * @notice Updates the keeper fee payer address.\n     * @param _keeperFeePayer The new keeper fee payer address.\n     */\n    function updateKeeperFeePayer(address _keeperFeePayer) external;\n\n    /**\n     * @notice Updates the default protocl fee rate.\n     * @param _defaultProtocolFeeRate The new default protocol fee rate.\n     */\n    function updateDefaultProtocolFeeRate(uint16 _defaultProtocolFeeRate) external;\n\n    /**\n     * @notice Sets the vault address.\n     * @param _vault The vault address.\n     */\n    function setVault(address _vault) external;\n\n    /**\n     * @notice Updates the market settlement task address.\n     * @param _marketSettlement The new market settlement task address.\n     */\n    function updateMarketSettlement(address _marketSettlement) external;\n\n    /**\n     * @notice Returns an array of all market addresses.\n     * @return markets An array of all market addresses.\n     */\n    function getMarkets() external view returns (address[] memory markets);\n\n    /**\n     * @notice Returns an array of market addresses associated with a settlement token.\n     * @param settlementToken The address of the settlement token.\n     * @return An array of market addresses.\n     */\n    function getMarketsBySettlmentToken(\n        address settlementToken\n    ) external view returns (address[] memory);\n\n    /**\n     * @notice Returns the address of a market associated with an oracle provider and settlement token.\n     * @param oracleProvider The address of the oracle provider.\n     * @param settlementToken The address of the settlement token.\n     * @return The address of the market.\n     */\n    function getMarket(\n        address oracleProvider,\n        address settlementToken\n    ) external view returns (address);\n\n    /**\n     * @notice Creates a new market associated with an oracle provider and settlement token.\n     * @param oracleProvider The address of the oracle provider.\n     * @param settlementToken The address of the settlement token.\n     */\n    function createMarket(address oracleProvider, address settlementToken) external;\n\n    /**\n     * @notice Checks if a market is registered.\n     * @param market The address of the market.\n     * @return True if the market is registered, false otherwise.\n     */\n    function isRegisteredMarket(address market) external view returns (bool);\n}\n"
    },
    "contracts/core/interfaces/IChromaticVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {ILendingPool} from \"@chromatic-protocol/contracts/core/interfaces/vault/ILendingPool.sol\";\nimport {IVault} from \"@chromatic-protocol/contracts/core/interfaces/vault/IVault.sol\";\n\n/**\n * @title IChromaticVault\n * @notice Interface for the Chromatic Vault contract.\n */\ninterface IChromaticVault is IVault, ILendingPool {\n    /**\n     * @dev Emitted when market earning is accumulated.\n     * @param market The address of the market.\n     * @param earning The amount of earning accumulated.\n     */\n    event MarketEarningAccumulated(address indexed market, uint256 earning);\n\n    /**\n     * @dev Emitted when maker earning is distributed.\n     * @param token The address of the settlement token.\n     * @param earning The amount of earning distributed.\n     * @param usedKeeperFee The amount of keeper fee used.\n     */\n    event MakerEarningDistributed(\n        address indexed token,\n        uint256 indexed earning,\n        uint256 indexed usedKeeperFee\n    );\n\n    /**\n     * @dev Emitted when market earning is distributed.\n     * @param market The address of the market.\n     * @param earning The amount of earning distributed.\n     * @param usedKeeperFee The amount of keeper fee used.\n     * @param marketBalance The balance of the market.\n     */\n    event MarketEarningDistributed(\n        address indexed market,\n        uint256 indexed earning,\n        uint256 indexed usedKeeperFee,\n        uint256 marketBalance\n    );\n\n    /**\n     * @notice Emitted when the vault earning distributor address is set.\n     * @param vaultEarningDistributor The vault earning distributor address.\n     * @param oldVaultEarningDistributor The old vault earning distributor address.\n     */\n    event VaultEarningDistributorSet(\n        address indexed vaultEarningDistributor,\n        address indexed oldVaultEarningDistributor\n    );\n\n    function setVaultEarningDistributor(address _earningDistributor) external;\n\n    function pendingMakerEarnings(address token) external view returns (uint256);\n\n    function pendingMarketEarnings(address market) external view returns (uint256);\n\n    /**\n     * @notice Creates a maker earning distribution task for a token.\n     * @param token The address of the settlement token.\n     */\n    function createMakerEarningDistributionTask(address token) external;\n\n    /**\n     * @notice Cancels a maker earning distribution task for a token.\n     * @param token The address of the settlement token.\n     */\n    function cancelMakerEarningDistributionTask(address token) external;\n\n    /**\n     * @notice Distributes the maker earning for a token to the each markets.\n     * @param token The address of the settlement token.\n     * @param fee The keeper fee amount.\n     * @param keeper The keeper address to receive fee.\n     */\n    function distributeMakerEarning(address token, uint256 fee, address keeper) external;\n\n    /**\n     * @notice Creates a market earning distribution task for a market.\n     * @param market The address of the market.\n     */\n    function createMarketEarningDistributionTask(address market) external;\n\n    /**\n     * @notice Cancels a market earning distribution task for a market.\n     * @param market The address of the market.\n     */\n    function cancelMarketEarningDistributionTask(address market) external;\n\n    /**\n     * @notice Distributes the market earning for a market to the each bins.\n     * @param market The address of the market.\n     * @param fee The fee amount.\n     * @param keeper The keeper address to receive fee.\n     */\n    function distributeMarketEarning(address market, uint256 fee, address keeper) external;\n}\n"
    },
    "contracts/core/interfaces/ICLBToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IERC1155} from \"@openzeppelin/contracts/interfaces/IERC1155.sol\";\nimport {IERC1155MetadataURI} from \"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\";\n\n/**\n * @title ICLBToken\n * @dev Interface for CLBToken contract, which represents Liquidity Bin tokens.\n */\ninterface ICLBToken is IERC1155, IERC1155MetadataURI {\n    /**\n     * @dev Total amount of tokens in with a given id.\n     * @param id The token ID for which to retrieve the total supply.\n     * @return The total supply of tokens for the given token ID.\n     */\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    /**\n     * @dev Total amounts of tokens in with the given ids.\n     * @param ids The token IDs for which to retrieve the total supply.\n     * @return The total supples of tokens for the given token IDs.\n     */\n    function totalSupplyBatch(uint256[] memory ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Mints new tokens and assigns them to the specified address.\n     * @param to The address to which the minted tokens will be assigned.\n     * @param id The token ID to mint.\n     * @param amount The amount of tokens to mint.\n     * @param data Additional data to pass during the minting process.\n     */\n    function mint(address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Burns tokens from a specified address.\n     * @param from The address from which to burn tokens.\n     * @param id The token ID to burn.\n     * @param amount The amount of tokens to burn.\n     */\n    function burn(address from, uint256 id, uint256 amount) external;\n\n    /**\n     * @dev Retrieves the number of decimals used for token amounts.\n     * @return The number of decimals used for token amounts.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Retrieves the name of a token.\n     * @param id The token ID for which to retrieve the name.\n     * @return The name of the token.\n     */\n    function name(uint256 id) external view returns (string memory);\n\n    /**\n     * @dev Retrieves the description of a token.\n     * @param id The token ID for which to retrieve the description.\n     * @return The description of the token.\n     */\n    function description(uint256 id) external view returns (string memory);\n\n    /**\n     * @dev Retrieves the image URI of a token.\n     * @param id The token ID for which to retrieve the image URI.\n     * @return The image URI of the token.\n     */\n    function image(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/core/interfaces/IInterestCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title IInterestCalculator\n * @dev Interface for an interest calculator contract.\n */\ninterface IInterestCalculator {\n    /**\n     * @notice Calculates the interest accrued for a given token and amount within a specified time range.\n     * @param token The address of the token.\n     * @param amount The amount of the token.\n     * @param from The starting timestamp (inclusive) of the time range.\n     * @param to The ending timestamp (exclusive) of the time range.\n     * @return The accrued interest for the specified token and amount within the given time range.\n     */\n    function calculateInterest(\n        address token,\n        uint256 amount,\n        uint256 from, // timestamp (inclusive)\n        uint256 to // timestamp (exclusive)\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/core/interfaces/IMarketSettlement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title IMarketSettlement\n * @dev Interface for the Market settlement task contract.\n */\ninterface IMarketSettlement {\n    /**\n     * @notice Creates a settlement task for a given market.\n     * @param market The address of the chromatic market contract to be settled.\n     */\n    function createSettlementTask(address market) external;\n\n    /**\n     * @notice Cancels a settlement task for a given market.\n     * @param market The address of the chromatic market contract for which to cancel the settlement task.\n     */\n    function cancelSettlementTask(address market) external;\n\n    /**\n     * @notice Resolves the settlement of a market.\n     * @dev This function is called by the automation system.\n     * @param market The address of the market contract.\n     * @param extraData passed by keeper for passing offchain data\n     * @return canExec Whether the settlement can be executed.\n     * @return execPayload The encoded function call to execute the settlement.\n     */\n    function resolveSettlement(\n        address market,\n        bytes calldata extraData\n    ) external view returns (bool canExec, bytes memory execPayload);\n\n    /**\n     * @notice Settles a market.\n     * @param market The address of the market contract.\n     */\n    function settle(address market) external;\n\n    /**\n     * @notice Updates the price using off-chain data.\n     * @param market The address of the market contract.\n     * @param extraData passed by keeper for passing offchain data\n     */\n    function updatePrice(address market, bytes calldata extraData) external;\n\n    /**\n     * @notice Withdraws a specified amount of funds from the contract to a recipient address.\n     * @param recipient The address that will receive the withdrawn funds.\n     * @param amount The amount of funds to be withdrawn.\n     */\n    function withdraw(address recipient, uint256 amount) external;\n}\n"
    },
    "contracts/core/interfaces/market/IMarketLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {PendingPosition, ClosingPosition, PendingLiquidity, ClaimableLiquidity, LiquidityBinStatus} from \"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\";\nimport {LpReceipt} from \"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\";\nimport {Position} from \"@chromatic-protocol/contracts/core/libraries/Position.sol\";\n\n/**\n * @title IMarketLens\n * @dev The interface for liquidity information retrieval in a market.\n */\ninterface IMarketLens {\n    /**\n     * @dev Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.\n     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.\n     * @return amount The total liquidity amount for the specified trading fee rate.\n     */\n    function getBinLiquidity(int16 tradingFeeRate) external view returns (uint256 amount);\n\n    /**\n     * @dev Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.\n     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.\n     * @return amount The available (free) liquidity amount for the specified trading fee rate.\n     */\n    function getBinFreeLiquidity(int16 tradingFeeRate) external view returns (uint256 amount);\n\n    /**\n     * @dev Retrieves the values of a specific trading fee rate's bins in the liquidity pool.\n     *      The value of a bin represents the total valuation of the liquidity in the bin.\n     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.\n     * @return values The value list of the bins for the specified trading fee rates.\n     */\n    function getBinValues(\n        int16[] calldata tradingFeeRates\n    ) external view returns (uint256[] memory values);\n\n    /**\n     * @dev Retrieves the liquidity receipt with the given receipt ID.\n     *      It throws NotExistLpReceipt if the specified receipt ID does not exist.\n     * @param receiptId The ID of the liquidity receipt to retrieve.\n     * @return receipt The liquidity receipt with the specified ID.\n     */\n    function getLpReceipt(uint256 receiptId) external view returns (LpReceipt memory);\n\n    /**\n     * @dev Retrieves the liquidity receipts with the given receipt IDs.\n     *      It throws NotExistLpReceipt if the specified receipt ID does not exist.\n     * @param receiptIds The ID list of the liquidity receipt to retrieve.\n     * @return receipts The liquidity receipt list with the specified IDs.\n     */\n    function getLpReceipts(\n        uint256[] calldata receiptIds\n    ) external view returns (LpReceipt[] memory);\n\n    /**\n     * @dev Retrieves the pending liquidity information for a specific trading fee rate from the associated LiquidityPool.\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.\n     * @return pendingLiquidity An instance of PendingLiquidity representing the pending liquidity information.\n     */\n    function pendingLiquidity(int16 tradingFeeRate) external view returns (PendingLiquidity memory);\n\n    /**\n     * @dev Retrieves the pending liquidity information for multiple trading fee rates from the associated LiquidityPool.\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.\n     * @return pendingLiquidityBatch An array of PendingLiquidity instances representing the pending liquidity information for each trading fee rate.\n     */\n    function pendingLiquidityBatch(\n        int16[] calldata tradingFeeRates\n    ) external view returns (PendingLiquidity[] memory);\n\n    /**\n     * @dev Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.\n     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\n     * @return claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information.\n     */\n    function claimableLiquidity(\n        int16 tradingFeeRate,\n        uint256 oracleVersion\n    ) external view returns (ClaimableLiquidity memory);\n\n    /**\n     * @dev Retrieves the claimable liquidity information for multiple trading fee rates and a specific oracle version from the associated LiquidityPool.\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\n     * @return claimableLiquidityBatch An array of ClaimableLiquidity instances representing the claimable liquidity information for each trading fee rate.\n     */\n    function claimableLiquidityBatch(\n        int16[] calldata tradingFeeRates,\n        uint256 oracleVersion\n    ) external view returns (ClaimableLiquidity[] memory);\n\n    /**\n     * @dev Retrieves the liquidity bin statuses for the caller's liquidity pool.\n     * @return statuses An array of LiquidityBinStatus representing the liquidity bin statuses.\n     */\n    function liquidityBinStatuses() external view returns (LiquidityBinStatus[] memory);\n\n    /**\n     * @dev Retrieves the position with the given position ID.\n     *      It throws NotExistPosition if the specified position ID does not exist.\n     * @param positionId The ID of the position to retrieve.\n     * @return position The position with the specified ID.\n     */\n    function getPosition(uint256 positionId) external view returns (Position memory);\n\n    /**\n     * @dev Retrieves multiple positions by their IDs.\n     * @param positionIds The IDs of the positions to retrieve.\n     * @return positions An array of retrieved positions.\n     */\n    function getPositions(\n        uint256[] calldata positionIds\n    ) external view returns (Position[] memory positions);\n\n    /**\n     * @dev Retrieves the pending position information for a specific trading fee rate from the associated LiquidityPool.\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.\n     * @return pendingPosition An instance of PendingPosition representing the pending position information.\n     */\n    function pendingPosition(int16 tradingFeeRate) external view returns (PendingPosition memory);\n\n    /**\n     * @dev Retrieves the pending position information for multiple trading fee rates from the associated LiquidityPool.\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending position.\n     * @return pendingPositionBatch An array of PendingPosition instances representing the pending position information for each trading fee rate.\n     */\n    function pendingPositionBatch(\n        int16[] calldata tradingFeeRates\n    ) external view returns (PendingPosition[] memory);\n\n    /**\n     * @dev Retrieves the closing position information for a specific trading fee rate from the associated LiquidityPool.\n     * @param tradingFeeRate The trading fee rate for which to retrieve the closing position.\n     * @return closingPosition An instance of PendingPosition representing the closing position information.\n     */\n    function closingPosition(int16 tradingFeeRate) external view returns (ClosingPosition memory);\n\n    /**\n     * @dev Retrieves the closing position information for multiple trading fee rates from the associated LiquidityPool.\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the closing position.\n     * @return pendingPositionBatch An array of PendingPosition instances representing the closing position information for each trading fee rate.\n     */\n    function closingPositionBatch(\n        int16[] calldata tradingFeeRates\n    ) external view returns (ClosingPosition[] memory);\n}\n"
    },
    "contracts/core/interfaces/market/IMarketLiquidate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IOracleProvider} from \"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\";\n\n/**\n * @title IMarketLiquidate\n * @dev Interface for liquidating and claiming positions in a market.\n */\ninterface IMarketLiquidate {\n    /**\n     * @dev Checks if a position is eligible for liquidation.\n     * @param positionId The ID of the position to check.\n     * @return A boolean indicating if the position is eligible for liquidation.\n     */\n    function checkLiquidation(uint256 positionId) external view returns (bool);\n\n    /**\n     * @dev Checks if a position is eligible for liquidation.\n     * @param positionId The ID of the position to check.\n     * @param oracleVersion The oracle version data for liquidation check.\n     * @return A boolean indicating if the position is eligible for liquidation.\n     */\n    function checkLiquidationWithOracleVersion(\n        uint256 positionId,\n        IOracleProvider.OracleVersion memory oracleVersion\n    ) external view returns (bool);\n\n    /**\n     * @dev Liquidates a position.\n     * @param positionId The ID of the position to liquidate.\n     * @param keeper The address of the keeper performing the liquidation.\n     * @param keeperFee The native token amount of the keeper's fee.\n     */\n    function liquidate(uint256 positionId, address keeper, uint256 keeperFee) external;\n\n    /**\n     * @dev Checks if a position is eligible for claim.\n     * @param positionId The ID of the position to check.\n     * @return A boolean indicating if the position is eligible for claim.\n     */\n    function checkClaimPosition(uint256 positionId) external view returns (bool);\n\n    /**\n     * @dev Claims a closed position on behalf of a keeper.\n     * @param positionId The ID of the position to claim.\n     * @param keeper The address of the keeper claiming the position.\n     * @param keeperFee The native token amount of the keeper's fee.\n     */\n    function claimPosition(uint256 positionId, address keeper, uint256 keeperFee) external;\n}\n"
    },
    "contracts/core/interfaces/market/IMarketLiquidity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {LpReceipt} from \"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\";\n\n/**\n * @title IMarketLiquidity\n * @dev The interface for liquidity operations in a market.\n */\ninterface IMarketLiquidity {\n    /**\n     * @dev Adds liquidity to the market.\n     * @param recipient The address to receive the liquidity tokens.\n     * @param tradingFeeRate The trading fee rate for the liquidity.\n     * @param data Additional data for the liquidity callback.\n     * @return The liquidity receipt.\n     */\n    function addLiquidity(\n        address recipient,\n        int16 tradingFeeRate,\n        bytes calldata data\n    ) external returns (LpReceipt memory);\n\n    /**\n     * @notice Adds liquidity to multiple liquidity bins of the market in a batch.\n     * @param recipient The address of the recipient for each liquidity bin.\n     * @param tradingFeeRates An array of fee rates for each liquidity bin.\n     * @param amounts An array of amounts to add as liquidity for each bin.\n     * @param data Additional data for the liquidity callback.\n     * @return An array of LP receipts.\n     */\n    function addLiquidityBatch(\n        address recipient,\n        int16[] calldata tradingFeeRates,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external returns (LpReceipt[] memory);\n\n    /**\n     * @dev Claims liquidity from a liquidity receipt.\n     * @param receiptId The ID of the liquidity receipt.\n     * @param data Additional data for the liquidity callback.\n     */\n    function claimLiquidity(uint256 receiptId, bytes calldata data) external;\n\n    /**\n     * @dev Claims liquidity from a liquidity receipt.\n     * @param receiptIds The array of the liquidity receipt IDs.\n     * @param data Additional data for the liquidity callback.\n     */\n    function claimLiquidityBatch(uint256[] calldata receiptIds, bytes calldata data) external;\n\n    /**\n     * @dev Removes liquidity from the market.\n     * @param recipient The address to receive the removed liquidity.\n     * @param tradingFeeRate The trading fee rate for the liquidity.\n     * @param data Additional data for the liquidity callback.\n     * @return The liquidity receipt.\n     */\n    function removeLiquidity(\n        address recipient,\n        int16 tradingFeeRate,\n        bytes calldata data\n    ) external returns (LpReceipt memory);\n\n    /**\n     * @dev Removes liquidity from the market.\n     * @param recipient The address to receive the removed liquidity.\n     * @param tradingFeeRates An array of fee rates for each liquidity bin.\n     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.\n     * @param data Additional data for the liquidity callback.\n     * @return The liquidity receipt.\n     */\n    function removeLiquidityBatch(\n        address recipient,\n        int16[] calldata tradingFeeRates,\n        uint256[] calldata clbTokenAmounts,\n        bytes calldata data\n    ) external returns (LpReceipt[] memory);\n\n    /**\n     * @dev Withdraws liquidity from a liquidity receipt.\n     * @param receiptId The ID of the liquidity receipt.\n     * @param data Additional data for the liquidity callback.\n     */\n    function withdrawLiquidity(uint256 receiptId, bytes calldata data) external;\n\n    /**\n     * @dev Withdraws liquidity from a liquidity receipt.\n     * @param receiptIds The array of the liquidity receipt IDs.\n     * @param data Additional data for the liquidity callback.\n     */\n    function withdrawLiquidityBatch(uint256[] calldata receiptIds, bytes calldata data) external;\n\n    /**\n     * @dev Distributes earning to the liquidity bins.\n     * @param earning The amount of earning to distribute.\n     * @param marketBalance The balance of the market.\n     */\n    function distributeEarningToBins(uint256 earning, uint256 marketBalance) external;\n}\n"
    },
    "contracts/core/interfaces/market/IMarketSettle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title IMarketSettle\n * @dev Interface for market settlement.\n */\ninterface IMarketSettle {\n    /**\n     * @notice Executes the settlement process for the Chromatic market.\n     * @dev This function is called to settle the market.\n     * @param feeRates The feeRate list of liquidity bin to settle.\n     */\n    function settle(int16[] calldata feeRates) external;\n\n    /**\n     * @notice Executes the settlement process for the Chromatic market.\n     * @dev This function is called to settle the market.\n     */\n    function settleAll() external;\n}\n"
    },
    "contracts/core/interfaces/market/IMarketState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\";\nimport {PositionMode, LiquidityMode, DisplayMode} from \"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\";\nimport {IOracleProvider} from \"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\";\nimport {IChromaticMarketFactory} from \"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\";\nimport {IChromaticVault} from \"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\";\nimport {ICLBToken} from \"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\";\n\n/**\n * @title IMarketState\n * @dev Interface for accessing the state of a market contract.\n */\ninterface IMarketState {\n    /**\n     * @dev Returns the factory contract for the market.\n     * @return The factory contract.\n     */\n    function factory() external view returns (IChromaticMarketFactory);\n\n    /**\n     * @dev Returns the settlement token of the market.\n     * @return The settlement token.\n     */\n    function settlementToken() external view returns (IERC20Metadata);\n\n    /**\n     * @dev Returns the oracle provider contract for the market.\n     * @return The oracle provider contract.\n     */\n    function oracleProvider() external view returns (IOracleProvider);\n\n    /**\n     * @dev Returns the CLB token contract for the market.\n     * @return The CLB token contract.\n     */\n    function clbToken() external view returns (ICLBToken);\n\n    /**\n     * @dev Returns the vault contract for the market.\n     * @return The vault contract.\n     */\n    function vault() external view returns (IChromaticVault);\n\n    /**\n     * @notice Returns the protocol fee rate\n     * @return The protocol fee rate for the market\n     */\n    function protocolFeeRate() external view returns (uint16);\n\n    /**\n     * @notice Update the new protocol fee rate\n     * @param _protocolFeeRate new protocol fee rate for the market\n     */\n    function updateProtocolFeeRate(uint16 _protocolFeeRate) external;\n\n    /**\n     * @notice Returns the position mode\n     * @return The position mode for the market\n     */\n    function positionMode() external view returns (PositionMode);\n\n    /**\n     * @notice Update the new position mode\n     * @param _positionMode new position mode for the market\n     */\n    function updatePositionMode(PositionMode _positionMode) external;\n\n    /**\n     * @notice Returns the liquidity mode\n     * @return The liquidity mode for the market\n     */\n    function liquidityMode() external view returns (LiquidityMode);\n\n    /**\n     * @notice Update the new liquidity mode\n     * @param _liquidityMode new liquidity mode for the market\n     */\n    function updateLiquidityMode(LiquidityMode _liquidityMode) external;\n\n    /**\n     * @notice Returns the display mode\n     * @return The display mode for the market\n     */\n    function displayMode() external view returns (DisplayMode);\n\n    /**\n     * @notice Update the new display mode\n     * @param _displayMode new display mode for the market\n     */\n    function updateDisplayMode(DisplayMode _displayMode) external;\n}\n"
    },
    "contracts/core/interfaces/market/IMarketTradeClosePosition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {ClosePositionInfo} from \"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\";\n\n/**\n * @title IMarketTradeClosePosition\n * @dev Interface for closing and claiming positions in a market.\n */\ninterface IMarketTradeClosePosition {\n    /**\n     * @dev Closes a position in the market.\n     * @param positionId The ID of the position to close.\n     * @return The closed position.\n     */\n    function closePosition(uint256 positionId) external returns (ClosePositionInfo memory);\n\n    /**\n     * @dev Claims a closed position in the market.\n     * @param positionId The ID of the position to claim.\n     * @param recipient The address of the recipient of the claimed position.\n     * @param data Additional data for the claim callback.\n     */\n    function claimPosition(\n        uint256 positionId,\n        address recipient, // EOA or account contract\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/core/interfaces/market/IMarketTradeOpenPosition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {OpenPositionInfo} from \"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\";\n\n/**\n * @title IMarketTradeOpenPosition\n * @dev Interface for open positions in a market.\n */\ninterface IMarketTradeOpenPosition {\n    /**\n     * @dev Opens a new position in the market.\n     * @param qty The quantity of the position.\n     * @param takerMargin The margin amount provided by the taker.\n     * @param makerMargin The margin amount provided by the maker.\n     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.\n     * @param data Additional data for the position callback.\n     * @return The opened position.\n     */\n    function openPosition(\n        int256 qty,\n        uint256 takerMargin,\n        uint256 makerMargin,\n        uint256 maxAllowableTradingFee,\n        bytes calldata data\n    ) external returns (OpenPositionInfo memory);\n}\n"
    },
    "contracts/core/interfaces/market/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nbytes4 constant CLAIM_USER = \"UC\";\nbytes4 constant CLAIM_KEEPER = \"KC\";\nbytes4 constant CLAIM_TP = \"TP\";\nbytes4 constant CLAIM_SL = \"SL\";\n\nenum PositionMode {\n    Normal,\n    OpenDisabled,\n    CloseDisabled,\n    Suspended\n}\n\nenum LiquidityMode {\n    Normal,\n    AddDisabled,\n    RemoveDisabled,\n    Suspended\n}\n\nenum DisplayMode {\n    Normal,\n    Suspended,\n    Deprecating,\n    Deprecated\n}\n\n/**\n * @dev The OpenPositionInfo struct represents a opened trading position.\n * @param id The position identifier\n * @param openVersion The version of the oracle when the position was opened\n * @param qty The quantity of the position\n * @param openTimestamp The timestamp when the position was opened\n * @param takerMargin The amount of collateral that a trader must provide\n * @param makerMargin The margin amount provided by the maker.\n * @param tradingFee The trading fee associated with the position.\n */\nstruct OpenPositionInfo {\n    uint256 id;\n    uint256 openVersion;\n    int256 qty;\n    uint256 openTimestamp;\n    uint256 takerMargin;\n    uint256 makerMargin;\n    uint256 tradingFee;\n}\n\n/**\n * @dev The ClosePositionInfo struct represents a closed trading position.\n * @param id The position identifier\n * @param closeVersion The version of the oracle when the position was closed\n * @param closeTimestamp The timestamp when the position was closed\n */\nstruct ClosePositionInfo {\n    uint256 id;\n    uint256 closeVersion;\n    uint256 closeTimestamp;\n}\n\n/**\n * @dev The ClaimPositionInfo struct represents a claimed position information.\n * @param id The position identifier\n * @param entryPrice The entry price of the position\n * @param exitPrice The exit price of the position\n * @param realizedPnl The profit or loss of the claimed position.\n * @param interest The interest paid for the claimed position.\n * @param cause The description of being claimed.\n */\nstruct ClaimPositionInfo {\n    uint256 id;\n    uint256 entryPrice;\n    uint256 exitPrice;\n    int256 realizedPnl;\n    uint256 interest;\n    bytes4 cause;\n}\n\n/**\n * @dev Represents a pending position within the LiquidityBin\n * @param openVersion The oracle version when the position was opened.\n * @param totalQty The total quantity of the pending position.\n * @param totalMakerMargin The total maker margin of the pending position.\n * @param totalTakerMargin The total taker margin of the pending position.\n */\nstruct PendingPosition {\n    uint256 openVersion;\n    int256 totalQty;\n    uint256 totalMakerMargin;\n    uint256 totalTakerMargin;\n}\n\n/**\n * @dev Represents the closing position within an LiquidityBin.\n * @param closeVersion The oracle version when the position was closed.\n * @param totalQty The total quantity of the closing position.\n * @param totalEntryAmount The total entry amount of the closing position.\n * @param totalMakerMargin The total maker margin of the closing position.\n * @param totalTakerMargin The total taker margin of the closing position.\n */\nstruct ClosingPosition {\n    uint256 closeVersion;\n    int256 totalQty;\n    uint256 totalEntryAmount;\n    uint256 totalMakerMargin;\n    uint256 totalTakerMargin;\n}\n\n/**\n * @dev A struct representing pending liquidity information.\n * @param oracleVersion The oracle version of pending liqudity.\n * @param mintingTokenAmountRequested The amount of settlement tokens requested for minting.\n * @param burningCLBTokenAmountRequested The amount of CLB tokens requested for burning.\n */\nstruct PendingLiquidity {\n    uint256 oracleVersion;\n    uint256 mintingTokenAmountRequested;\n    uint256 burningCLBTokenAmountRequested;\n}\n\n/**\n * @dev A struct representing claimable liquidity information.\n * @param mintingTokenAmountRequested The amount of settlement tokens requested for minting.\n * @param mintingCLBTokenAmount The actual amount of CLB tokens minted.\n * @param burningCLBTokenAmountRequested The amount of CLB tokens requested for burning.\n * @param burningCLBTokenAmount The actual amount of CLB tokens burned.\n * @param burningTokenAmount The amount of settlement tokens equal in value to the burned CLB tokens.\n */\nstruct ClaimableLiquidity {\n    uint256 mintingTokenAmountRequested;\n    uint256 mintingCLBTokenAmount;\n    uint256 burningCLBTokenAmountRequested;\n    uint256 burningCLBTokenAmount;\n    uint256 burningTokenAmount;\n}\n\n/**\n * @dev A struct representing status of the liquidity bin.\n * @param liquidity The total liquidity amount in the bin\n * @param freeLiquidity The amount of free liquidity available in the bin.\n * @param binValue The current value of the bin.\n * @param tradingFeeRate The trading fee rate for the liquidity.\n */\nstruct LiquidityBinStatus {\n    uint256 liquidity;\n    uint256 freeLiquidity;\n    uint256 binValue;\n    int16 tradingFeeRate;\n}\n"
    },
    "contracts/core/interfaces/vault/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title ILendingPool\n * @dev Interface for a lending pool contract.\n */\ninterface ILendingPool {\n    /**\n     * @notice Emitted when a flash loan is executed.\n     * @param sender The address initiating the flash loan.\n     * @param recipient The address receiving the flash loan.\n     * @param amount The amount of the flash loan.\n     * @param paid The amount paid back after the flash loan.\n     * @param paidToTakerPool The amount paid to the taker pool after the flash loan.\n     * @param paidToMakerPool The amount paid to the maker pool after the flash loan.\n     */\n    event FlashLoan(\n        address indexed sender,\n        address indexed recipient,\n        uint256 indexed amount,\n        uint256 paid,\n        uint256 paidToTakerPool,\n        uint256 paidToMakerPool\n    );\n\n    /**\n     * @notice Executes a flash loan.\n     * @param token The address of the token for the flash loan.\n     * @param amount The amount of the flash loan.\n     * @param recipient The address to receive the flash loan.\n     * @param data Additional data for the flash loan.\n     */\n    function flashLoan(\n        address token,\n        uint256 amount,\n        address recipient,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @notice Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.\n     * @param market The address of the market.\n     * @param settlementToken The settlement token address.\n     * @param binBalance The balance of funds in the bin.\n     * @return The pending share of earnings for the specified bin.\n     */\n    function getPendingBinShare(\n        address market,\n        address settlementToken,\n        uint256 binBalance\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/core/interfaces/vault/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title IVault\n * @dev Interface for the Vault contract, responsible for managing positions and liquidity.\n */\ninterface IVault {\n    /**\n     * @notice Emitted when a position is opened.\n     * @param market The address of the market.\n     * @param positionId The ID of the opened position.\n     * @param takerMargin The margin amount provided by the taker for the position.\n     * @param tradingFee The trading fee associated with the position.\n     * @param protocolFee The protocol fee associated with the position.\n     */\n    event OnOpenPosition(\n        address indexed market,\n        uint256 indexed positionId,\n        uint256 indexed takerMargin,\n        uint256 tradingFee,\n        uint256 protocolFee\n    );\n\n    /**\n     * @notice Emitted when a position is claimed.\n     * @param market The address of the market.\n     * @param positionId The ID of the claimed position.\n     * @param recipient The address of the recipient of the settlement amount.\n     * @param takerMargin The margin amount provided by the taker for the position.\n     * @param settlementAmount The settlement amount received by the recipient.\n     */\n    event OnClaimPosition(\n        address indexed market,\n        uint256 indexed positionId,\n        address indexed recipient,\n        uint256 takerMargin,\n        uint256 settlementAmount\n    );\n\n    /**\n     * @notice Emitted when liquidity is added to the vault.\n     * @param market The address of the market.\n     * @param amount The amount of liquidity added.\n     */\n    event OnAddLiquidity(address indexed market, uint256 indexed amount);\n\n    /**\n     * @notice Emitted when pending liquidity is settled.\n     * @param market The address of the market.\n     * @param pendingDeposit The amount of pending deposit being settled.\n     * @param pendingWithdrawal The amount of pending withdrawal being settled.\n     */\n    event OnSettlePendingLiquidity(\n        address indexed market,\n        uint256 indexed pendingDeposit,\n        uint256 indexed pendingWithdrawal\n    );\n\n    /**\n     * @notice Emitted when liquidity is withdrawn from the vault.\n     * @param market The address of the market.\n     * @param amount The amount of liquidity withdrawn.\n     * @param recipient The address of the recipient of the withdrawn liquidity.\n     */\n    event OnWithdrawLiquidity(\n        address indexed market,\n        uint256 indexed amount,\n        address indexed recipient\n    );\n\n    /**\n     * @notice Emitted when the keeper fee is transferred.\n     * @param fee The amount of the transferred keeper fee as native token.\n     * @param amount The amount of settlement token to be used for paying keeper fee.\n     */\n    event TransferKeeperFee(uint256 indexed fee, uint256 indexed amount);\n\n    /**\n     * @notice Emitted when the keeper fee is transferred for a specific market.\n     * @param market The address of the market.\n     * @param fee The amount of the transferred keeper fee as native token.\n     * @param amount The amount of settlement token to be used for paying keeper fee.\n     */\n    event TransferKeeperFee(address indexed market, uint256 indexed fee, uint256 indexed amount);\n\n    /**\n     * @notice Emitted when the protocol fee is transferred for a specific position.\n     * @param market The address of the market.\n     * @param positionId The ID of the position.\n     * @param amount The amount of the transferred fee.\n     */\n    event TransferProtocolFee(\n        address indexed market,\n        uint256 indexed positionId,\n        uint256 indexed amount\n    );\n\n    /**\n     * @notice Called when a position is opened by a market contract.\n     * @param settlementToken The settlement token address.\n     * @param positionId The ID of the opened position.\n     * @param takerMargin The margin amount provided by the taker for the position.\n     * @param tradingFee The trading fee associated with the position.\n     * @param protocolFee The protocol fee associated with the position.\n     */\n    function onOpenPosition(\n        address settlementToken,\n        uint256 positionId,\n        uint256 takerMargin,\n        uint256 tradingFee,\n        uint256 protocolFee\n    ) external;\n\n    /**\n     * @notice Called when a position is claimed by a market contract.\n     * @param settlementToken The settlement token address.\n     * @param positionId The ID of the claimed position.\n     * @param recipient The address that will receive the settlement amount.\n     * @param takerMargin The margin amount provided by the taker for the position.\n     * @param settlementAmount The amount to be settled for the position.\n     */\n    function onClaimPosition(\n        address settlementToken,\n        uint256 positionId,\n        address recipient,\n        uint256 takerMargin,\n        uint256 settlementAmount\n    ) external;\n\n    /**\n     * @notice Called when liquidity is added to the vault by a market contract.\n     * @param settlementToken The settlement token address.\n     * @param amount The amount of liquidity being added.\n     */\n    function onAddLiquidity(address settlementToken, uint256 amount) external;\n\n    /**\n     * @notice Called when pending liquidity is settled in the vault by a market contract.\n     * @param settlementToken The settlement token address.\n     * @param pendingDeposit The amount of pending deposits being settled.\n     * @param pendingWithdrawal The amount of pending withdrawals being settled.\n     */\n    function onSettlePendingLiquidity(\n        address settlementToken,\n        uint256 pendingDeposit,\n        uint256 pendingWithdrawal\n    ) external;\n\n    /**\n     * @notice Called when liquidity is withdrawn from the vault by a market contract.\n     * @param settlementToken The settlement token address.\n     * @param recipient The address that will receive the withdrawn liquidity.\n     * @param amount The amount of liquidity to be withdrawn.\n     */\n    function onWithdrawLiquidity(\n        address settlementToken,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice Transfers the keeper fee from the market to the specified keeper.\n     * @param settlementToken The settlement token address.\n     * @param keeper The address of the keeper to receive the fee.\n     * @param fee The amount of the fee to transfer as native token.\n     * @param margin The margin amount used for the fee payment.\n     * @return usedFee The actual settlement token amount of fee used for the transfer.\n     */\n    function transferKeeperFee(\n        address settlementToken,\n        address keeper,\n        uint256 fee,\n        uint256 margin\n    ) external returns (uint256 usedFee);\n}\n"
    },
    "contracts/core/libraries/BinMargin.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @dev The BinMargin struct represents the margin information for an LP bin.\n * @param tradingFeeRate The trading fee rate associated with the LP bin\n * @param amount The maker margin amount specified for the LP bin\n */\nstruct BinMargin {\n    uint16 tradingFeeRate;\n    uint256 amount;\n}\n\nusing BinMarginLib for BinMargin global;\n\n/**\n * @title BinMarginLib\n * @dev The BinMarginLib library provides functions to operate on BinMargin structs.\n */\nlibrary BinMarginLib {\n    using Math for uint256;\n\n    uint256 constant TRADING_FEE_RATE_PRECISION = 10000;\n\n    /**\n     * @notice Calculates the trading fee based on the margin amount and the trading fee rate.\n     * @param self The BinMargin struct\n     * @param _protocolFeeRate The protocol fee rate for the market\n     * @return The trading fee amount\n     */\n    function tradingFee(\n        BinMargin memory self,\n        uint16 _protocolFeeRate\n    ) internal pure returns (uint256) {\n        uint256 _tradingFee = self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION);\n        return _tradingFee - _protocolFee(_tradingFee, _protocolFeeRate);\n    }\n\n    /**\n     * @notice Calculates the protocol fee based on the margin amount and the trading fee rate.\n     * @param self The BinMargin struct\n     * @param _protocolFeeRate The protocol fee rate for the market\n     * @return The protocol fee amount\n     */\n    function protocolFee(\n        BinMargin memory self,\n        uint16 _protocolFeeRate\n    ) internal pure returns (uint256) {\n        return\n            _protocolFee(\n                self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION),\n                _protocolFeeRate\n            );\n    }\n\n    function _protocolFee(\n        uint256 _tradingFee,\n        uint16 _protocolFeeRate\n    ) private pure returns (uint256) {\n        return _tradingFee.mulDiv(_protocolFeeRate, TRADING_FEE_RATE_PRECISION);\n    }\n}\n"
    },
    "contracts/core/libraries/CLBTokenLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\n\nimport {SignedMath} from \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {FEE_RATES_LENGTH} from \"@chromatic-protocol/contracts/core/libraries/Constants.sol\";\nimport {Errors} from \"@chromatic-protocol/contracts/core/libraries/Errors.sol\";\n\n/**\n * @title CLBTokenLib\n * @notice Provides utility functions for working with CLB tokens.\n */\nlibrary CLBTokenLib {\n    using SignedMath for int256;\n    using SafeCast for uint256;\n\n    uint256 private constant DIRECTION_PRECISION = 10 ** 10;\n    uint16 private constant MIN_FEE_RATE = 1;\n\n    /**\n     * @notice Encode the CLB token ID of ERC1155 token type\n     * @dev If `tradingFeeRate` is negative, it adds `DIRECTION_PRECISION` to the absolute fee rate.\n     *      Otherwise it returns the fee rate directly.\n     * @return id The ID of ERC1155 token\n     */\n    function encodeId(int16 tradingFeeRate) internal pure returns (uint256) {\n        bool long = tradingFeeRate > 0;\n        return _encodeId(uint16(long ? tradingFeeRate : -tradingFeeRate), long);\n    }\n\n    /**\n     * @notice Decode the trading fee rate from the CLB token ID of ERC1155 token type\n     * @dev If `id` is greater than or equal to `DIRECTION_PRECISION`,\n     *      then it substracts `DIRECTION_PRECISION` from `id`\n     *      and returns the negation of the substracted value.\n     *      Otherwise it returns `id` directly.\n     * @return tradingFeeRate The trading fee rate\n     */\n    function decodeId(uint256 id) internal pure returns (int16 tradingFeeRate) {\n        if (id >= DIRECTION_PRECISION) {\n            tradingFeeRate = -int16((id - DIRECTION_PRECISION).toUint16());\n        } else {\n            tradingFeeRate = int16(id.toUint16());\n        }\n    }\n\n    /**\n     * @notice Retrieves the array of supported trading fee rates.\n     * @dev This function returns the array of supported trading fee rates,\n     *      ranging from the minimum fee rate to the maximum fee rate with step increments.\n     * @return tradingFeeRates The array of supported trading fee rates.\n     */\n    function tradingFeeRates() internal pure returns (uint16[FEE_RATES_LENGTH] memory) {\n        // prettier-ignore\n        return [\n            MIN_FEE_RATE, 2, 3, 4, 5, 6, 7, 8, 9, // 0.01% ~ 0.09%, step 0.01%\n            10, 20, 30, 40, 50, 60, 70, 80, 90, // 0.1% ~ 0.9%, step 0.1%\n            100, 200, 300, 400, 500, 600, 700, 800, 900, // 1% ~ 9%, step 1%\n            1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000 // 10% ~ 50%, step 5%\n        ];\n    }\n\n    function feeRateIndex(uint16 feeRate) internal pure returns (uint256) {\n        require(feeRate >= MIN_FEE_RATE && feeRate <= 5000, Errors.UNSUPPORTED_TRADING_FEE_RATE);\n\n        if (feeRate < 10) {\n            // 0..8\n            return feeRate - 1;\n        } else if (feeRate < 100) {\n            // 9..17\n            return (feeRate / 10) + 8;\n        } else if (feeRate < 1000) {\n            // 18..26\n            return (feeRate / 100) + 17;\n        } else {\n            // 27..35\n            return (feeRate / 500) + 25;\n        }\n    }\n\n    function tokenIds() internal pure returns (uint256[] memory) {\n        uint16[FEE_RATES_LENGTH] memory feeRates = tradingFeeRates();\n\n        uint256[] memory ids = new uint256[](FEE_RATES_LENGTH * 2);\n        for (uint256 i; i < FEE_RATES_LENGTH; ) {\n            ids[i] = _encodeId(feeRates[i], true);\n            ids[i + FEE_RATES_LENGTH] = _encodeId(feeRates[i], false);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return ids;\n    }\n\n    function _encodeId(uint16 tradingFeeRate, bool long) private pure returns (uint256 id) {\n        id = long ? tradingFeeRate : tradingFeeRate + DIRECTION_PRECISION;\n    }\n}\n"
    },
    "contracts/core/libraries/Constants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\n\nuint256 constant BPS = 10000;\nuint256 constant FEE_RATES_LENGTH = 36;\nuint256 constant PRICE_PRECISION = 1e18;"
    },
    "contracts/core/libraries/Errors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title Errors\n * @dev This library provides a set of error codes as string constants for handling exceptions and revert messages in the library.\n */\nlibrary Errors {\n    /**\n     * @dev Error code indicating that there is not enough free liquidity available in liquidity pool when open a new poisition.\n     */\n    string constant NOT_ENOUGH_FREE_LIQUIDITY = \"NEFL\";\n\n    /**\n     * @dev Error code indicating that the specified amount is too small when add liquidity to each bin.\n     */\n    string constant TOO_SMALL_AMOUNT = \"TSA\";\n\n    /**\n     * @dev Error code indicating that the provided oracle version is invalid or unsupported.\n     */\n    string constant INVALID_ORACLE_VERSION = \"IOV\";\n\n    /**\n     * @dev Error code indicating that the specified value exceeds the allowed margin range when claim a position.\n     */\n    string constant EXCEED_MARGIN_RANGE = \"IOV\";\n\n    /**\n     * @dev Error code indicating that the provided trading fee rate is not supported.\n     */\n    string constant UNSUPPORTED_TRADING_FEE_RATE = \"UTFR\";\n\n    /**\n     * @dev Error code indicating that the oracle provider is already registered.\n     */\n    string constant ALREADY_REGISTERED_ORACLE_PROVIDER = \"ARO\";\n\n    /**\n     * @dev Error code indicating that the settlement token is already registered.\n     */\n    string constant ALREADY_REGISTERED_TOKEN = \"ART\";\n\n    /**\n     * @dev Error code indicating that the settlement token is not registered.\n     */\n    string constant UNREGISTERED_TOKEN = \"URT\";\n\n    /**\n     * @dev Error code indicating that the interest rate has not been initialized.\n     */\n    string constant INTEREST_RATE_NOT_INITIALIZED = \"IRNI\";\n\n    /**\n     * @dev Error code indicating that the provided interest rate exceeds the maximum allowed rate.\n     */\n    string constant INTEREST_RATE_OVERFLOW = \"IROF\";\n\n    /**\n     * @dev Error code indicating that the provided timestamp for an interest rate is in the past.\n     */\n    string constant INTEREST_RATE_PAST_TIMESTAMP = \"IRPT\";\n\n    /**\n     * @dev Error code indicating that the provided interest rate record cannot be appended to the existing array.\n     */\n    string constant INTEREST_RATE_NOT_APPENDABLE = \"IRNA\";\n\n    /**\n     * @dev Error code indicating that an interest rate has already been applied and cannot be modified further.\n     */\n    string constant INTEREST_RATE_ALREADY_APPLIED = \"IRAA\";\n\n    /**\n     * @dev Error code indicating that the position is unsettled.\n     */\n    string constant UNSETTLED_POSITION = \"USP\";\n\n    /**\n     * @dev Error code indicating that the position quantity is invalid.\n     */\n    string constant INVALID_POSITION_QTY = \"IPQ\";\n\n    /**\n     * @dev Error code indicating that the oracle price is not positive.\n     */\n    string constant NOT_POSITIVE_PRICE = \"NPP\";\n}\n"
    },
    "contracts/core/libraries/InterestRate.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {BPS} from \"@chromatic-protocol/contracts/core/libraries/Constants.sol\";\nimport {Errors} from \"@chromatic-protocol/contracts/core/libraries/Errors.sol\";\n\n/**\n * @title InterestRate\n * @notice Provides functions for managing interest rates.\n * @dev The library allows for the initialization, appending, and removal of interest rate records,\n *      as well as calculating interest based on these records.\n */\nlibrary InterestRate {\n    using Math for uint256;\n\n    /**\n     * @dev Record type\n     * @param annualRateBPS Annual interest rate in BPS\n     * @param beginTimestamp Timestamp when the interest rate becomes effective\n     */\n    struct Record {\n        uint256 annualRateBPS;\n        uint256 beginTimestamp;\n    }\n\n    uint256 private constant MAX_RATE_BPS = BPS; // max interest rate is 100%\n    uint256 private constant YEAR = 365 * 24 * 3600;\n\n    /**\n     * @dev Ensure that the interest rate records have been initialized before certain functions can be called.\n     *      It checks whether the length of the Record array is greater than 0.\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty (it indicates that the interest rate has not been initialized).\n     */\n    modifier initialized(Record[] storage self) {\n        require(self.length != 0, Errors.INTEREST_RATE_NOT_INITIALIZED);\n        _;\n    }\n\n    /**\n     * @notice Initialize the interest rate records.\n     * @param self The stored record array\n     * @param initialInterestRate The initial interest rate\n     */\n    function initialize(Record[] storage self, uint256 initialInterestRate) internal {\n        self.push(Record({annualRateBPS: initialInterestRate, beginTimestamp: 0}));\n    }\n\n    /**\n     * @notice Add a new interest rate record to the array.\n     * @dev Annual rate is not greater than the maximum rate and that the begin timestamp is in the future,\n     *      and the new record's begin timestamp is greater than the previous record's timestamp.\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\n     *      Throws an error with the code `Errors.INTEREST_RATE_OVERFLOW` if the rate exceed the maximum allowed rate (100%).\n     *      Throws an error with the code `Errors.INTEREST_RATE_PAST_TIMESTAMP` if the timestamp is in the past, ensuring that the interest rate period has not already started.\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_APPENDABLE` if the timestamp is greater than the last recorded timestamp, ensuring that the new record is appended in chronological order.\n     * @param self The stored record array\n     * @param annualRateBPS The annual interest rate in BPS\n     * @param beginTimestamp Begin timestamp of this record\n     */\n    function appendRecord(\n        Record[] storage self,\n        uint256 annualRateBPS,\n        uint256 beginTimestamp\n    ) internal initialized(self) {\n        require(annualRateBPS <= MAX_RATE_BPS, Errors.INTEREST_RATE_OVERFLOW);\n        //slither-disable-next-line timestamp\n        require(beginTimestamp > block.timestamp, Errors.INTEREST_RATE_PAST_TIMESTAMP);\n\n        Record memory lastRecord = self[self.length - 1];\n        require(beginTimestamp > lastRecord.beginTimestamp, Errors.INTEREST_RATE_NOT_APPENDABLE);\n\n        self.push(Record({annualRateBPS: annualRateBPS, beginTimestamp: beginTimestamp}));\n    }\n\n    /**\n     * @notice Remove the last interest rate record from the array.\n     * @dev The current time must be less than the begin timestamp of the last record.\n     *      If the array has only one record, it returns false along with an empty record.\n     *      Otherwise, it removes the last record from the array and returns true along with the removed record.\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\n     *      Throws an error with the code `Errors.INTEREST_RATE_ALREADY_APPLIED` if the `beginTimestamp` of the last record is not in the future.\n     * @param self The stored record array\n     * @return removed Whether the last record is removed\n     * @return record The removed record\n     */\n    function removeLastRecord(\n        Record[] storage self\n    ) internal initialized(self) returns (bool removed, Record memory record) {\n        if (self.length <= 1) {\n            // empty\n            return (false, Record(0, 0));\n        }\n\n        Record memory lastRecord = self[self.length - 1];\n        //slither-disable-next-line timestamp\n        require(block.timestamp < lastRecord.beginTimestamp, Errors.INTEREST_RATE_ALREADY_APPLIED);\n\n        self.pop();\n\n        return (true, lastRecord);\n    }\n\n    /**\n     * @notice Find the interest rate record that applies to a given timestamp.\n     * @dev It iterates through the array from the end to the beginning\n     *      and returns the first record with a begin timestamp less than or equal to the provided timestamp.\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\n     * @param self The stored record array\n     * @param timestamp Given timestamp\n     * @return interestRate The record which is found\n     * @return index The index of record\n     */\n    function findRecordAt(\n        Record[] storage self,\n        uint256 timestamp\n    ) internal view initialized(self) returns (Record memory interestRate, uint256 index) {\n        for (uint256 i = self.length; i != 0; ) {\n            unchecked {\n                index = i - 1;\n            }\n            interestRate = self[index];\n\n            if (interestRate.beginTimestamp <= timestamp) {\n                return (interestRate, index);\n            }\n\n            unchecked {\n                i--;\n            }\n        }\n\n        return (self[0], 0); // empty result (this line is not reachable)\n    }\n\n    /**\n     * @notice Calculate the interest\n     * @dev Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\n     * @param self The stored record array\n     * @param amount Token amount\n     * @param from Begin timestamp (inclusive)\n     * @param to End timestamp (exclusive)\n     */\n    function calculateInterest(\n        Record[] storage self,\n        uint256 amount,\n        uint256 from, // timestamp (inclusive)\n        uint256 to // timestamp (exclusive)\n    ) internal view initialized(self) returns (uint256) {\n        if (from >= to) {\n            return 0;\n        }\n\n        uint256 interest = 0;\n\n        uint256 endTimestamp = type(uint256).max;\n        for (uint256 idx = self.length; idx != 0; ) {\n            Record memory record = self[idx - 1];\n            if (endTimestamp <= from) {\n                break;\n            }\n\n            interest += _interest(\n                amount,\n                record.annualRateBPS,\n                Math.min(to, endTimestamp) - Math.max(from, record.beginTimestamp)\n            );\n            endTimestamp = record.beginTimestamp;\n\n            unchecked {\n                idx--;\n            }\n        }\n        return interest;\n    }\n\n    function _interest(\n        uint256 amount,\n        uint256 rateBPS, // annual rate\n        uint256 period // in seconds\n    ) private pure returns (uint256) {\n        return amount.mulDiv(rateBPS * period, BPS * YEAR, Math.Rounding.Up);\n    }\n}\n"
    },
    "contracts/core/libraries/LpContext.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IOracleProvider} from \"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\";\nimport {IInterestCalculator} from \"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\";\nimport {IChromaticVault} from \"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\";\nimport {ICLBToken} from \"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\";\n\n/**\n * @dev Represents the context information required for LP bin operations.\n * @param oracleProvider The Oracle Provider contract used for price feed\n * @param interestCalculator The Interest Calculator contract used for interest calculations\n * @param vault The Chromatic Vault contract responsible for managing liquidity and margin\n * @param clbToken The CLB token contract that represents LP ownership in the pool\n * @param market The address of market contract\n * @param settlementToken The address of the settlement token used in the market\n * @param tokenPrecision The precision of the settlement token used in the market\n * @param _currentVersionCache Cached instance of the current oracle version\n */\nstruct LpContext {\n    IOracleProvider oracleProvider;\n    IInterestCalculator interestCalculator;\n    IChromaticVault vault;\n    ICLBToken clbToken;\n    address market;\n    address settlementToken;\n    uint256 tokenPrecision;\n    IOracleProvider.OracleVersion _currentVersionCache;\n}\n\nusing LpContextLib for LpContext global;\n\n/**\n * @title LpContextLib\n * @notice Provides functions that operate on the `LpContext` struct\n */\nlibrary LpContextLib {\n    /**\n     * @notice Syncs the oracle version used by the market.\n     * @param self The memory instance of `LpContext` struct\n     */\n    function syncOracleVersion(LpContext memory self) internal {\n        self._currentVersionCache = self.oracleProvider.sync();\n    }\n\n    /**\n     * @notice Retrieves the current oracle version used by the market\n     * @dev If the `_currentVersionCache` has been initialized, then returns it.\n     *      If not, it calls the `currentVersion` function on the `oracleProvider of the market\n     *      to fetch the current version and stores it in the cache,\n     *      and then returns the current version.\n     * @param self The memory instance of `LpContext` struct\n     * @return OracleVersion The current oracle version\n     */\n    function currentOracleVersion(\n        LpContext memory self\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\n        if (self._currentVersionCache.version == 0) {\n            //slither-disable-next-line calls-loop\n            self._currentVersionCache = self.oracleProvider.currentVersion();\n        }\n\n        return self._currentVersionCache;\n    }\n\n    /**\n     * @notice Retrieves the oracle version at a specific version number\n     * @dev If the `_currentVersionCache` matches the requested version, then returns it.\n     *      Otherwise, it calls the `atVersion` function on the `oracleProvider` of the market\n     *      to fetch the desired version.\n     * @param self The memory instance of `LpContext` struct\n     * @param version The requested version number\n     * @return OracleVersion The oracle version at the requested version number\n     */\n    function oracleVersionAt(\n        LpContext memory self,\n        uint256 version\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\n        if (self._currentVersionCache.version == version) {\n            return self._currentVersionCache;\n        }\n        return self.oracleProvider.atVersion(version);\n    }\n\n    /**\n     * @notice Calculates the interest accrued for a given amount of settlement tokens\n               within a specified time range.\n     * @dev This function internally calls the `calculateInterest` function on the `interestCalculator` contract.\n     * @param self The memory instance of the `LpContext` struct.\n     * @param amount The amount of settlement tokens for which the interest needs to be calculated.\n     * @param from The starting timestamp of the time range (inclusive).\n     * @param to The ending timestamp of the time range (exclusive).\n     * @return The accrued interest as a `uint256` value.\n     */\n    function calculateInterest(\n        LpContext memory self,\n        uint256 amount,\n        uint256 from,\n        uint256 to\n    ) internal view returns (uint256) {\n        //slither-disable-next-line calls-loop\n        return\n            amount == 0 || from >= to\n                ? 0\n                : self.interestCalculator.calculateInterest(self.settlementToken, amount, from, to);\n    }\n\n    /**\n     * @notice Checks if an oracle version is in the past.\n     * @param self The memory instance of the `LpContext` struct.\n     * @param oracleVersion The oracle version to check.\n     * @return A boolean value indicating whether the oracle version is in the past.\n     */\n    function isPastVersion(\n        LpContext memory self,\n        uint256 oracleVersion\n    ) internal view returns (bool) {\n        return oracleVersion != 0 && oracleVersion < self.currentOracleVersion().version;\n    }\n}\n"
    },
    "contracts/core/libraries/LpReceipt.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\n\nimport {CLBTokenLib} from \"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\";\n\n/**\n * @dev The LpAction enum represents the types of LP actions that can be performed.\n */\nenum LpAction {\n    ADD_LIQUIDITY,\n    REMOVE_LIQUIDITY\n}\n\n/**\n * @dev The LpReceipt struct represents a receipt of an LP action performed.\n * @param id An identifier for the receipt\n * @param oracleVersion The oracle version associated with the action\n * @param amount The amount involved in the action,\n *        when the action is `ADD_LIQUIDITY`, this value represents the amount of settlement tokens\n *        when the action is `REMOVE_LIQUIDITY`, this value represents the amount of CLB tokens\n * @param recipient The address of the recipient of the action\n * @param action An enumeration representing the type of LP action performed (ADD_LIQUIDITY or REMOVE_LIQUIDITY)\n * @param tradingFeeRate The trading fee rate associated with the LP action\n */\nstruct LpReceipt {\n    uint256 id;\n    uint256 oracleVersion;\n    uint256 amount;\n    address recipient;\n    LpAction action;\n    int16 tradingFeeRate;\n}\n\nusing LpReceiptLib for LpReceipt global;\n\n/**\n * @title LpReceiptLib\n * @notice Provides functions that operate on the `LpReceipt` struct\n */\nlibrary LpReceiptLib {\n    /**\n     * @notice Computes the ID of the CLBToken contract based on the trading fee rate.\n     * @param self The LpReceipt struct.\n     * @return The ID of the CLBToken contract.\n     */\n    function clbTokenId(LpReceipt memory self) internal pure returns (uint256) {\n        return CLBTokenLib.encodeId(self.tradingFeeRate);\n    }\n}\n"
    },
    "contracts/core/libraries/Position.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IOracleProvider} from \"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\";\nimport {PositionUtil} from \"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\";\nimport {LpContext} from \"@chromatic-protocol/contracts/core/libraries/LpContext.sol\";\nimport {BinMargin} from \"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\";\n\n/**\n * @dev The Position struct represents a trading position.\n * @param id The position identifier\n * @param openVersion The version of the oracle when the position was opened\n * @param closeVersion The version of the oracle when the position was closed\n * @param qty The quantity of the position\n * @param openTimestamp The timestamp when the position was opened\n * @param closeTimestamp The timestamp when the position was closed\n * @param takerMargin The amount of collateral that a trader must provide\n * @param owner The owner of the position, usually it is the account address of trader\n * @param liquidator The liquidator contract address\n * @param _binMargins The bin margins for the position, it represents the amount of collateral for each bin\n * @param _protocolFeeRate The protocol fee rate for the market\n */\nstruct Position {\n    uint256 id;\n    uint256 openVersion;\n    uint256 closeVersion;\n    int256 qty;\n    uint256 openTimestamp;\n    uint256 closeTimestamp;\n    uint256 takerMargin;\n    address owner;\n    address liquidator;\n    uint16 _protocolFeeRate;\n    BinMargin[] _binMargins;\n}\n\nusing PositionLib for Position global;\n\n/**\n * @title PositionLib\n * @notice Provides functions that operate on the `Position` struct\n */\nlibrary PositionLib {\n    // using Math for uint256;\n    // using SafeCast for uint256;\n    // using SignedMath for int256;\n\n    /**\n     * @notice Calculates the entry price of the position based on the position's open oracle version\n     * @dev It fetches oracle price from `IOracleProvider`\n     *      at the settle version calculated based on the position's open oracle version\n     * @param self The memory instance of the `Position` struct\n     * @param ctx The context object for this transaction\n     * @return uint256 The entry price\n     */\n    function entryPrice(\n        Position memory self,\n        LpContext memory ctx\n    ) internal view returns (uint256) {\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.openVersion);\n    }\n\n    /**\n     * @notice Calculates the exit price of the position based on the position's close oracle version\n     * @dev It fetches oracle price from `IOracleProvider`\n     *      at the settle version calculated based on the position's close oracle version\n     * @param self The memory instance of the `Position` struct\n     * @param ctx The context object for this transaction\n     * @return uint256 The exit price\n     */\n    function exitPrice(Position memory self, LpContext memory ctx) internal view returns (uint256) {\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.closeVersion);\n    }\n\n    /**\n     * @notice Calculates the profit or loss of the position based on the close oracle version and the qty\n     * @param self The memory instance of the `Position` struct\n     * @param ctx The context object for this transaction\n     * @return int256 The profit or loss\n     */\n    function pnl(Position memory self, LpContext memory ctx) internal view returns (int256) {\n        return\n            self.closeVersion > self.openVersion\n                ? PositionUtil.pnl(self.qty, self.entryPrice(ctx), self.exitPrice(ctx))\n                : int256(0);\n    }\n\n    /**\n     * @notice Calculates the total margin required for the makers of the position\n     * @dev The maker margin is calculated by summing up the amounts of all bin margins\n     *      in the `_binMargins` array\n     * @param self The memory instance of the `Position` struct\n     * @return margin The maker margin\n     */\n    function makerMargin(Position memory self) internal pure returns (uint256 margin) {\n        for (uint256 i; i < self._binMargins.length; ) {\n            margin += self._binMargins[i].amount;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the total trading fee for the position\n     * @dev The trading fee is calculated by summing up the trading fees of all bin margins\n     *      in the `_binMargins` array\n     * @param self The memory instance of the `Position` struct\n     * @return fee The trading fee\n     */\n    function tradingFee(Position memory self) internal pure returns (uint256 fee) {\n        for (uint256 i; i < self._binMargins.length; ) {\n            fee += self._binMargins[i].tradingFee(self._protocolFeeRate);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the total protocol fee for a position.\n     * @param self The Position struct representing the position.\n     * @return fee The total protocol fee amount.\n     */\n    function protocolFee(Position memory self) internal pure returns (uint256 fee) {\n        for (uint256 i; i < self._binMargins.length; ) {\n            fee += self._binMargins[i].protocolFee(self._protocolFeeRate);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Returns an array of BinMargin instances\n     *         representing the bin margins for the position\n     * @param self The memory instance of the `Position` struct\n     * @return margins The bin margins for the position\n     */\n    function binMargins(Position memory self) internal pure returns (BinMargin[] memory margins) {\n        margins = self._binMargins;\n    }\n\n    /**\n     * @notice Sets the `_binMargins` array for the position\n     * @param self The memory instance of the `Position` struct\n     * @param margins The bin margins for the position\n     */\n    function setBinMargins(Position memory self, BinMargin[] memory margins) internal pure {\n        self._binMargins = margins;\n    }\n}\n"
    },
    "contracts/core/libraries/PositionUtil.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {SignedMath} from \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\nimport {IOracleProvider} from \"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\";\nimport {PRICE_PRECISION} from \"@chromatic-protocol/contracts/core/libraries/Constants.sol\";\nimport {Errors} from \"@chromatic-protocol/contracts/core/libraries/Errors.sol\";\n\n/**\n * @title PositionUtil\n * @notice Provides utility functions for managing positions\n */\nlibrary PositionUtil {\n    using Math for uint256;\n    using SafeCast for uint256;\n    using SignedMath for int256;\n\n    /**\n     * @notice Returns next oracle version to settle\n     * @dev It adds 1 to the `oracleVersion`\n     *      and ensures that the `oracleVersion` is greater than 0 using a require statement.\n     *      Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if the `oracleVersion` is not valid.\n     * @param oracleVersion Input oracle version\n     * @return uint256 Next oracle version to settle\n     */\n    function settleVersion(uint256 oracleVersion) internal pure returns (uint256) {\n        require(oracleVersion != 0, Errors.INVALID_ORACLE_VERSION);\n        return oracleVersion + 1;\n    }\n\n    /**\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\n     * @dev It calls another overloaded `settlePrice` function\n     *      with an additional `OracleVersion` parameter,\n     *      passing the `currentVersion` obtained from the `provider`\n     * @param provider The oracle provider\n     * @param oracleVersion The oracle version of position\n     * @return uint256 The calculated price to settle\n     */\n    function settlePrice(\n        IOracleProvider provider,\n        uint256 oracleVersion\n    ) internal view returns (uint256) {\n        return settlePrice(provider, oracleVersion, provider.currentVersion());\n    }\n\n    /**\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\n     * @dev It calculates the price by considering the `settleVersion`\n     *      and the `currentVersion` obtained from the `IOracleProvider`.\n     *      It ensures that the settle version is not greater than the current version;\n     *      otherwise, it triggers an error with the message `Errors.UNSETTLED_POSITION`.\n     *      It retrieves the corresponding `OracleVersion` using `atVersion` from the `IOracleProvider`,\n     *      and then calls `oraclePrice` to obtain the price.\n     * @param provider The oracle provider\n     * @param oracleVersion The oracle version of position\n     * @param currentVersion The current oracle version\n     * @return uint256 The calculated entry price to settle\n     */\n    function settlePrice(\n        IOracleProvider provider,\n        uint256 oracleVersion,\n        IOracleProvider.OracleVersion memory currentVersion\n    ) internal view returns (uint256) {\n        uint256 _settleVersion = settleVersion(oracleVersion);\n        require(_settleVersion <= currentVersion.version, Errors.UNSETTLED_POSITION);\n\n        //slither-disable-next-line calls-loop\n        IOracleProvider.OracleVersion memory _oracleVersion = _settleVersion ==\n            currentVersion.version\n            ? currentVersion\n            : provider.atVersion(_settleVersion);\n        return oraclePrice(_oracleVersion);\n    }\n\n    /**\n     * @notice Extracts the price value from an `OracleVersion` struct\n     * @dev If the price is not positive value, it triggers an error with the message `Errors.NOT_POSITIVE_PRICE`.\n     * @param oracleVersion The memory instance of `OracleVersion` struct\n     * @return uint256 The price value of `oracleVersion`\n     */\n    function oraclePrice(\n        IOracleProvider.OracleVersion memory oracleVersion\n    ) internal pure returns (uint256) {\n        require(oracleVersion.price > 0, Errors.NOT_POSITIVE_PRICE);\n        return oracleVersion.price.abs();\n    }\n\n    /**\n     * @notice Calculates the profit or loss (PnL) for a position based on the quantity, entry price, and exit price\n     * @dev It first calculates the price difference (`delta`) between the exit price and the entry price.\n     *      If the quantity is negative, indicating short position, it adjusts the `delta` to reflect a negative change.\n     *      The function then calculates the absolute PnL by multiplying the absolute value of the quantity\n     *          with the absolute value of the `delta`, divided by the entry price.\n     *      Finally, if `delta` is negative, indicating a loss, the absolute PnL is negated to represent a negative value.\n     * @param qty The quantity of the position\n     * @param _entryPrice The entry price of the position\n     * @param _exitPrice The exit price of the position\n     * @return int256 The profit or loss\n     */\n    function pnl(\n        int256 qty, // as token precision\n        uint256 _entryPrice,\n        uint256 _exitPrice\n    ) internal pure returns (int256) {\n        if (qty == 0 || _entryPrice == _exitPrice) return 0;\n\n        int256 delta = _exitPrice > _entryPrice\n            ? (_exitPrice - _entryPrice).toInt256()\n            : -(_entryPrice - _exitPrice).toInt256();\n        if (qty < 0) delta *= -1;\n\n        int256 absPnl = qty.abs().mulDiv(delta.abs(), _entryPrice).toInt256();\n\n        return delta < 0 ? -absPnl : absPnl;\n    }\n\n    /**\n     * @notice Verifies the validity of a position quantity added to the bin\n     * @dev It ensures that the sign of the current quantity of the bin's position\n     *      and the added quantity are same or zero.\n     *      If the condition is not met, it triggers an error with the message `Errors.INVALID_POSITION_QTY`.\n     * @param currentQty The current quantity of the bin's pending position\n     * @param addedQty The position quantity added\n     */\n    function checkAddPositionQty(int256 currentQty, int256 addedQty) internal pure {\n        require(\n            !((currentQty > 0 && addedQty <= 0) || (currentQty < 0 && addedQty >= 0)),\n            Errors.INVALID_POSITION_QTY\n        );\n    }\n\n    /**\n     * @notice Verifies the validity of a position quantity removed from the bin\n     * @dev It ensures that the sign of the current quantity of the bin's position\n     *      and the removed quantity are same or zero,\n     *      and the absolute removed quantity is not greater than the absolute current quantity.\n     *      If the condition is not met, it triggers an error with the message `Errors.INVALID_POSITION_QTY`.\n     * @param currentQty The current quantity of the bin's position\n     * @param removeQty The position quantity removed\n     */\n    function checkRemovePositionQty(int256 currentQty, int256 removeQty) internal pure {\n        require(\n            !((currentQty == 0) ||\n                (removeQty == 0) ||\n                (currentQty > 0 && removeQty > currentQty) ||\n                (currentQty < 0 && removeQty < currentQty)),\n            Errors.INVALID_POSITION_QTY\n        );\n    }\n\n    /**\n     * @notice Calculates the transaction amount based on the quantity and price\n     * @param qty The quantity of the position\n     * @param price The price of the position\n     * @return uint256 The transaction amount\n     */\n    function transactionAmount(int256 qty, uint256 price) internal pure returns (uint256) {\n        return qty.abs().mulDiv(price, PRICE_PRECISION);\n    }\n}\n"
    },
    "contracts/core/libraries/registry/OracleProviderProperties.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @dev The OracleProviderProperties struct represents properties of the oracle provider.\n * @param minTakeProfitBPS The minimum take-profit basis points.\n * @param maxTakeProfitBPS The maximum take-profit basis points.\n * @param leverageLevel The leverage level of the oracle provider.\n */\nstruct OracleProviderProperties {\n    uint32 minTakeProfitBPS;\n    uint32 maxTakeProfitBPS;\n    uint8 leverageLevel;\n}\n\nusing OracleProviderPropertiesLib for OracleProviderProperties global;\n\nlibrary OracleProviderPropertiesLib {\n    function checkValidLeverageLevel(uint8 leverageLevel) internal pure returns (bool) {\n        return leverageLevel <= 3;\n    }\n\n    function maxAllowableLeverage(\n        OracleProviderProperties memory self\n    ) internal pure returns (uint256 leverage) {\n        uint8 level = self.leverageLevel;\n        assembly {\n            switch level\n            case 0 {\n                leverage := 10\n            }\n            case 1 {\n                leverage := 20\n            }\n            case 2 {\n                leverage := 50\n            }\n            case 3 {\n                leverage := 100\n            }\n            default {\n                leverage := 0\n            }\n        }\n    }\n}\n"
    },
    "contracts/oracle/interfaces/IOracleProvider.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/interfaces/IERC165.sol\";\n\ninterface IOracleProvider is IERC165 {\n    /// @dev Error for invalid oracle round\n    error InvalidOracleRound();\n\n    /**\n     * @dev A singular oracle version with its corresponding data\n     * @param version The iterative version\n     * @param timestamp the timestamp of the oracle update\n     * @param price The oracle price of the corresponding version\n     */\n    struct OracleVersion {\n        uint256 version;\n        uint256 timestamp;\n        int256 price;\n    }\n\n    /**\n     * @notice Checks for a new price and updates the internal phase annotation state accordingly\n     * @dev `sync` is expected to be called soon after a phase update occurs in the underlying proxy.\n     *      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call\n     *      This is feasible in the short term due to how infrequent phase updates are, but phase update\n     *      and roundCount detection should eventually be implemented at the contract level.\n     *      Reverts if there is more than 1 phase to update in a single sync because we currently cannot\n     *      determine the startingRoundId for the intermediary phase.\n     * @return The current oracle version after sync\n     */\n    function sync() external returns (OracleVersion memory);\n\n    /**\n     * @notice Returns the current oracle version\n     * @return oracleVersion Current oracle version\n     */\n    function currentVersion() external view returns (OracleVersion memory);\n\n    /**\n     * @notice Returns the current oracle version\n     * @param version The version of which to lookup\n     * @return oracleVersion Oracle version at version `version`\n     */\n    function atVersion(uint256 version) external view returns (OracleVersion memory);\n\n    /**\n     * @notice Retrieves the description of the Oracle Provider.\n     * @return A string representing the description of the Oracle Provider.\n     */\n    function description() external view returns (string memory);\n\n    /**\n     * @notice Retrieves the name of the Oracle Provider.\n     * @return A string representing the name of the Oracle Provider.\n     */\n    function oracleProviderName() external view returns (string memory);\n}\n"
    },
    "contracts/oracle/interfaces/IOracleProviderPullBased.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport {ExtraModule} from \"@chromatic-protocol/contracts/core/automation/mate2/IMate2Automation1_1.sol\";\nimport {IOracleProvider} from \"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\";\n\ninterface IOracleProviderPullBased is IOracleProvider {\n    /**\n     * @dev Returns the type of automation module that the Keeper will execute, either \"None\" or \"Pyth\".\n     * @return Automation module type, which can be \"None\" or \"Pyth\".\n     */\n    function extraModule() external pure returns (ExtraModule);\n\n    /**\n     * @dev Retrieves the parameter needed to request data from the Keeper, e.g., the price feed ID in the case of Pyth integration.\n     * @return Required parameter for Keeper requests as bytes\n     */\n    function extraParam() external view returns (bytes memory);\n\n    /**\n     * @dev Returns the fee required to update the Oracle Provider with the given off-chain data\n     * @param offchainData Off-chain data required for the update\n     * @return fee amount\n     */\n    function getUpdateFee(bytes calldata offchainData) external view returns (uint256);\n\n    /**\n     * @dev Updates the Oracle Provider with the provided off-chain data\n     * @param offchainData Off-chain data used for the update\n     */\n    function updatePrice(bytes calldata offchainData) external payable;\n\n    /**\n     * @dev Parses the provided off-chain data received from the Keeper and returns an OracleVersion structure representing the parsed data\n     * @param extraData Off-chain data received from the Keeper\n     * @return Parsed OracleVersion structure\n     */\n    function parseExtraData(bytes calldata extraData) external view returns (OracleVersion memory);\n\n    /**\n     * @dev Retrieves the last synchronized oracle version\n     * @return Last synchronized oracle version\n     */\n    function lastSyncedVersion() external view returns (OracleVersion memory);\n}\n"
    },
    "contracts/oracle/libraries/OracleProviderLib.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IOracleProvider} from \"../interfaces/IOracleProvider.sol\";\nimport {IOracleProviderPullBased} from \"../interfaces/IOracleProviderPullBased.sol\";\n\nlibrary OracleProviderLib {\n    function isPullBased(IOracleProvider oracleProvider) internal view returns (bool) {\n        try oracleProvider.supportsInterface(type(IOracleProviderPullBased).interfaceId) returns (\n            bool supported\n        ) {\n            return supported;\n        } catch (bytes memory /*lowLevelData*/) {\n            // Contracts doesn't support ERC-165\n            return false;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 30000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "@chromatic-protocol/contracts/=contracts/"
    ]
  }
}