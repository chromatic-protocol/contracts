{
  "address": "0xDB8b1FC60b45D8ae25b78531717DE71B6BECe728",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IChromaticRouter",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "int16",
          "name": "tradingFeeRate",
          "type": "int16"
        },
        {
          "internalType": "uint256",
          "name": "_oracleVersion",
          "type": "uint256"
        }
      ],
      "name": "claimableLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintingTokenAmountRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintingCLBTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burningCLBTokenAmountRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burningCLBTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burningTokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ClaimableLiquidity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "int16[]",
          "name": "tradingFeeRates",
          "type": "int16[]"
        },
        {
          "internalType": "uint256",
          "name": "_oracleVersion",
          "type": "uint256"
        }
      ],
      "name": "claimableLiquidityBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintingTokenAmountRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintingCLBTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burningCLBTokenAmountRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burningCLBTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burningTokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ClaimableLiquidity[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "clbBalanceOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "binValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct ChromaticLens.CLBBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticMarket",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "liquidityBinStatuses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "freeLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "binValue",
              "type": "uint256"
            },
            {
              "internalType": "int16",
              "name": "tradingFeeRate",
              "type": "int16"
            }
          ],
          "internalType": "struct LiquidityBinStatus[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "lpReceipts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "enum LpAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "int16",
              "name": "tradingFeeRate",
              "type": "int16"
            }
          ],
          "internalType": "struct LpReceipt[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "oracleVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "int16",
          "name": "tradingFeeRate",
          "type": "int16"
        }
      ],
      "name": "pendingLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintingTokenAmountRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burningCLBTokenAmountRequested",
              "type": "uint256"
            }
          ],
          "internalType": "struct PendingLiquidity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChromaticMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "int16[]",
          "name": "tradingFeeRates",
          "type": "int16[]"
        }
      ],
      "name": "pendingLiquidityBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintingTokenAmountRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burningCLBTokenAmountRequested",
              "type": "uint256"
            }
          ],
          "internalType": "struct PendingLiquidity[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xefcf51f2993076422c8b339e38931d0afa0caee9be83c073926deb5fb586df70",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0xDB8b1FC60b45D8ae25b78531717DE71B6BECe728",
    "transactionIndex": 3,
    "gasUsed": "1791621",
    "logsBloom": "0x
    "blockHash": "0xa20a2e263300a74d1369bea0b52f6457625fabd9ddfd6b643c98b5a29e212033",
    "transactionHash": "0xefcf51f2993076422c8b339e38931d0afa0caee9be83c073926deb5fb586df70",
    "logs": [],
    "blockNumber": 10526696,
    "cumulativeGasUsed": "4244546",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA52A0277295363C73A252052abFF2A171cD0a006"
  ],
  "numDeployments": 4,
  "solcInputHash": "40f30b43e578be04db1fcda481773844",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IChromaticRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IChromaticMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"tradingFeeRate\",\"type\":\"int16\"},{\"internalType\":\"uint256\",\"name\":\"_oracleVersion\",\"type\":\"uint256\"}],\"name\":\"claimableLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintingTokenAmountRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingCLBTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burningCLBTokenAmountRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burningCLBTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burningTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ClaimableLiquidity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"int16[]\",\"name\":\"tradingFeeRates\",\"type\":\"int16[]\"},{\"internalType\":\"uint256\",\"name\":\"_oracleVersion\",\"type\":\"uint256\"}],\"name\":\"claimableLiquidityBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintingTokenAmountRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingCLBTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burningCLBTokenAmountRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burningCLBTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burningTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ClaimableLiquidity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"clbBalanceOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"binValue\",\"type\":\"uint256\"}],\"internalType\":\"struct ChromaticLens.CLBBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticMarket\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"liquidityBinStatuses\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"binValue\",\"type\":\"uint256\"},{\"internalType\":\"int16\",\"name\":\"tradingFeeRate\",\"type\":\"int16\"}],\"internalType\":\"struct LiquidityBinStatus[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"lpReceipts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"enum LpAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"int16\",\"name\":\"tradingFeeRate\",\"type\":\"int16\"}],\"internalType\":\"struct LpReceipt[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"oracleVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"tradingFeeRate\",\"type\":\"int16\"}],\"name\":\"pendingLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingTokenAmountRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burningCLBTokenAmountRequested\",\"type\":\"uint256\"}],\"internalType\":\"struct PendingLiquidity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChromaticMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"int16[]\",\"name\":\"tradingFeeRates\",\"type\":\"int16[]\"}],\"name\":\"pendingLiquidityBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingTokenAmountRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burningCLBTokenAmountRequested\",\"type\":\"uint256\"}],\"internalType\":\"struct PendingLiquidity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract that provides utility functions for interacting with Chromatic markets.\",\"kind\":\"dev\",\"methods\":{\"claimableLiquidity(address,int16,uint256)\":{\"details\":\"Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the given Chromatic Market.\",\"params\":{\"_oracleVersion\":\"The oracle version for which to retrieve the claimable liquidity.\",\"market\":\"The Chromatic Market from which to retrieve the claimable liquidity information.\",\"tradingFeeRate\":\"The trading fee rate for which to retrieve the claimable liquidity.\"},\"returns\":{\"_0\":\"claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information.\"}},\"claimableLiquidityBatch(address,int16[],uint256)\":{\"details\":\"Retrieves the claimable liquidity information for a list of trading fee rates and a specific oracle version from the given Chromatic Market.\",\"params\":{\"_oracleVersion\":\"The oracle version for which to retrieve the claimable liquidity.\",\"market\":\"The Chromatic Market from which to retrieve the claimable liquidity information.\",\"tradingFeeRates\":\"The list of trading fee rates for which to retrieve the claimable liquidity.\"},\"returns\":{\"_0\":\"claimableLiquidityList An array of ClaimableLiquidity representing the claimable liquidity information for each trading fee rate and the oracle version.\"}},\"clbBalanceOf(address,address)\":{\"details\":\"Retrieves the CLB token balances for the specified owner in the given Chromatic market.\",\"params\":{\"market\":\"The address of the Chromatic market contract.\",\"owner\":\"The address of the CLB token owner.\"},\"returns\":{\"_0\":\"An array of CLBBalance containing the CLB token balance information for the owner.\"}},\"liquidityBinStatuses(address)\":{\"details\":\"Retrieves the liquidity bin statuses for the specified Chromatic Market.\",\"params\":{\"market\":\"The Chromatic Market contract for which liquidity bin statuses are retrieved.\"},\"returns\":{\"_0\":\"statuses An array of LiquidityBinStatus representing the liquidity bin statuses.\"}},\"lpReceipts(address,address)\":{\"details\":\"Retrieves the LP receipts for the specified owner in the given Chromatic market.\",\"params\":{\"market\":\"The address of the Chromatic market contract.\",\"owner\":\"The address of the LP token owner.\"},\"returns\":{\"result\":\"An array of LpReceipt containing the LP receipts for the owner.\"}},\"oracleVersion(address,uint256)\":{\"details\":\"Retrieves the OracleVersion for the specified oracle version in the given Chromatic market.\",\"params\":{\"market\":\"The address of the Chromatic market contract.\",\"version\":\"An oracle version.\"},\"returns\":{\"_0\":\"oracleVersion The OracleVersion for the specified oracle version.\"}},\"pendingLiquidity(address,int16)\":{\"details\":\"Retrieves the pending liquidity information for a specific trading fee rate in the given Chromatic market.\",\"params\":{\"market\":\"The Chromatic market from which to retrieve the pending liquidity information.\",\"tradingFeeRate\":\"The trading fee rate for which to retrieve the pending liquidity.\"},\"returns\":{\"_0\":\"pendingLiquidity An instance of PendingLiquidity representing the pending liquidity information.\"}},\"pendingLiquidityBatch(address,int16[])\":{\"details\":\"Retrieves the pending liquidity information for a list of trading fee rates in the given Chromatic market.\",\"params\":{\"market\":\"The Chromatic market from which to retrieve the pending liquidity information.\",\"tradingFeeRates\":\"The list of trading fee rates for which to retrieve the pending liquidity.\"},\"returns\":{\"_0\":\"pendingLiquidityList An array of PendingLiquidity representing the pending liquidity information for each trading fee rate.\"}}},\"title\":\"ChromaticLens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/ChromaticLens.sol\":\"ChromaticLens\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\",\"keccak256\":\"0x8b4a492c14765d24f935516cb3437a1b39fbd65f20fc8828e7880fb1bdcfba86\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/core/interfaces/ICLBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\n\\n/**\\n * @title ICLBToken\\n * @dev Interface for CLBToken contract, which represents Liquidity Bin tokens.\\n */\\ninterface ICLBToken is IERC1155, IERC1155MetadataURI {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     * @param id The token ID for which to retrieve the total supply.\\n     * @return The total supply of tokens for the given token ID.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Total amounts of tokens in with the given ids.\\n     * @param ids The token IDs for which to retrieve the total supply.\\n     * @return The total supples of tokens for the given token IDs.\\n     */\\n    function totalSupplyBatch(uint256[] memory ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Mints new tokens and assigns them to the specified address.\\n     * @param to The address to which the minted tokens will be assigned.\\n     * @param id The token ID to mint.\\n     * @param amount The amount of tokens to mint.\\n     * @param data Additional data to pass during the minting process.\\n     */\\n    function mint(address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Burns tokens from a specified address.\\n     * @param from The address from which to burn tokens.\\n     * @param id The token ID to burn.\\n     * @param amount The amount of tokens to burn.\\n     */\\n    function burn(address from, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Retrieves the number of decimals used for token amounts.\\n     * @return The number of decimals used for token amounts.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Retrieves the name of a token.\\n     * @param id The token ID for which to retrieve the name.\\n     * @return The name of the token.\\n     */\\n    function name(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the description of a token.\\n     * @param id The token ID for which to retrieve the description.\\n     * @return The description of the token.\\n     */\\n    function description(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the image URI of a token.\\n     * @param id The token ID for which to retrieve the image URI.\\n     * @return The image URI of the token.\\n     */\\n    function image(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x104e532ccc23403fdf1b340c292d208c3837f9abd29eda787eec5b6ac1438488\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IMarketTrade} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketTrade.sol\\\";\\nimport {IMarketLiquidity} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidity.sol\\\";\\nimport {IMarketLens} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLens.sol\\\";\\nimport {IMarketState} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketState.sol\\\";\\nimport {IMarketLiquidate} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidate.sol\\\";\\nimport {IMarketSettle} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketSettle.sol\\\";\\n\\n/**\\n * @title IChromaticMarket\\n * @dev Interface for the Chromatic Market contract, which combines trade and liquidity functionalities.\\n */\\ninterface IChromaticMarket is\\n    IMarketTrade,\\n    IMarketLiquidity,\\n    IMarketLens,\\n    IMarketState,\\n    IMarketLiquidate,\\n    IMarketSettle\\n{\\n\\n}\\n\",\"keccak256\":\"0x1f4180fc5c9ce9aa38b54a38fb51ed4acdc3f9f6be8021b46f1b183b12934f5e\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IMarketDeployer} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IMarketDeployer.sol\\\";\\nimport {ISettlementTokenRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\\\";\\nimport {IOracleProviderRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IOracleProviderRegistry.sol\\\";\\n\\n/**\\n * @title IChromaticMarketFactory\\n * @dev Interface for the Chromatic Market Factory contract.\\n */\\ninterface IChromaticMarketFactory is\\n    IMarketDeployer,\\n    IOracleProviderRegistry,\\n    ISettlementTokenRegistry,\\n    IInterestCalculator\\n{\\n    /**\\n     * @notice Emitted when the DAO address is updated.\\n     * @param daoOld The old DAO address.\\n     * @param daoNew The new DAO address.\\n     */\\n    event DaoUpdated(address indexed daoOld, address indexed daoNew);\\n\\n    /**\\n     * @notice Emitted when the DAO treasury address is updated.\\n     * @param treasuryOld The old DAO treasury address.\\n     * @param treasuryNew The new DAO treasury address.\\n     */\\n    event TreasuryUpdated(address indexed treasuryOld, address indexed treasuryNew);\\n\\n    /**\\n     * @notice Emitted when the liquidator address is updated.\\n     * @param liquidatorOld The old liquidator address.\\n     * @param liquidatorNew The new liquidator address.\\n     */\\n    event LiquidatorUpdated(address indexed liquidatorOld, address indexed liquidatorNew);\\n\\n    /**\\n     * @notice Emitted when the keeper fee payer address is updated.\\n     * @param keeperFeePayerOld The old keeper fee payer address.\\n     * @param keeperFeePayerNew The new keeper fee payer address.\\n     */\\n    event KeeperFeePayerUpdated(\\n        address indexed keeperFeePayerOld,\\n        address indexed keeperFeePayerNew\\n    );\\n\\n    /**\\n     * @notice Emitted when the default protocol fee rate is updated.\\n     * @param defaultProtocolFeeRateOld The old default protocol fee rate.\\n     * @param defaultProtocolFeeRateNew The new default protocol fee rate.\\n     */\\n    event DefaultProtocolFeeRateUpdated(\\n        uint16 indexed defaultProtocolFeeRateOld,\\n        uint16 indexed defaultProtocolFeeRateNew\\n    );\\n\\n    /**\\n     * @notice Emitted when the vault address is set.\\n     * @param vault The vault address.\\n     */\\n    event VaultSet(address indexed vault);\\n\\n    /**\\n     * @notice Emitted when the market settlement task address is updated.\\n     * @param marketSettlementOld The old market settlement task address.\\n     * @param marketSettlementNew The new market settlement task address.\\n     */\\n    event MarketSettlementUpdated(\\n        address indexed marketSettlementOld,\\n        address indexed marketSettlementNew\\n    );\\n\\n    /**\\n     * @notice Emitted when a market is created.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @param market The address of the created market.\\n     */\\n    event MarketCreated(\\n        address indexed oracleProvider,\\n        address indexed settlementToken,\\n        address indexed market\\n    );\\n\\n    /**\\n     * @notice Returns the address of the DAO.\\n     * @return The address of the DAO.\\n     */\\n    function dao() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO treasury.\\n     * @return The address of the DAO treasury.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the liquidator.\\n     * @return The address of the liquidator.\\n     */\\n    function liquidator() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the vault.\\n     * @return The address of the vault.\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the keeper fee payer.\\n     * @return The address of the keeper fee payer.\\n     */\\n    function keeperFeePayer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the market settlement task.\\n     * @return The address of the market settlement task.\\n     */\\n    function marketSettlement() external view returns (address);\\n\\n    /**\\n     * @notice Returns the default protocol fee rate.\\n     * @return The default protocol fee rate.\\n     */\\n    function defaultProtocolFeeRate() external view returns (uint16);\\n\\n    /**\\n     * @notice Updates the DAO address.\\n     * @param _dao The new DAO address.\\n     */\\n    function updateDao(address _dao) external;\\n\\n    /**\\n     * @notice Updates the DAO treasury address.\\n     * @param _treasury The new DAO treasury address.\\n     */\\n    function updateTreasury(address _treasury) external;\\n\\n    /**\\n     * @notice Updates the liquidator address.\\n     * @param _liquidator The new liquidator address.\\n     */\\n    function updateLiquidator(address _liquidator) external;\\n\\n    /**\\n     * @notice Updates the keeper fee payer address.\\n     * @param _keeperFeePayer The new keeper fee payer address.\\n     */\\n    function updateKeeperFeePayer(address _keeperFeePayer) external;\\n\\n    /**\\n     * @notice Updates the default protocl fee rate.\\n     * @param _defaultProtocolFeeRate The new default protocol fee rate.\\n     */\\n    function updateDefaultProtocolFeeRate(uint16 _defaultProtocolFeeRate) external;\\n\\n    /**\\n     * @notice Sets the vault address.\\n     * @param _vault The vault address.\\n     */\\n    function setVault(address _vault) external;\\n\\n    /**\\n     * @notice Updates the market settlement task address.\\n     * @param _marketSettlement The new market settlement task address.\\n     */\\n    function updateMarketSettlement(address _marketSettlement) external;\\n\\n    /**\\n     * @notice Returns an array of all market addresses.\\n     * @return markets An array of all market addresses.\\n     */\\n    function getMarkets() external view returns (address[] memory markets);\\n\\n    /**\\n     * @notice Returns an array of market addresses associated with a settlement token.\\n     * @param settlementToken The address of the settlement token.\\n     * @return An array of market addresses.\\n     */\\n    function getMarketsBySettlmentToken(\\n        address settlementToken\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of a market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @return The address of the market.\\n     */\\n    function getMarket(\\n        address oracleProvider,\\n        address settlementToken\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Creates a new market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     */\\n    function createMarket(address oracleProvider, address settlementToken) external;\\n\\n    /**\\n     * @notice Checks if a market is registered.\\n     * @param market The address of the market.\\n     * @return True if the market is registered, false otherwise.\\n     */\\n    function isRegisteredMarket(address market) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x55af351b2b8078b2bce59668930a3d8f2102a97d38a50859f0f93183712cf2b0\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ILendingPool} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/ILendingPool.sol\\\";\\nimport {IVault} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/IVault.sol\\\";\\n\\n/**\\n * @title IChromaticVault\\n * @notice Interface for the Chromatic Vault contract.\\n */\\ninterface IChromaticVault is IVault, ILendingPool {\\n    /**\\n     * @dev Emitted when market earning is accumulated.\\n     * @param market The address of the market.\\n     * @param earning The amount of earning accumulated.\\n     */\\n    event MarketEarningAccumulated(address indexed market, uint256 earning);\\n\\n    /**\\n     * @dev Emitted when maker earning is distributed.\\n     * @param token The address of the settlement token.\\n     * @param earning The amount of earning distributed.\\n     * @param usedKeeperFee The amount of keeper fee used.\\n     */\\n    event MakerEarningDistributed(\\n        address indexed token,\\n        uint256 indexed earning,\\n        uint256 indexed usedKeeperFee\\n    );\\n\\n    /**\\n     * @dev Emitted when market earning is distributed.\\n     * @param market The address of the market.\\n     * @param earning The amount of earning distributed.\\n     * @param usedKeeperFee The amount of keeper fee used.\\n     * @param marketBalance The balance of the market.\\n     */\\n    event MarketEarningDistributed(\\n        address indexed market,\\n        uint256 indexed earning,\\n        uint256 indexed usedKeeperFee,\\n        uint256 marketBalance\\n    );\\n\\n    /**\\n     * @notice Emitted when the vault earning distributor address is set.\\n     * @param vaultEarningDistributor The vault earning distributor address.\\n     * @param oldVaultEarningDistributor The old vault earning distributor address.\\n     */\\n    event VaultEarningDistributorSet(\\n        address indexed vaultEarningDistributor,\\n        address indexed oldVaultEarningDistributor\\n    );\\n\\n    function setVaultEarningDistributor(address _earningDistributor) external;\\n\\n    function pendingMakerEarnings(address token) external view returns (uint256);\\n\\n    function pendingMarketEarnings(address market) external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function createMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Cancels a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function cancelMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Distributes the maker earning for a token to the each markets.\\n     * @param token The address of the settlement token.\\n     * @param fee The keeper fee amount.\\n     * @param keeper The keeper address to receive fee.\\n     */\\n    function distributeMakerEarning(address token, uint256 fee, address keeper) external;\\n\\n    /**\\n     * @notice Creates a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function createMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Cancels a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function cancelMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Distributes the market earning for a market to the each bins.\\n     * @param market The address of the market.\\n     * @param fee The fee amount.\\n     * @param keeper The keeper address to receive fee.\\n     */\\n    function distributeMarketEarning(address market, uint256 fee, address keeper) external;\\n}\\n\",\"keccak256\":\"0xeada749c03391140157b03f2a165f142ab55bf2aa227f98299a29c86fa13daf9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IInterestCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IInterestCalculator\\n * @dev Interface for an interest calculator contract.\\n */\\ninterface IInterestCalculator {\\n    /**\\n     * @notice Calculates the interest accrued for a given token and amount within a specified time range.\\n     * @param token The address of the token.\\n     * @param amount The amount of the token.\\n     * @param from The starting timestamp (inclusive) of the time range.\\n     * @param to The ending timestamp (exclusive) of the time range.\\n     * @return The accrued interest for the specified token and amount within the given time range.\\n     */\\n    function calculateInterest(\\n        address token,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf70b44ce6eb1422abed056169dc5db83ddbb2ee34d7751192f00e6cb3dc1ccbe\",\"license\":\"MIT\"},\"contracts/core/interfaces/callback/IChromaticLiquidityCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IChromaticLiquidityCallback\\n * @dev Interface for a contract that handles liquidity callbacks in the Chromatic protocol.\\n *      Liquidity callbacks are used to handle various operations related to liquidity management.\\n *      This interface defines the function signatures for different types of liquidity callbacks.\\n */\\ninterface IChromaticLiquidityCallback {\\n    /**\\n     * @notice Handles the callback after adding liquidity to the Chromatic protocol.\\n     * @param settlementToken The address of the settlement token used for adding liquidity.\\n     * @param vault The address of the vault where the liquidity is added.\\n     * @param data Additional data associated with the liquidity addition.\\n     */\\n    function addLiquidityCallback(\\n        address settlementToken,\\n        address vault,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after adding liquidity to the Chromatic protocol.\\n     * @param settlementToken The address of the settlement token used for adding liquidity.\\n     * @param vault The address of the vault where the liquidity is added.\\n     * @param data Additional data associated with the liquidity addition.\\n     */\\n    function addLiquidityBatchCallback(\\n        address settlementToken,\\n        address vault,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after claiming liquidity from the Chromatic protocol.\\n     * @param receiptId The ID of the liquidity claim receipt.\\n     * @param feeRate The trading fee rate associated with the liquidity claim.\\n     * @param depositedAmount The amount of liquidity deposited.\\n     * @param mintedCLBTokenAmount The amount of CLB tokens minted as liquidity.\\n     * @param data Additional data associated with the liquidity claim.\\n     */\\n    function claimLiquidityCallback(\\n        uint256 receiptId,\\n        int16 feeRate,\\n        uint256 depositedAmount,\\n        uint256 mintedCLBTokenAmount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after claiming liquidity from the Chromatic protocol.\\n     * @param receiptIds The array of the liquidity receipt IDs.\\n     * @param feeRates The array of trading fee rates associated with each claim in the batch.\\n     * @param depositedAmounts The array of deposited liquidity amounts for each receipt in the batch.\\n     * @param mintedCLBTokenAmounts The array of CLB token amounts minted for each receipt in the batch.\\n     * @param data Additional data associated with the liquidity claim.\\n     */\\n    function claimLiquidityBatchCallback(\\n        uint256[] calldata receiptIds,\\n        int16[] calldata feeRates,\\n        uint256[] calldata depositedAmounts,\\n        uint256[] calldata mintedCLBTokenAmounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after removing liquidity from the Chromatic protocol.\\n     * @param clbToken The address of the Chromatic liquidity token.\\n     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.\\n     * @param data Additional data associated with the liquidity removal.\\n     */\\n    function removeLiquidityCallback(\\n        address clbToken,\\n        uint256 clbTokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after removing liquidity from the Chromatic protocol.\\n     * @param clbToken The address of the Chromatic liquidity token.\\n     * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.\\n     * @param data Additional data associated with the liquidity removal.\\n     */\\n    function removeLiquidityBatchCallback(\\n        address clbToken,\\n        uint256[] calldata clbTokenIds,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after withdrawing liquidity from the Chromatic protocol.\\n     * @param receiptId The ID of the liquidity withdrawal receipt.\\n     * @param feeRate The trading fee rate associated with the liquidity withdrawal.\\n     * @param withdrawnAmount The amount of liquidity that has been withdrawn.\\n     * @param burnedCLBTokenAmount The amount of CLB tokens burned during the withdrawal.\\n     * @param data Additional data associated with the liquidity withdrawal.\\n     */\\n    function withdrawLiquidityCallback(\\n        uint256 receiptId,\\n        int16 feeRate,\\n        uint256 withdrawnAmount,\\n        uint256 burnedCLBTokenAmount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after withdrawing liquidity from the Chromatic protocol.\\n     * @param receiptIds The array of the liquidity receipt IDs.\\n     * @param feeRates The array of trading fee rates associated with each withdrawal in the batch.\\n     * @param withdrawnAmounts The array of withdrawn liquidity amounts for each receipt in the batch.\\n     * @param burnedCLBTokenAmounts The array of CLB token amounts burned for each receipt in the batch.\\n     * @param data Additional data associated with the liquidity withdrawal.\\n     */\\n    function withdrawLiquidityBatchCallback(\\n        uint256[] calldata receiptIds,\\n        int16[] calldata feeRates,\\n        uint256[] calldata withdrawnAmounts,\\n        uint256[] calldata burnedCLBTokenAmounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x723edd42199cb728b843bcfe067d5ca0e23f10008debc648dc99b7c06f253b1b\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/IMarketDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title An interface for a contract that is capable of deploying Chromatic markets\\n * @notice A contract that constructs a market must implement this to pass arguments to the market\\n * @dev This is used to avoid having constructor arguments in the market contract, which results in the init code hash\\n * of the market being constant allowing the CREATE2 address of the market to be cheaply computed on-chain\\n */\\ninterface IMarketDeployer {\\n    /**\\n     * @notice Get the parameters to be used in constructing the market, set transiently during market creation.\\n     * @dev Called by the market constructor to fetch the parameters of the market\\n     * Returns underlyingAsset The underlying asset of the market\\n     * Returns settlementToken The settlement token of the market\\n     * Returns protocolFeeRate The protocol fee rate of the market\\n     * Returns vPoolCapacity Capacity of virtual future pool\\n     * Returns vPoolA Amplification coefficient of virtual future pool, precise value\\n     */\\n    function parameters()\\n        external\\n        view\\n        returns (address oracleProvider, address settlementToken, uint16 protocolFeeRate);\\n}\\n\",\"keccak256\":\"0xd26775e3671a4b653a631c3d94de5c4e193113fb4d9d2323a2bc83081e682bff\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/IOracleProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {OracleProviderProperties} from \\\"@chromatic-protocol/contracts/core/libraries/registry/OracleProviderProperties.sol\\\";\\n\\n/**\\n * @title IOracleProviderRegistry\\n * @dev Interface for the Oracle Provider Registry contract.\\n */\\ninterface IOracleProviderRegistry {\\n    /**\\n     * @dev Emitted when a new oracle provider is registered.\\n     * @param oracleProvider The address of the registered oracle provider.\\n     * @param properties The properties of the registered oracle provider.\\n     */\\n    event OracleProviderRegistered(\\n        address indexed oracleProvider,\\n        OracleProviderProperties properties\\n    );\\n\\n    /**\\n     * @dev Emitted when an oracle provider is unregistered.\\n     * @param oracleProvider The address of the unregistered oracle provider.\\n     */\\n    event OracleProviderUnregistered(address indexed oracleProvider);\\n\\n    /**\\n     * @dev Emitted when the take-profit basis points range of an oracle provider is updated.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\\n     */\\n    event UpdateTakeProfitBPSRange(\\n        address indexed oracleProvider,\\n        uint32 indexed minTakeProfitBPS,\\n        uint32 indexed maxTakeProfitBPS\\n    );\\n\\n    /**\\n     * @dev Emitted when the level of an oracle provider is set.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new level set for the oracle provider.\\n     */\\n    event UpdateLeverageLevel(address indexed oracleProvider, uint8 indexed level);\\n\\n    /**\\n     * @notice Registers an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to register.\\n     * @param properties The properties of the oracle provider.\\n     */\\n    function registerOracleProvider(\\n        address oracleProvider,\\n        OracleProviderProperties memory properties\\n    ) external;\\n\\n    /**\\n     * @notice Unregisters an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to unregister.\\n     */\\n    function unregisterOracleProvider(address oracleProvider) external;\\n\\n    /**\\n     * @notice Gets the registered oracle providers.\\n     * @return An array of registered oracle provider addresses.\\n     */\\n    function registeredOracleProviders() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if an oracle provider is registered.\\n     * @param oracleProvider The address of the oracle provider to check.\\n     * @return A boolean indicating if the oracle provider is registered.\\n     */\\n    function isRegisteredOracleProvider(address oracleProvider) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the properties of an oracle provider.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @return The properties of the oracle provider.\\n     */\\n    function getOracleProviderProperties(\\n        address oracleProvider\\n    ) external view returns (OracleProviderProperties memory);\\n\\n    /**\\n     * @notice Updates the take-profit basis points range of an oracle provider.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\\n     */\\n    function updateTakeProfitBPSRange(\\n        address oracleProvider,\\n        uint32 minTakeProfitBPS,\\n        uint32 maxTakeProfitBPS\\n    ) external;\\n\\n    /**\\n     * @notice Updates the leverage level of an oracle provider in the registry.\\n     * @dev The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new leverage level to be set for the oracle provider.\\n     */\\n    function updateLeverageLevel(address oracleProvider, uint8 level) external;\\n}\\n\",\"keccak256\":\"0xd5d7bbf0355ac791412f58b3c469b864833cd962db6280bfa5938a20131cdc92\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {InterestRate} from \\\"@chromatic-protocol/contracts/core/libraries/InterestRate.sol\\\";\\n\\n/**\\n * @title ISettlementTokenRegistry\\n * @dev Interface for the Settlement Token Registry contract.\\n */\\ninterface ISettlementTokenRegistry {\\n    /**\\n     * @dev Emitted when a new settlement token is registered.\\n     * @param token The address of the registered settlement token.\\n     * @param oracleProvider The oracle provider address for the settlement token.\\n     * @param minimumMargin The minimum margin for the markets using this settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    event SettlementTokenRegistered(\\n        address indexed token,\\n        address indexed oracleProvider,\\n        uint256 minimumMargin,\\n        uint256 interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    );\\n\\n    /**\\n     * @dev Emitted when the oracle provider address for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param oracleProvider The oracle provider address for the settlement token.\\n     */\\n    event SetSettlementTokenOracleProvider(address indexed token, address indexed oracleProvider);\\n\\n    /**\\n     * @dev Emitted when the minimum margin for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    event SetMinimumMargin(address indexed token, uint256 indexed minimumMargin);\\n\\n    /**\\n     * @dev Emitted when the flash loan fee rate for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    event SetFlashLoanFeeRate(address indexed token, uint256 indexed flashLoanFeeRate);\\n\\n    /**\\n     * @dev Emitted when the earning distribution threshold for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    event SetEarningDistributionThreshold(\\n        address indexed token,\\n        uint256 indexed earningDistributionThreshold\\n    );\\n\\n    /**\\n     * @dev Emitted when the Uniswap fee tier for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    event SetUniswapFeeTier(address indexed token, uint24 indexed uniswapFeeTier);\\n\\n    /**\\n     * @dev Emitted when an interest rate record is appended for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event InterestRateRecordAppended(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the last interest rate record is removed for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event LastInterestRateRecordRemoved(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @notice Registers a new settlement token.\\n     * @param token The address of the settlement token to register.\\n     * @param oracleProvider The oracle provider address for the settlement token.\\n     * @param minimumMargin The minimum margin for the settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    function registerSettlementToken(\\n        address token,\\n        address oracleProvider,\\n        uint256 minimumMargin,\\n        uint256 interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    ) external;\\n\\n    /**\\n     * @notice Gets the list of registered settlement tokens.\\n     * @return An array of addresses representing the registered settlement tokens.\\n     */\\n    function registeredSettlementTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if a settlement token is registered.\\n     * @param token The address of the settlement token to check.\\n     * @return True if the settlement token is registered, false otherwise.\\n     */\\n    function isRegisteredSettlementToken(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the oracle provider address for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The oracle provider address for the settlement token.\\n     */\\n    function getSettlementTokenOracleProvider(address token) external view returns (address);\\n\\n    /**\\n     * @notice Sets the oracle provider address for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param oracleProvider The new oracle provider address for the settlement token.\\n     */\\n    function setSettlementTokenOracleProvider(address token, address oracleProvider) external;\\n\\n    /**\\n     * @notice Gets the minimum margin for a settlement token.\\n     * @dev The minimumMargin is used as the minimum value for the taker margin of a position\\n     *      or as the minimum value for the maker margin of each bin.\\n     * @param token The address of the settlement token.\\n     * @return The minimum margin for the settlement token.\\n     */\\n    function getMinimumMargin(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the minimum margin for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    function setMinimumMargin(address token, uint256 minimumMargin) external;\\n\\n    /**\\n     * @notice Gets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The flash loan fee rate for the settlement token.\\n     */\\n    function getFlashLoanFeeRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    function setFlashLoanFeeRate(address token, uint256 flashLoanFeeRate) external;\\n\\n    /**\\n     * @notice Gets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The earning distribution threshold for the settlement token.\\n     */\\n    function getEarningDistributionThreshold(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    function setEarningDistributionThreshold(\\n        address token,\\n        uint256 earningDistributionThreshold\\n    ) external;\\n\\n    /**\\n     * @notice Gets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The Uniswap fee tier for the settlement token.\\n     */\\n    function getUniswapFeeTier(address token) external view returns (uint24);\\n\\n    /**\\n     * @notice Sets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    function setUniswapFeeTier(address token, uint24 uniswapFeeTier) external;\\n\\n    /**\\n     * @notice Appends an interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    function appendInterestRateRecord(\\n        address token,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes the last interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     */\\n    function removeLastInterestRateRecord(address token) external;\\n\\n    /**\\n     * @notice Gets the current interest rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The current interest rate for the settlement token.\\n     */\\n    function currentInterestRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets all the interest rate records for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return An array of interest rate records for the settlement token.\\n     */\\n    function getInterestRateRecords(\\n        address token\\n    ) external view returns (InterestRate.Record[] memory);\\n}\\n\",\"keccak256\":\"0x5494b39be7e9f1d831e932c1d31513c5a7c8eb86e3054c12c59b71de29aefc9d\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {PendingPosition, ClosingPosition, PendingLiquidity, ClaimableLiquidity, LiquidityBinStatus} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\n\\n/**\\n * @title IMarketLens\\n * @dev The interface for liquidity information retrieval in a market.\\n */\\ninterface IMarketLens {\\n    /**\\n     * @dev Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.\\n     * @return amount The total liquidity amount for the specified trading fee rate.\\n     */\\n    function getBinLiquidity(int16 tradingFeeRate) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.\\n     * @return amount The available (free) liquidity amount for the specified trading fee rate.\\n     */\\n    function getBinFreeLiquidity(int16 tradingFeeRate) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev Retrieves the values of a specific trading fee rate's bins in the liquidity pool.\\n     *      The value of a bin represents the total valuation of the liquidity in the bin.\\n     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.\\n     * @return values The value list of the bins for the specified trading fee rates.\\n     */\\n    function getBinValues(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (uint256[] memory values);\\n\\n    /**\\n     * @dev Retrieves the liquidity receipt with the given receipt ID.\\n     *      It throws NotExistLpReceipt if the specified receipt ID does not exist.\\n     * @param receiptId The ID of the liquidity receipt to retrieve.\\n     * @return receipt The liquidity receipt with the specified ID.\\n     */\\n    function getLpReceipt(uint256 receiptId) external view returns (LpReceipt memory);\\n\\n    /**\\n     * @dev Retrieves the liquidity receipts with the given receipt IDs.\\n     *      It throws NotExistLpReceipt if the specified receipt ID does not exist.\\n     * @param receiptIds The ID list of the liquidity receipt to retrieve.\\n     * @return receipts The liquidity receipt list with the specified IDs.\\n     */\\n    function getLpReceipts(\\n        uint256[] calldata receiptIds\\n    ) external view returns (LpReceipt[] memory);\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information for a specific trading fee rate from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.\\n     * @return pendingLiquidity An instance of PendingLiquidity representing the pending liquidity information.\\n     */\\n    function pendingLiquidity(int16 tradingFeeRate) external view returns (PendingLiquidity memory);\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information for multiple trading fee rates from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.\\n     * @return pendingLiquidityBatch An array of PendingLiquidity instances representing the pending liquidity information for each trading fee rate.\\n     */\\n    function pendingLiquidityBatch(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (PendingLiquidity[] memory);\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        int16 tradingFeeRate,\\n        uint256 oracleVersion\\n    ) external view returns (ClaimableLiquidity memory);\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for multiple trading fee rates and a specific oracle version from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidityBatch An array of ClaimableLiquidity instances representing the claimable liquidity information for each trading fee rate.\\n     */\\n    function claimableLiquidityBatch(\\n        int16[] calldata tradingFeeRates,\\n        uint256 oracleVersion\\n    ) external view returns (ClaimableLiquidity[] memory);\\n\\n    /**\\n     * @dev Retrieves the liquidity bin statuses for the caller's liquidity pool.\\n     * @return statuses An array of LiquidityBinStatus representing the liquidity bin statuses.\\n     */\\n    function liquidityBinStatuses() external view returns (LiquidityBinStatus[] memory);\\n\\n    /**\\n     * @dev Retrieves the position with the given position ID.\\n     *      It throws NotExistPosition if the specified position ID does not exist.\\n     * @param positionId The ID of the position to retrieve.\\n     * @return position The position with the specified ID.\\n     */\\n    function getPosition(uint256 positionId) external view returns (Position memory);\\n\\n    /**\\n     * @dev Retrieves multiple positions by their IDs.\\n     * @param positionIds The IDs of the positions to retrieve.\\n     * @return positions An array of retrieved positions.\\n     */\\n    function getPositions(\\n        uint256[] calldata positionIds\\n    ) external view returns (Position[] memory positions);\\n\\n    /**\\n     * @dev Retrieves the pending position information for a specific trading fee rate from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.\\n     * @return pendingPosition An instance of PendingPosition representing the pending position information.\\n     */\\n    function pendingPosition(int16 tradingFeeRate) external view returns (PendingPosition memory);\\n\\n    /**\\n     * @dev Retrieves the pending position information for multiple trading fee rates from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending position.\\n     * @return pendingPositionBatch An array of PendingPosition instances representing the pending position information for each trading fee rate.\\n     */\\n    function pendingPositionBatch(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (PendingPosition[] memory);\\n\\n    /**\\n     * @dev Retrieves the closing position information for a specific trading fee rate from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the closing position.\\n     * @return closingPosition An instance of PendingPosition representing the closing position information.\\n     */\\n    function closingPosition(int16 tradingFeeRate) external view returns (ClosingPosition memory);\\n\\n    /**\\n     * @dev Retrieves the closing position information for multiple trading fee rates from the associated LiquidityPool.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the closing position.\\n     * @return pendingPositionBatch An array of PendingPosition instances representing the closing position information for each trading fee rate.\\n     */\\n    function closingPositionBatch(\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (ClosingPosition[] memory);\\n}\\n\",\"keccak256\":\"0x49c617df01dfac6b3a58354b2e865a4d92da240bc786c50bd993837e61d51693\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketLiquidate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\n\\n/**\\n * @title IMarketLiquidate\\n * @dev Interface for liquidating and claiming positions in a market.\\n */\\ninterface IMarketLiquidate {\\n    /**\\n     * @dev Emitted when a position is claimed by keeper.\\n     * @param account The address of the account claiming the position.\\n     * @param pnl The profit or loss of the claimed position.\\n     * @param interest The interest paid for the claimed position.\\n     * @param usedKeeperFee The amount of keeper fee used for the liquidation.\\n     * @param position The claimed position.\\n     */\\n    event ClaimPositionByKeeper(\\n        address indexed account,\\n        int256 indexed pnl,\\n        uint256 indexed interest,\\n        uint256 usedKeeperFee,\\n        Position position\\n    );\\n\\n    /**\\n     * @dev Emitted when a position is liquidated.\\n     * @param account The address of the account being liquidated.\\n     * @param pnl The profit or loss of the claimed position.\\n     * @param interest The interest paid for the claimed position.\\n     * @param usedKeeperFee The amount of keeper fee used for the liquidation.\\n     * @param position The liquidated position.\\n     */\\n    event Liquidate(\\n        address indexed account,\\n        int256 indexed pnl,\\n        uint256 indexed interest,\\n        uint256 usedKeeperFee,\\n        Position position\\n    );\\n\\n    /**\\n     * @dev Checks if a position is eligible for liquidation.\\n     * @param positionId The ID of the position to check.\\n     * @return A boolean indicating if the position is eligible for liquidation.\\n     */\\n    function checkLiquidation(uint256 positionId) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if a position is eligible for liquidation.\\n     * @param positionId The ID of the position to check.\\n     * @param oracleVersion The oracle version data for liquidation check.\\n     * @return A boolean indicating if the position is eligible for liquidation.\\n     */\\n    function checkLiquidationWithOracleVersion(\\n        uint256 positionId,\\n        IOracleProvider.OracleVersion memory oracleVersion\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Liquidates a position.\\n     * @param positionId The ID of the position to liquidate.\\n     * @param keeper The address of the keeper performing the liquidation.\\n     * @param keeperFee The native token amount of the keeper's fee.\\n     */\\n    function liquidate(uint256 positionId, address keeper, uint256 keeperFee) external;\\n\\n    /**\\n     * @dev Checks if a position is eligible for claim.\\n     * @param positionId The ID of the position to check.\\n     * @return A boolean indicating if the position is eligible for claim.\\n     */\\n    function checkClaimPosition(uint256 positionId) external view returns (bool);\\n\\n    /**\\n     * @dev Claims a closed position on behalf of a keeper.\\n     * @param positionId The ID of the position to claim.\\n     * @param keeper The address of the keeper claiming the position.\\n     * @param keeperFee The native token amount of the keeper's fee.\\n     */\\n    function claimPosition(uint256 positionId, address keeper, uint256 keeperFee) external;\\n}\\n\",\"keccak256\":\"0x94e7286c717c000cef88cd1f17a3bb5eacaded11d1b010b76e29b4b6c31c5bc6\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\n\\n/**\\n * @title IMarketLiquidity\\n * @dev The interface for liquidity operations in a market.\\n */\\ninterface IMarketLiquidity {\\n    /**\\n     * @dev Emitted when liquidity is added to the market.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event AddLiquidity(LpReceipt receipt);\\n\\n    /**\\n     * @dev Emitted when liquidity is added to the market.\\n     * @param receipts An array of LP receipts.\\n     */\\n    event AddLiquidityBatch(LpReceipt[] receipts);\\n\\n    /**\\n     * @dev Emitted when liquidity is claimed from the market.\\n     * @param clbTokenAmount The amount of CLB tokens claimed.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event ClaimLiquidity(LpReceipt receipt, uint256 indexed clbTokenAmount);\\n\\n    /**\\n     * @dev Emitted when liquidity is claimed from the market.\\n     * @param receipts An array of LP receipts.\\n     * @param clbTokenAmounts The amount list of CLB tokens claimed.\\n     */\\n    event ClaimLiquidityBatch(LpReceipt[] receipts, uint256[] clbTokenAmounts);\\n\\n    /**\\n     * @dev Emitted when liquidity is removed from the market.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event RemoveLiquidity(LpReceipt receipt);\\n\\n    /**\\n     * @dev Emitted when liquidity is removed from the market.\\n     * @param receipts An array of LP receipts.\\n     */\\n    event RemoveLiquidityBatch(LpReceipt[] receipts);\\n\\n    /**\\n     * @dev Emitted when liquidity is withdrawn from the market.\\n     * @param receipt The liquidity receipt.\\n     * @param amount The amount of liquidity withdrawn.\\n     * @param burnedCLBTokenAmount The amount of burned CLB tokens.\\n     */\\n    event WithdrawLiquidity(\\n        LpReceipt receipt,\\n        uint256 indexed amount,\\n        uint256 indexed burnedCLBTokenAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when liquidity is withdrawn from the market.\\n     * @param receipts An array of LP receipts.\\n     * @param amounts The amount list of liquidity withdrawn.\\n     * @param burnedCLBTokenAmounts The amount list of burned CLB tokens.\\n     */\\n    event WithdrawLiquidityBatch(\\n        LpReceipt[] receipts,\\n        uint256[] amounts,\\n        uint256[] burnedCLBTokenAmounts\\n    );\\n\\n    /**\\n     * @dev Adds liquidity to the market.\\n     * @param recipient The address to receive the liquidity tokens.\\n     * @param tradingFeeRate The trading fee rate for the liquidity.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function addLiquidity(\\n        address recipient,\\n        int16 tradingFeeRate,\\n        bytes calldata data\\n    ) external returns (LpReceipt memory);\\n\\n    /**\\n     * @notice Adds liquidity to multiple liquidity bins of the market in a batch.\\n     * @param recipient The address of the recipient for each liquidity bin.\\n     * @param tradingFeeRates An array of fee rates for each liquidity bin.\\n     * @param amounts An array of amounts to add as liquidity for each bin.\\n     * @param data Additional data for the liquidity callback.\\n     * @return An array of LP receipts.\\n     */\\n    function addLiquidityBatch(\\n        address recipient,\\n        int16[] calldata tradingFeeRates,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external returns (LpReceipt[] memory);\\n\\n    /**\\n     * @dev Claims liquidity from a liquidity receipt.\\n     * @param receiptId The ID of the liquidity receipt.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function claimLiquidity(uint256 receiptId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Claims liquidity from a liquidity receipt.\\n     * @param receiptIds The array of the liquidity receipt IDs.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function claimLiquidityBatch(uint256[] calldata receiptIds, bytes calldata data) external;\\n\\n    /**\\n     * @dev Removes liquidity from the market.\\n     * @param recipient The address to receive the removed liquidity.\\n     * @param tradingFeeRate The trading fee rate for the liquidity.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function removeLiquidity(\\n        address recipient,\\n        int16 tradingFeeRate,\\n        bytes calldata data\\n    ) external returns (LpReceipt memory);\\n\\n    /**\\n     * @dev Removes liquidity from the market.\\n     * @param recipient The address to receive the removed liquidity.\\n     * @param tradingFeeRates An array of fee rates for each liquidity bin.\\n     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function removeLiquidityBatch(\\n        address recipient,\\n        int16[] calldata tradingFeeRates,\\n        uint256[] calldata clbTokenAmounts,\\n        bytes calldata data\\n    ) external returns (LpReceipt[] memory);\\n\\n    /**\\n     * @dev Withdraws liquidity from a liquidity receipt.\\n     * @param receiptId The ID of the liquidity receipt.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function withdrawLiquidity(uint256 receiptId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Withdraws liquidity from a liquidity receipt.\\n     * @param receiptIds The array of the liquidity receipt IDs.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function withdrawLiquidityBatch(uint256[] calldata receiptIds, bytes calldata data) external;\\n\\n    /**\\n     * @dev Distributes earning to the liquidity bins.\\n     * @param earning The amount of earning to distribute.\\n     * @param marketBalance The balance of the market.\\n     */\\n    function distributeEarningToBins(uint256 earning, uint256 marketBalance) external;\\n}\\n\",\"keccak256\":\"0xe60df36a3b456aa53a5d3289673c78b5bd590e82d7f53175399365edfa1f90b6\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketSettle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IMarketSettle\\n * @dev Interface for market settlement.\\n */\\ninterface IMarketSettle {\\n    /**\\n     * @notice Executes the settlement process for the Chromatic market.\\n     * @dev This function is called to settle the market.\\n     * @param feeRates The feeRate list of liquidity bin to settle.\\n     */\\n    function settle(int16[] calldata feeRates) external;\\n\\n    /**\\n     * @notice Executes the settlement process for the Chromatic market.\\n     * @dev This function is called to settle the market.\\n     */\\n    function settleAll() external;\\n}\\n\",\"keccak256\":\"0xb88a0c6429f6311db0b58b113d880ba1816aa7e59953f457ad1585d3d8b3e8a1\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport {PositionMode, LiquidityMode, DisplayMode} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IChromaticMarketFactory} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\n\\n/**\\n * @title IMarketState\\n * @dev Interface for accessing the state of a market contract.\\n */\\ninterface IMarketState {\\n    /**\\n     * @notice Emitted when the protocol fee rate of the market is changed\\n     * @param protocolFeeRateOld The previous value of the protocol fee rate\\n     * @param protocolFeeRateNew The updated value of the protocol fee rate\\n     */\\n    event ProtocolFeeRateUpdated(uint16 protocolFeeRateOld, uint16 protocolFeeRateNew);\\n\\n    /**\\n     * @notice Emitted when the position mode of the market is changed\\n     * @param positionModeOld The previous value of the position mode\\n     * @param positionModeNew The updated value of the position mode\\n     */\\n    event PositionModeUpdated(PositionMode positionModeOld, PositionMode positionModeNew);\\n\\n    /**\\n     * @notice Emitted when the liquidity mode of the market is changed\\n     * @param liquidityModeOld The previous value of the liquidity mode\\n     * @param liquidityModeNew The updated value of the liquidity mode\\n     */\\n    event LiquidityModeUpdated(LiquidityMode liquidityModeOld, LiquidityMode liquidityModeNew);\\n\\n    /**\\n     * @notice Emitted when the display mode of the market is changed\\n     * @param displayModeOld The previous value of the display mode\\n     * @param displayModeNew The updated value of the display mode\\n     */\\n    event DisplayModeUpdated(DisplayMode displayModeOld, DisplayMode displayModeNew);\\n\\n    /**\\n     * @dev Returns the factory contract for the market.\\n     * @return The factory contract.\\n     */\\n    function factory() external view returns (IChromaticMarketFactory);\\n\\n    /**\\n     * @dev Returns the settlement token of the market.\\n     * @return The settlement token.\\n     */\\n    function settlementToken() external view returns (IERC20Metadata);\\n\\n    /**\\n     * @dev Returns the oracle provider contract for the market.\\n     * @return The oracle provider contract.\\n     */\\n    function oracleProvider() external view returns (IOracleProvider);\\n\\n    /**\\n     * @dev Returns the CLB token contract for the market.\\n     * @return The CLB token contract.\\n     */\\n    function clbToken() external view returns (ICLBToken);\\n\\n    /**\\n     * @dev Returns the vault contract for the market.\\n     * @return The vault contract.\\n     */\\n    function vault() external view returns (IChromaticVault);\\n\\n    /**\\n     * @notice Returns the protocol fee rate\\n     * @return The protocol fee rate for the market\\n     */\\n    function protocolFeeRate() external view returns (uint16);\\n\\n    /**\\n     * @notice Update the new protocol fee rate\\n     * @param _protocolFeeRate new protocol fee rate for the market\\n     */\\n    function updateProtocolFeeRate(uint16 _protocolFeeRate) external;\\n\\n    /**\\n     * @notice Returns the position mode\\n     * @return The position mode for the market\\n     */\\n    function positionMode() external view returns (PositionMode);\\n\\n    /**\\n     * @notice Update the new position mode\\n     * @param _positionMode new position mode for the market\\n     */\\n    function updatePositionMode(PositionMode _positionMode) external;\\n\\n    /**\\n     * @notice Returns the liquidity mode\\n     * @return The liquidity mode for the market\\n     */\\n    function liquidityMode() external view returns (LiquidityMode);\\n\\n    /**\\n     * @notice Update the new liquidity mode\\n     * @param _liquidityMode new liquidity mode for the market\\n     */\\n    function updateLiquidityMode(LiquidityMode _liquidityMode) external;\\n\\n    /**\\n     * @notice Returns the display mode\\n     * @return The display mode for the market\\n     */\\n    function displayMode() external view returns (DisplayMode);\\n\\n    /**\\n     * @notice Update the new display mode\\n     * @param _displayMode new display mode for the market\\n     */\\n    function updateDisplayMode(DisplayMode _displayMode) external;\\n}\\n\",\"keccak256\":\"0xb83d49f8defed9e8c0425923d366cbd842b2e213ae589bcd83640007658c1c25\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketTrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\nimport {OpenPositionInfo, ClosePositionInfo} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\n\\n/**\\n * @title IMarketTrade\\n * @dev Interface for trading positions in a market.\\n */\\ninterface IMarketTrade {\\n    /**\\n     * @dev Emitted when a position is opened.\\n     * @param account The address of the account opening the position.\\n     * @param position The opened position.\\n     */\\n    event OpenPosition(address indexed account, Position position);\\n\\n    /**\\n     * @dev Emitted when a position is closed.\\n     * @param account The address of the account closing the position.\\n     * @param position The closed position.\\n     */\\n    event ClosePosition(address indexed account, Position position);\\n\\n    /**\\n     * @dev Emitted when a position is claimed.\\n     * @param account The address of the account claiming the position.\\n     * @param pnl The profit or loss of the claimed position.\\n     * @param interest The interest paid for the claimed position.\\n     * @param position The claimed position.\\n     */\\n    event ClaimPosition(\\n        address indexed account,\\n        int256 indexed pnl,\\n        uint256 indexed interest,\\n        Position position\\n    );\\n\\n    /**\\n     * @dev Emitted when protocol fees are transferred.\\n     * @param positionId The ID of the position for which the fees are transferred.\\n     * @param amount The amount of fees transferred.\\n     */\\n    event TransferProtocolFee(uint256 indexed positionId, uint256 indexed amount);\\n\\n    /**\\n     * @dev Opens a new position in the market.\\n     * @param qty The quantity of the position.\\n     * @param takerMargin The margin amount provided by the taker.\\n     * @param makerMargin The margin amount provided by the maker.\\n     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.\\n     * @param data Additional data for the position callback.\\n     * @return The opened position.\\n     */\\n    function openPosition(\\n        int256 qty,\\n        uint256 takerMargin,\\n        uint256 makerMargin,\\n        uint256 maxAllowableTradingFee,\\n        bytes calldata data\\n    ) external returns (OpenPositionInfo memory);\\n\\n    /**\\n     * @dev Closes a position in the market.\\n     * @param positionId The ID of the position to close.\\n     * @return The closed position.\\n     */\\n    function closePosition(uint256 positionId) external returns (ClosePositionInfo memory);\\n\\n    /**\\n     * @dev Claims a closed position in the market.\\n     * @param positionId The ID of the position to claim.\\n     * @param recipient The address of the recipient of the claimed position.\\n     * @param data Additional data for the claim callback.\\n     */\\n    function claimPosition(\\n        uint256 positionId,\\n        address recipient, // EOA or account contract\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5c31415599533f50d3a2cd56674be48be1eae0c52d8699f2fa969d0a395d2039\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nbytes4 constant CLAIM_USER = \\\"UC\\\";\\nbytes4 constant CLAIM_KEEPER = \\\"KC\\\";\\nbytes4 constant CLAIM_TP = \\\"TP\\\";\\nbytes4 constant CLAIM_SL = \\\"SL\\\";\\n\\nenum PositionMode {\\n    Normal,\\n    OpenDisabled,\\n    CloseDisabled,\\n    Suspended\\n}\\n\\nenum LiquidityMode {\\n    Normal,\\n    AddDisabled,\\n    RemoveDisabled,\\n    Suspended\\n}\\n\\nenum DisplayMode {\\n    Normal,\\n    Suspended,\\n    Deprecating,\\n    Deprecated\\n}\\n\\n/**\\n * @dev The OpenPositionInfo struct represents a opened trading position.\\n * @param id The position identifier\\n * @param openVersion The version of the oracle when the position was opened\\n * @param qty The quantity of the position\\n * @param openTimestamp The timestamp when the position was opened\\n * @param takerMargin The amount of collateral that a trader must provide\\n * @param makerMargin The margin amount provided by the maker.\\n * @param tradingFee The trading fee associated with the position.\\n */\\nstruct OpenPositionInfo {\\n    uint256 id;\\n    uint256 openVersion;\\n    int256 qty;\\n    uint256 openTimestamp;\\n    uint256 takerMargin;\\n    uint256 makerMargin;\\n    uint256 tradingFee;\\n}\\n\\n/**\\n * @dev The ClosePositionInfo struct represents a closed trading position.\\n * @param id The position identifier\\n * @param closeVersion The version of the oracle when the position was closed\\n * @param closeTimestamp The timestamp when the position was closed\\n */\\nstruct ClosePositionInfo {\\n    uint256 id;\\n    uint256 closeVersion;\\n    uint256 closeTimestamp;\\n}\\n\\n/**\\n * @dev The ClaimPositionInfo struct represents a claimed position information.\\n * @param id The position identifier\\n * @param entryPrice The entry price of the position\\n * @param exitPrice The exit price of the position\\n * @param realizedPnl The profit or loss of the claimed position.\\n * @param interest The interest paid for the claimed position.\\n * @param cause The description of being claimed.\\n */\\nstruct ClaimPositionInfo {\\n    uint256 id;\\n    uint256 entryPrice;\\n    uint256 exitPrice;\\n    int256 realizedPnl;\\n    uint256 interest;\\n    bytes4 cause;\\n}\\n\\n/**\\n * @dev Represents a pending position within the LiquidityBin\\n * @param openVersion The oracle version when the position was opened.\\n * @param totalQty The total quantity of the pending position.\\n * @param totalMakerMargin The total maker margin of the pending position.\\n * @param totalTakerMargin The total taker margin of the pending position.\\n */\\nstruct PendingPosition {\\n    uint256 openVersion;\\n    int256 totalQty;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n}\\n\\n/**\\n * @dev Represents the closing position within an LiquidityBin.\\n * @param closeVersion The oracle version when the position was closed.\\n * @param totalQty The total quantity of the closing position.\\n * @param totalEntryAmount The total entry amount of the closing position.\\n * @param totalMakerMargin The total maker margin of the closing position.\\n * @param totalTakerMargin The total taker margin of the closing position.\\n */\\nstruct ClosingPosition {\\n    uint256 closeVersion;\\n    int256 totalQty;\\n    uint256 totalEntryAmount;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n}\\n\\n/**\\n * @dev A struct representing pending liquidity information.\\n * @param oracleVersion The oracle version of pending liqudity.\\n * @param mintingTokenAmountRequested The amount of settlement tokens requested for minting.\\n * @param burningCLBTokenAmountRequested The amount of CLB tokens requested for burning.\\n */\\nstruct PendingLiquidity {\\n    uint256 oracleVersion;\\n    uint256 mintingTokenAmountRequested;\\n    uint256 burningCLBTokenAmountRequested;\\n}\\n\\n/**\\n * @dev A struct representing claimable liquidity information.\\n * @param mintingTokenAmountRequested The amount of settlement tokens requested for minting.\\n * @param mintingCLBTokenAmount The actual amount of CLB tokens minted.\\n * @param burningCLBTokenAmountRequested The amount of CLB tokens requested for burning.\\n * @param burningCLBTokenAmount The actual amount of CLB tokens burned.\\n * @param burningTokenAmount The amount of settlement tokens equal in value to the burned CLB tokens.\\n */\\nstruct ClaimableLiquidity {\\n    uint256 mintingTokenAmountRequested;\\n    uint256 mintingCLBTokenAmount;\\n    uint256 burningCLBTokenAmountRequested;\\n    uint256 burningCLBTokenAmount;\\n    uint256 burningTokenAmount;\\n}\\n\\n/**\\n * @dev A struct representing status of the liquidity bin.\\n * @param liquidity The total liquidity amount in the bin\\n * @param freeLiquidity The amount of free liquidity available in the bin.\\n * @param binValue The current value of the bin.\\n * @param tradingFeeRate The trading fee rate for the liquidity.\\n */\\nstruct LiquidityBinStatus {\\n    uint256 liquidity;\\n    uint256 freeLiquidity;\\n    uint256 binValue;\\n    int16 tradingFeeRate;\\n}\\n\",\"keccak256\":\"0xf368c76559a0bd007bb497f74a6ff20fa7c46423dd4913729039ae191f9304e7\",\"license\":\"MIT\"},\"contracts/core/interfaces/vault/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title ILendingPool\\n * @dev Interface for a lending pool contract.\\n */\\ninterface ILendingPool {\\n    /**\\n     * @notice Emitted when a flash loan is executed.\\n     * @param sender The address initiating the flash loan.\\n     * @param recipient The address receiving the flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @param paid The amount paid back after the flash loan.\\n     * @param paidToTakerPool The amount paid to the taker pool after the flash loan.\\n     * @param paidToMakerPool The amount paid to the maker pool after the flash loan.\\n     */\\n    event FlashLoan(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed amount,\\n        uint256 paid,\\n        uint256 paidToTakerPool,\\n        uint256 paidToMakerPool\\n    );\\n\\n    /**\\n     * @notice Executes a flash loan.\\n     * @param token The address of the token for the flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @param recipient The address to receive the flash loan.\\n     * @param data Additional data for the flash loan.\\n     */\\n    function flashLoan(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.\\n     * @param market The address of the market.\\n     * @param settlementToken The settlement token address.\\n     * @param binBalance The balance of funds in the bin.\\n     * @return The pending share of earnings for the specified bin.\\n     */\\n    function getPendingBinShare(\\n        address market,\\n        address settlementToken,\\n        uint256 binBalance\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ff7f0f07254c591dda3c052cc6d02b89e4bcd4e9efe79f3f483ad067cfb9906\",\"license\":\"MIT\"},\"contracts/core/interfaces/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IVault\\n * @dev Interface for the Vault contract, responsible for managing positions and liquidity.\\n */\\ninterface IVault {\\n    /**\\n     * @notice Emitted when a position is opened.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the opened position.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param protocolFee The protocol fee associated with the position.\\n     */\\n    event OnOpenPosition(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        uint256 indexed takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    );\\n\\n    /**\\n     * @notice Emitted when a position is claimed.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the claimed position.\\n     * @param recipient The address of the recipient of the settlement amount.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param settlementAmount The settlement amount received by the recipient.\\n     */\\n    event OnClaimPosition(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        address indexed recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when liquidity is added to the vault.\\n     * @param market The address of the market.\\n     * @param amount The amount of liquidity added.\\n     */\\n    event OnAddLiquidity(address indexed market, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when pending liquidity is settled.\\n     * @param market The address of the market.\\n     * @param pendingDeposit The amount of pending deposit being settled.\\n     * @param pendingWithdrawal The amount of pending withdrawal being settled.\\n     */\\n    event OnSettlePendingLiquidity(\\n        address indexed market,\\n        uint256 indexed pendingDeposit,\\n        uint256 indexed pendingWithdrawal\\n    );\\n\\n    /**\\n     * @notice Emitted when liquidity is withdrawn from the vault.\\n     * @param market The address of the market.\\n     * @param amount The amount of liquidity withdrawn.\\n     * @param recipient The address of the recipient of the withdrawn liquidity.\\n     */\\n    event OnWithdrawLiquidity(\\n        address indexed market,\\n        uint256 indexed amount,\\n        address indexed recipient\\n    );\\n\\n    /**\\n     * @notice Emitted when the keeper fee is transferred.\\n     * @param fee The amount of the transferred keeper fee as native token.\\n     * @param amount The amount of settlement token to be used for paying keeper fee.\\n     */\\n    event TransferKeeperFee(uint256 indexed fee, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when the keeper fee is transferred for a specific market.\\n     * @param market The address of the market.\\n     * @param fee The amount of the transferred keeper fee as native token.\\n     * @param amount The amount of settlement token to be used for paying keeper fee.\\n     */\\n    event TransferKeeperFee(address indexed market, uint256 indexed fee, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when the protocol fee is transferred for a specific position.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the position.\\n     * @param amount The amount of the transferred fee.\\n     */\\n    event TransferProtocolFee(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @notice Called when a position is opened by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param positionId The ID of the opened position.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param protocolFee The protocol fee associated with the position.\\n     */\\n    function onOpenPosition(\\n        address settlementToken,\\n        uint256 positionId,\\n        uint256 takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    ) external;\\n\\n    /**\\n     * @notice Called when a position is claimed by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param positionId The ID of the claimed position.\\n     * @param recipient The address that will receive the settlement amount.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param settlementAmount The amount to be settled for the position.\\n     */\\n    function onClaimPosition(\\n        address settlementToken,\\n        uint256 positionId,\\n        address recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    ) external;\\n\\n    /**\\n     * @notice Called when liquidity is added to the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param amount The amount of liquidity being added.\\n     */\\n    function onAddLiquidity(address settlementToken, uint256 amount) external;\\n\\n    /**\\n     * @notice Called when pending liquidity is settled in the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param pendingDeposit The amount of pending deposits being settled.\\n     * @param pendingWithdrawal The amount of pending withdrawals being settled.\\n     */\\n    function onSettlePendingLiquidity(\\n        address settlementToken,\\n        uint256 pendingDeposit,\\n        uint256 pendingWithdrawal\\n    ) external;\\n\\n    /**\\n     * @notice Called when liquidity is withdrawn from the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param recipient The address that will receive the withdrawn liquidity.\\n     * @param amount The amount of liquidity to be withdrawn.\\n     */\\n    function onWithdrawLiquidity(\\n        address settlementToken,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Transfers the keeper fee from the market to the specified keeper.\\n     * @param settlementToken The settlement token address.\\n     * @param keeper The address of the keeper to receive the fee.\\n     * @param fee The amount of the fee to transfer as native token.\\n     * @param margin The margin amount used for the fee payment.\\n     * @return usedFee The actual settlement token amount of fee used for the transfer.\\n     */\\n    function transferKeeperFee(\\n        address settlementToken,\\n        address keeper,\\n        uint256 fee,\\n        uint256 margin\\n    ) external returns (uint256 usedFee);\\n}\\n\",\"keccak256\":\"0x3a3d8c5034d3a473347b2fe53a7973deeab827a88f6e83fc0ab2b0a85e45e429\",\"license\":\"MIT\"},\"contracts/core/libraries/BinMargin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev The BinMargin struct represents the margin information for an LP bin.\\n * @param tradingFeeRate The trading fee rate associated with the LP bin\\n * @param amount The maker margin amount specified for the LP bin\\n */\\nstruct BinMargin {\\n    uint16 tradingFeeRate;\\n    uint256 amount;\\n}\\n\\nusing BinMarginLib for BinMargin global;\\n\\n/**\\n * @title BinMarginLib\\n * @dev The BinMarginLib library provides functions to operate on BinMargin structs.\\n */\\nlibrary BinMarginLib {\\n    using Math for uint256;\\n\\n    uint256 constant TRADING_FEE_RATE_PRECISION = 10000;\\n\\n    /**\\n     * @notice Calculates the trading fee based on the margin amount and the trading fee rate.\\n     * @param self The BinMargin struct\\n     * @param _protocolFeeRate The protocol fee rate for the market\\n     * @return The trading fee amount\\n     */\\n    function tradingFee(\\n        BinMargin memory self,\\n        uint16 _protocolFeeRate\\n    ) internal pure returns (uint256) {\\n        uint256 _tradingFee = self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION);\\n        return _tradingFee - _protocolFee(_tradingFee, _protocolFeeRate);\\n    }\\n\\n    /**\\n     * @notice Calculates the protocol fee based on the margin amount and the trading fee rate.\\n     * @param self The BinMargin struct\\n     * @param _protocolFeeRate The protocol fee rate for the market\\n     * @return The protocol fee amount\\n     */\\n    function protocolFee(\\n        BinMargin memory self,\\n        uint16 _protocolFeeRate\\n    ) internal pure returns (uint256) {\\n        return\\n            _protocolFee(\\n                self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION),\\n                _protocolFeeRate\\n            );\\n    }\\n\\n    function _protocolFee(\\n        uint256 _tradingFee,\\n        uint16 _protocolFeeRate\\n    ) private pure returns (uint256) {\\n        return _tradingFee.mulDiv(_protocolFeeRate, TRADING_FEE_RATE_PRECISION);\\n    }\\n}\\n\",\"keccak256\":\"0xf9d27ff84b41e790fb04e412e4e8c583d3903e34774a24839f372392ab33db01\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/CLBTokenLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {FEE_RATES_LENGTH} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\n\\n/**\\n * @title CLBTokenLib\\n * @notice Provides utility functions for working with CLB tokens.\\n */\\nlibrary CLBTokenLib {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n\\n    uint256 private constant DIRECTION_PRECISION = 10 ** 10;\\n    uint16 private constant MIN_FEE_RATE = 1;\\n\\n    /**\\n     * @notice Encode the CLB token ID of ERC1155 token type\\n     * @dev If `tradingFeeRate` is negative, it adds `DIRECTION_PRECISION` to the absolute fee rate.\\n     *      Otherwise it returns the fee rate directly.\\n     * @return id The ID of ERC1155 token\\n     */\\n    function encodeId(int16 tradingFeeRate) internal pure returns (uint256) {\\n        bool long = tradingFeeRate > 0;\\n        return _encodeId(uint16(long ? tradingFeeRate : -tradingFeeRate), long);\\n    }\\n\\n    /**\\n     * @notice Decode the trading fee rate from the CLB token ID of ERC1155 token type\\n     * @dev If `id` is greater than or equal to `DIRECTION_PRECISION`,\\n     *      then it substracts `DIRECTION_PRECISION` from `id`\\n     *      and returns the negation of the substracted value.\\n     *      Otherwise it returns `id` directly.\\n     * @return tradingFeeRate The trading fee rate\\n     */\\n    function decodeId(uint256 id) internal pure returns (int16 tradingFeeRate) {\\n        if (id >= DIRECTION_PRECISION) {\\n            tradingFeeRate = -int16((id - DIRECTION_PRECISION).toUint16());\\n        } else {\\n            tradingFeeRate = int16(id.toUint16());\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the array of supported trading fee rates.\\n     * @dev This function returns the array of supported trading fee rates,\\n     *      ranging from the minimum fee rate to the maximum fee rate with step increments.\\n     * @return tradingFeeRates The array of supported trading fee rates.\\n     */\\n    function tradingFeeRates() internal pure returns (uint16[FEE_RATES_LENGTH] memory) {\\n        // prettier-ignore\\n        return [\\n            MIN_FEE_RATE, 2, 3, 4, 5, 6, 7, 8, 9, // 0.01% ~ 0.09%, step 0.01%\\n            10, 20, 30, 40, 50, 60, 70, 80, 90, // 0.1% ~ 0.9%, step 0.1%\\n            100, 200, 300, 400, 500, 600, 700, 800, 900, // 1% ~ 9%, step 1%\\n            1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000 // 10% ~ 50%, step 5%\\n        ];\\n    }\\n\\n    function tokenIds() internal pure returns (uint256[] memory) {\\n        uint16[FEE_RATES_LENGTH] memory feeRates = tradingFeeRates();\\n\\n        uint256[] memory ids = new uint256[](FEE_RATES_LENGTH * 2);\\n        for (uint256 i; i < FEE_RATES_LENGTH; ) {\\n            ids[i] = _encodeId(feeRates[i], true);\\n            ids[i + FEE_RATES_LENGTH] = _encodeId(feeRates[i], false);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return ids;\\n    }\\n\\n    function _encodeId(uint16 tradingFeeRate, bool long) private pure returns (uint256 id) {\\n        id = long ? tradingFeeRate : tradingFeeRate + DIRECTION_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x33b08f650ee509ef4ddcd852ed7387fc2084c1299fa68045cc5435e15ee82d1f\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nuint256 constant BPS = 10000;\\nuint256 constant FEE_RATES_LENGTH = 36;\\nuint256 constant PRICE_PRECISION = 1e18;\",\"keccak256\":\"0xd14bb41459e61008626b00dd6f5eebd6669d20a280e3d1ffcb043dd401922c7c\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Errors\\n * @dev This library provides a set of error codes as string constants for handling exceptions and revert messages in the library.\\n */\\nlibrary Errors {\\n    /**\\n     * @dev Error code indicating that there is not enough free liquidity available in liquidity pool when open a new poisition.\\n     */\\n    string constant NOT_ENOUGH_FREE_LIQUIDITY = \\\"NEFL\\\";\\n\\n    /**\\n     * @dev Error code indicating that the specified amount is too small when add liquidity to each bin.\\n     */\\n    string constant TOO_SMALL_AMOUNT = \\\"TSA\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided oracle version is invalid or unsupported.\\n     */\\n    string constant INVALID_ORACLE_VERSION = \\\"IOV\\\";\\n\\n    /**\\n     * @dev Error code indicating that the specified value exceeds the allowed margin range when claim a position.\\n     */\\n    string constant EXCEED_MARGIN_RANGE = \\\"IOV\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided trading fee rate is not supported.\\n     */\\n    string constant UNSUPPORTED_TRADING_FEE_RATE = \\\"UTFR\\\";\\n\\n    /**\\n     * @dev Error code indicating that the oracle provider is already registered.\\n     */\\n    string constant ALREADY_REGISTERED_ORACLE_PROVIDER = \\\"ARO\\\";\\n\\n    /**\\n     * @dev Error code indicating that the settlement token is already registered.\\n     */\\n    string constant ALREADY_REGISTERED_TOKEN = \\\"ART\\\";\\n\\n    /**\\n     * @dev Error code indicating that the settlement token is not registered.\\n     */\\n    string constant UNREGISTERED_TOKEN = \\\"URT\\\";\\n\\n    /**\\n     * @dev Error code indicating that the interest rate has not been initialized.\\n     */\\n    string constant INTEREST_RATE_NOT_INITIALIZED = \\\"IRNI\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided interest rate exceeds the maximum allowed rate.\\n     */\\n    string constant INTEREST_RATE_OVERFLOW = \\\"IROF\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided timestamp for an interest rate is in the past.\\n     */\\n    string constant INTEREST_RATE_PAST_TIMESTAMP = \\\"IRPT\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided interest rate record cannot be appended to the existing array.\\n     */\\n    string constant INTEREST_RATE_NOT_APPENDABLE = \\\"IRNA\\\";\\n\\n    /**\\n     * @dev Error code indicating that an interest rate has already been applied and cannot be modified further.\\n     */\\n    string constant INTEREST_RATE_ALREADY_APPLIED = \\\"IRAA\\\";\\n\\n    /**\\n     * @dev Error code indicating that the position is unsettled.\\n     */\\n    string constant UNSETTLED_POSITION = \\\"USP\\\";\\n\\n    /**\\n     * @dev Error code indicating that the position quantity is invalid.\\n     */\\n    string constant INVALID_POSITION_QTY = \\\"IPQ\\\";\\n\\n    /**\\n     * @dev Error code indicating that the oracle price is not positive.\\n     */\\n    string constant NOT_POSITIVE_PRICE = \\\"NPP\\\";\\n}\\n\",\"keccak256\":\"0x2243516d87f4b064250fa810fef1caaf62544e651556c3d5326ea2f7406d1787\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/InterestRate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {BPS} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title InterestRate\\n * @notice Provides functions for managing interest rates.\\n * @dev The library allows for the initialization, appending, and removal of interest rate records,\\n *      as well as calculating interest based on these records.\\n */\\nlibrary InterestRate {\\n    using Math for uint256;\\n\\n    /**\\n     * @dev Record type\\n     * @param annualRateBPS Annual interest rate in BPS\\n     * @param beginTimestamp Timestamp when the interest rate becomes effective\\n     */\\n    struct Record {\\n        uint256 annualRateBPS;\\n        uint256 beginTimestamp;\\n    }\\n\\n    uint256 private constant MAX_RATE_BPS = BPS; // max interest rate is 100%\\n    uint256 private constant YEAR = 365 * 24 * 3600;\\n\\n    /**\\n     * @dev Ensure that the interest rate records have been initialized before certain functions can be called.\\n     *      It checks whether the length of the Record array is greater than 0.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty (it indicates that the interest rate has not been initialized).\\n     */\\n    modifier initialized(Record[] storage self) {\\n        require(self.length != 0, Errors.INTEREST_RATE_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the interest rate records.\\n     * @param self The stored record array\\n     * @param initialInterestRate The initial interest rate\\n     */\\n    function initialize(Record[] storage self, uint256 initialInterestRate) internal {\\n        self.push(Record({annualRateBPS: initialInterestRate, beginTimestamp: 0}));\\n    }\\n\\n    /**\\n     * @notice Add a new interest rate record to the array.\\n     * @dev Annual rate is not greater than the maximum rate and that the begin timestamp is in the future,\\n     *      and the new record's begin timestamp is greater than the previous record's timestamp.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_OVERFLOW` if the rate exceed the maximum allowed rate (100%).\\n     *      Throws an error with the code `Errors.INTEREST_RATE_PAST_TIMESTAMP` if the timestamp is in the past, ensuring that the interest rate period has not already started.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_APPENDABLE` if the timestamp is greater than the last recorded timestamp, ensuring that the new record is appended in chronological order.\\n     * @param self The stored record array\\n     * @param annualRateBPS The annual interest rate in BPS\\n     * @param beginTimestamp Begin timestamp of this record\\n     */\\n    function appendRecord(\\n        Record[] storage self,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) internal initialized(self) {\\n        require(annualRateBPS <= MAX_RATE_BPS, Errors.INTEREST_RATE_OVERFLOW);\\n        //slither-disable-next-line timestamp\\n        require(beginTimestamp > block.timestamp, Errors.INTEREST_RATE_PAST_TIMESTAMP);\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        require(beginTimestamp > lastRecord.beginTimestamp, Errors.INTEREST_RATE_NOT_APPENDABLE);\\n\\n        self.push(Record({annualRateBPS: annualRateBPS, beginTimestamp: beginTimestamp}));\\n    }\\n\\n    /**\\n     * @notice Remove the last interest rate record from the array.\\n     * @dev The current time must be less than the begin timestamp of the last record.\\n     *      If the array has only one record, it returns false along with an empty record.\\n     *      Otherwise, it removes the last record from the array and returns true along with the removed record.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_ALREADY_APPLIED` if the `beginTimestamp` of the last record is not in the future.\\n     * @param self The stored record array\\n     * @return removed Whether the last record is removed\\n     * @return record The removed record\\n     */\\n    function removeLastRecord(\\n        Record[] storage self\\n    ) internal initialized(self) returns (bool removed, Record memory record) {\\n        if (self.length <= 1) {\\n            // empty\\n            return (false, Record(0, 0));\\n        }\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        //slither-disable-next-line timestamp\\n        require(block.timestamp < lastRecord.beginTimestamp, Errors.INTEREST_RATE_ALREADY_APPLIED);\\n\\n        self.pop();\\n\\n        return (true, lastRecord);\\n    }\\n\\n    /**\\n     * @notice Find the interest rate record that applies to a given timestamp.\\n     * @dev It iterates through the array from the end to the beginning\\n     *      and returns the first record with a begin timestamp less than or equal to the provided timestamp.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     * @param self The stored record array\\n     * @param timestamp Given timestamp\\n     * @return interestRate The record which is found\\n     * @return index The index of record\\n     */\\n    function findRecordAt(\\n        Record[] storage self,\\n        uint256 timestamp\\n    ) internal view initialized(self) returns (Record memory interestRate, uint256 index) {\\n        for (uint256 i = self.length; i != 0; ) {\\n            unchecked {\\n                index = i - 1;\\n            }\\n            interestRate = self[index];\\n\\n            if (interestRate.beginTimestamp <= timestamp) {\\n                return (interestRate, index);\\n            }\\n\\n            unchecked {\\n                i--;\\n            }\\n        }\\n\\n        return (self[0], 0); // empty result (this line is not reachable)\\n    }\\n\\n    /**\\n     * @notice Calculate the interest\\n     * @dev Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     * @param self The stored record array\\n     * @param amount Token amount\\n     * @param from Begin timestamp (inclusive)\\n     * @param to End timestamp (exclusive)\\n     */\\n    function calculateInterest(\\n        Record[] storage self,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) internal view initialized(self) returns (uint256) {\\n        if (from >= to) {\\n            return 0;\\n        }\\n\\n        uint256 interest = 0;\\n\\n        uint256 endTimestamp = type(uint256).max;\\n        for (uint256 idx = self.length; idx != 0; ) {\\n            Record memory record = self[idx - 1];\\n            if (endTimestamp <= from) {\\n                break;\\n            }\\n\\n            interest += _interest(\\n                amount,\\n                record.annualRateBPS,\\n                Math.min(to, endTimestamp) - Math.max(from, record.beginTimestamp)\\n            );\\n            endTimestamp = record.beginTimestamp;\\n\\n            unchecked {\\n                idx--;\\n            }\\n        }\\n        return interest;\\n    }\\n\\n    function _interest(\\n        uint256 amount,\\n        uint256 rateBPS, // annual rate\\n        uint256 period // in seconds\\n    ) private pure returns (uint256) {\\n        return amount.mulDiv(rateBPS * period, BPS * YEAR, Math.Rounding.Up);\\n    }\\n}\\n\",\"keccak256\":\"0x1ba597a94b3e70bc851d88e7340609e46e3f56cc971f5969a62c2a1264adab0a\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/LpContext.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\n\\n/**\\n * @dev Represents the context information required for LP bin operations.\\n * @param oracleProvider The Oracle Provider contract used for price feed\\n * @param interestCalculator The Interest Calculator contract used for interest calculations\\n * @param vault The Chromatic Vault contract responsible for managing liquidity and margin\\n * @param clbToken The CLB token contract that represents LP ownership in the pool\\n * @param market The address of market contract\\n * @param settlementToken The address of the settlement token used in the market\\n * @param tokenPrecision The precision of the settlement token used in the market\\n * @param _currentVersionCache Cached instance of the current oracle version\\n */\\nstruct LpContext {\\n    IOracleProvider oracleProvider;\\n    IInterestCalculator interestCalculator;\\n    IChromaticVault vault;\\n    ICLBToken clbToken;\\n    address market;\\n    address settlementToken;\\n    uint256 tokenPrecision;\\n    IOracleProvider.OracleVersion _currentVersionCache;\\n}\\n\\nusing LpContextLib for LpContext global;\\n\\n/**\\n * @title LpContextLib\\n * @notice Provides functions that operate on the `LpContext` struct\\n */\\nlibrary LpContextLib {\\n    /**\\n     * @notice Syncs the oracle version used by the market.\\n     * @param self The memory instance of `LpContext` struct\\n     */\\n    function syncOracleVersion(LpContext memory self) internal {\\n        self._currentVersionCache = self.oracleProvider.sync();\\n    }\\n\\n    /**\\n     * @notice Retrieves the current oracle version used by the market\\n     * @dev If the `_currentVersionCache` has been initialized, then returns it.\\n     *      If not, it calls the `currentVersion` function on the `oracleProvider of the market\\n     *      to fetch the current version and stores it in the cache,\\n     *      and then returns the current version.\\n     * @param self The memory instance of `LpContext` struct\\n     * @return OracleVersion The current oracle version\\n     */\\n    function currentOracleVersion(\\n        LpContext memory self\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._currentVersionCache.version == 0) {\\n            //slither-disable-next-line calls-loop\\n            self._currentVersionCache = self.oracleProvider.currentVersion();\\n        }\\n\\n        return self._currentVersionCache;\\n    }\\n\\n    /**\\n     * @notice Retrieves the oracle version at a specific version number\\n     * @dev If the `_currentVersionCache` matches the requested version, then returns it.\\n     *      Otherwise, it calls the `atVersion` function on the `oracleProvider` of the market\\n     *      to fetch the desired version.\\n     * @param self The memory instance of `LpContext` struct\\n     * @param version The requested version number\\n     * @return OracleVersion The oracle version at the requested version number\\n     */\\n    function oracleVersionAt(\\n        LpContext memory self,\\n        uint256 version\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._currentVersionCache.version == version) {\\n            return self._currentVersionCache;\\n        }\\n        return self.oracleProvider.atVersion(version);\\n    }\\n\\n    /**\\n     * @notice Calculates the interest accrued for a given amount of settlement tokens\\n               within a specified time range.\\n     * @dev This function internally calls the `calculateInterest` function on the `interestCalculator` contract.\\n     * @param self The memory instance of the `LpContext` struct.\\n     * @param amount The amount of settlement tokens for which the interest needs to be calculated.\\n     * @param from The starting timestamp of the time range (inclusive).\\n     * @param to The ending timestamp of the time range (exclusive).\\n     * @return The accrued interest as a `uint256` value.\\n     */\\n    function calculateInterest(\\n        LpContext memory self,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal view returns (uint256) {\\n        //slither-disable-next-line calls-loop\\n        return\\n            amount == 0 || from >= to\\n                ? 0\\n                : self.interestCalculator.calculateInterest(self.settlementToken, amount, from, to);\\n    }\\n\\n    /**\\n     * @notice Checks if an oracle version is in the past.\\n     * @param self The memory instance of the `LpContext` struct.\\n     * @param oracleVersion The oracle version to check.\\n     * @return A boolean value indicating whether the oracle version is in the past.\\n     */\\n    function isPastVersion(\\n        LpContext memory self,\\n        uint256 oracleVersion\\n    ) internal view returns (bool) {\\n        return oracleVersion != 0 && oracleVersion < self.currentOracleVersion().version;\\n    }\\n}\\n\",\"keccak256\":\"0x56ff062a6341949cf9ca971571c279b23f843646855699550c6bd0ea85f6e5ec\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/LpReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\n\\n/**\\n * @dev The LpAction enum represents the types of LP actions that can be performed.\\n */\\nenum LpAction {\\n    ADD_LIQUIDITY,\\n    REMOVE_LIQUIDITY\\n}\\n\\n/**\\n * @dev The LpReceipt struct represents a receipt of an LP action performed.\\n * @param id An identifier for the receipt\\n * @param oracleVersion The oracle version associated with the action\\n * @param amount The amount involved in the action,\\n *        when the action is `ADD_LIQUIDITY`, this value represents the amount of settlement tokens\\n *        when the action is `REMOVE_LIQUIDITY`, this value represents the amount of CLB tokens\\n * @param recipient The address of the recipient of the action\\n * @param action An enumeration representing the type of LP action performed (ADD_LIQUIDITY or REMOVE_LIQUIDITY)\\n * @param tradingFeeRate The trading fee rate associated with the LP action\\n */\\nstruct LpReceipt {\\n    uint256 id;\\n    uint256 oracleVersion;\\n    uint256 amount;\\n    address recipient;\\n    LpAction action;\\n    int16 tradingFeeRate;\\n}\\n\\nusing LpReceiptLib for LpReceipt global;\\n\\n/**\\n * @title LpReceiptLib\\n * @notice Provides functions that operate on the `LpReceipt` struct\\n */\\nlibrary LpReceiptLib {\\n    /**\\n     * @notice Computes the ID of the CLBToken contract based on the trading fee rate.\\n     * @param self The LpReceipt struct.\\n     * @return The ID of the CLBToken contract.\\n     */\\n    function clbTokenId(LpReceipt memory self) internal pure returns (uint256) {\\n        return CLBTokenLib.encodeId(self.tradingFeeRate);\\n    }\\n}\\n\",\"keccak256\":\"0x5c4f467639892f5005338012d3f961edb6d46f15003a0ce12c89a9c40286426b\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {BinMargin} from \\\"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\\\";\\n\\n/**\\n * @dev The Position struct represents a trading position.\\n * @param id The position identifier\\n * @param openVersion The version of the oracle when the position was opened\\n * @param closeVersion The version of the oracle when the position was closed\\n * @param qty The quantity of the position\\n * @param openTimestamp The timestamp when the position was opened\\n * @param closeTimestamp The timestamp when the position was closed\\n * @param takerMargin The amount of collateral that a trader must provide\\n * @param owner The owner of the position, usually it is the account address of trader\\n * @param liquidator The liquidator contract address\\n * @param _binMargins The bin margins for the position, it represents the amount of collateral for each bin\\n * @param _protocolFeeRate The protocol fee rate for the market\\n */\\nstruct Position {\\n    uint256 id;\\n    uint256 openVersion;\\n    uint256 closeVersion;\\n    int256 qty;\\n    uint256 openTimestamp;\\n    uint256 closeTimestamp;\\n    uint256 takerMargin;\\n    address owner;\\n    address liquidator;\\n    uint16 _protocolFeeRate;\\n    BinMargin[] _binMargins;\\n}\\n\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Provides functions that operate on the `Position` struct\\n */\\nlibrary PositionLib {\\n    // using Math for uint256;\\n    // using SafeCast for uint256;\\n    // using SignedMath for int256;\\n\\n    /**\\n     * @notice Calculates the entry price of the position based on the position's open oracle version\\n     * @dev It fetches oracle price from `IOracleProvider`\\n     *      at the settle version calculated based on the position's open oracle version\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return uint256 The entry price\\n     */\\n    function entryPrice(\\n        Position memory self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.openVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the exit price of the position based on the position's close oracle version\\n     * @dev It fetches oracle price from `IOracleProvider`\\n     *      at the settle version calculated based on the position's close oracle version\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return uint256 The exit price\\n     */\\n    function exitPrice(Position memory self, LpContext memory ctx) internal view returns (uint256) {\\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.closeVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the profit or loss of the position based on the close oracle version and the qty\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return int256 The profit or loss\\n     */\\n    function pnl(Position memory self, LpContext memory ctx) internal view returns (int256) {\\n        return\\n            self.closeVersion > self.openVersion\\n                ? PositionUtil.pnl(self.qty, self.entryPrice(ctx), self.exitPrice(ctx))\\n                : int256(0);\\n    }\\n\\n    /**\\n     * @notice Calculates the total margin required for the makers of the position\\n     * @dev The maker margin is calculated by summing up the amounts of all bin margins\\n     *      in the `_binMargins` array\\n     * @param self The memory instance of the `Position` struct\\n     * @return margin The maker margin\\n     */\\n    function makerMargin(Position memory self) internal pure returns (uint256 margin) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            margin += self._binMargins[i].amount;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total trading fee for the position\\n     * @dev The trading fee is calculated by summing up the trading fees of all bin margins\\n     *      in the `_binMargins` array\\n     * @param self The memory instance of the `Position` struct\\n     * @return fee The trading fee\\n     */\\n    function tradingFee(Position memory self) internal pure returns (uint256 fee) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            fee += self._binMargins[i].tradingFee(self._protocolFeeRate);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total protocol fee for a position.\\n     * @param self The Position struct representing the position.\\n     * @return fee The total protocol fee amount.\\n     */\\n    function protocolFee(Position memory self) internal pure returns (uint256 fee) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            fee += self._binMargins[i].protocolFee(self._protocolFeeRate);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns an array of BinMargin instances\\n     *         representing the bin margins for the position\\n     * @param self The memory instance of the `Position` struct\\n     * @return margins The bin margins for the position\\n     */\\n    function binMargins(Position memory self) internal pure returns (BinMargin[] memory margins) {\\n        margins = self._binMargins;\\n    }\\n\\n    /**\\n     * @notice Sets the `_binMargins` array for the position\\n     * @param self The memory instance of the `Position` struct\\n     * @param margins The bin margins for the position\\n     */\\n    function setBinMargins(Position memory self, BinMargin[] memory margins) internal pure {\\n        self._binMargins = margins;\\n    }\\n}\\n\",\"keccak256\":\"0x4e1217907eadec2e99b138a0d8308df7650a0dfc404ab11cf9cb8d7210cb0708\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/PositionUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PRICE_PRECISION} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title PositionUtil\\n * @notice Provides utility functions for managing positions\\n */\\nlibrary PositionUtil {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n\\n    /**\\n     * @notice Returns next oracle version to settle\\n     * @dev It adds 1 to the `oracleVersion`\\n     *      and ensures that the `oracleVersion` is greater than 0 using a require statement.\\n     *      Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if the `oracleVersion` is not valid.\\n     * @param oracleVersion Input oracle version\\n     * @return uint256 Next oracle version to settle\\n     */\\n    function settleVersion(uint256 oracleVersion) internal pure returns (uint256) {\\n        require(oracleVersion != 0, Errors.INVALID_ORACLE_VERSION);\\n        return oracleVersion + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\\n     * @dev It calls another overloaded `settlePrice` function\\n     *      with an additional `OracleVersion` parameter,\\n     *      passing the `currentVersion` obtained from the `provider`\\n     * @param provider The oracle provider\\n     * @param oracleVersion The oracle version of position\\n     * @return uint256 The calculated price to settle\\n     */\\n    function settlePrice(\\n        IOracleProvider provider,\\n        uint256 oracleVersion\\n    ) internal view returns (uint256) {\\n        return settlePrice(provider, oracleVersion, provider.currentVersion());\\n    }\\n\\n    /**\\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\\n     * @dev It calculates the price by considering the `settleVersion`\\n     *      and the `currentVersion` obtained from the `IOracleProvider`.\\n     *      It ensures that the settle version is not greater than the current version;\\n     *      otherwise, it triggers an error with the message `Errors.UNSETTLED_POSITION`.\\n     *      It retrieves the corresponding `OracleVersion` using `atVersion` from the `IOracleProvider`,\\n     *      and then calls `oraclePrice` to obtain the price.\\n     * @param provider The oracle provider\\n     * @param oracleVersion The oracle version of position\\n     * @param currentVersion The current oracle version\\n     * @return uint256 The calculated entry price to settle\\n     */\\n    function settlePrice(\\n        IOracleProvider provider,\\n        uint256 oracleVersion,\\n        IOracleProvider.OracleVersion memory currentVersion\\n    ) internal view returns (uint256) {\\n        uint256 _settleVersion = settleVersion(oracleVersion);\\n        require(_settleVersion <= currentVersion.version, Errors.UNSETTLED_POSITION);\\n\\n        //slither-disable-next-line calls-loop\\n        IOracleProvider.OracleVersion memory _oracleVersion = _settleVersion ==\\n            currentVersion.version\\n            ? currentVersion\\n            : provider.atVersion(_settleVersion);\\n        return oraclePrice(_oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Extracts the price value from an `OracleVersion` struct\\n     * @dev If the price is not positive value, it triggers an error with the message `Errors.NOT_POSITIVE_PRICE`.\\n     * @param oracleVersion The memory instance of `OracleVersion` struct\\n     * @return uint256 The price value of `oracleVersion`\\n     */\\n    function oraclePrice(\\n        IOracleProvider.OracleVersion memory oracleVersion\\n    ) internal pure returns (uint256) {\\n        require(oracleVersion.price > 0, Errors.NOT_POSITIVE_PRICE);\\n        return oracleVersion.price.abs();\\n    }\\n\\n    /**\\n     * @notice Calculates the profit or loss (PnL) for a position based on the quantity, entry price, and exit price\\n     * @dev It first calculates the price difference (`delta`) between the exit price and the entry price.\\n     *      If the quantity is negative, indicating short position, it adjusts the `delta` to reflect a negative change.\\n     *      The function then calculates the absolute PnL by multiplying the absolute value of the quantity\\n     *          with the absolute value of the `delta`, divided by the entry price.\\n     *      Finally, if `delta` is negative, indicating a loss, the absolute PnL is negated to represent a negative value.\\n     * @param qty The quantity of the position\\n     * @param _entryPrice The entry price of the position\\n     * @param _exitPrice The exit price of the position\\n     * @return int256 The profit or loss\\n     */\\n    function pnl(\\n        int256 qty, // as token precision\\n        uint256 _entryPrice,\\n        uint256 _exitPrice\\n    ) internal pure returns (int256) {\\n        if (qty == 0 || _entryPrice == _exitPrice) return 0;\\n\\n        int256 delta = _exitPrice > _entryPrice\\n            ? (_exitPrice - _entryPrice).toInt256()\\n            : -(_entryPrice - _exitPrice).toInt256();\\n        if (qty < 0) delta *= -1;\\n\\n        int256 absPnl = qty.abs().mulDiv(delta.abs(), _entryPrice).toInt256();\\n\\n        return delta < 0 ? -absPnl : absPnl;\\n    }\\n\\n    /**\\n     * @notice Verifies the validity of a position quantity added to the bin\\n     * @dev It ensures that the sign of the current quantity of the bin's position\\n     *      and the added quantity are same or zero.\\n     *      If the condition is not met, it triggers an error with the message `Errors.INVALID_POSITION_QTY`.\\n     * @param currentQty The current quantity of the bin's pending position\\n     * @param addedQty The position quantity added\\n     */\\n    function checkAddPositionQty(int256 currentQty, int256 addedQty) internal pure {\\n        require(\\n            !((currentQty > 0 && addedQty <= 0) || (currentQty < 0 && addedQty >= 0)),\\n            Errors.INVALID_POSITION_QTY\\n        );\\n    }\\n\\n    /**\\n     * @notice Verifies the validity of a position quantity removed from the bin\\n     * @dev It ensures that the sign of the current quantity of the bin's position\\n     *      and the removed quantity are same or zero,\\n     *      and the absolute removed quantity is not greater than the absolute current quantity.\\n     *      If the condition is not met, it triggers an error with the message `Errors.INVALID_POSITION_QTY`.\\n     * @param currentQty The current quantity of the bin's position\\n     * @param removeQty The position quantity removed\\n     */\\n    function checkRemovePositionQty(int256 currentQty, int256 removeQty) internal pure {\\n        require(\\n            !((currentQty == 0) ||\\n                (removeQty == 0) ||\\n                (currentQty > 0 && removeQty > currentQty) ||\\n                (currentQty < 0 && removeQty < currentQty)),\\n            Errors.INVALID_POSITION_QTY\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the transaction amount based on the quantity and price\\n     * @param qty The quantity of the position\\n     * @param price The price of the position\\n     * @return uint256 The transaction amount\\n     */\\n    function transactionAmount(int256 qty, uint256 price) internal pure returns (uint256) {\\n        return qty.abs().mulDiv(price, PRICE_PRECISION);\\n    }\\n}\\n\",\"keccak256\":\"0xd65fc99fdb27f0d40c91906514029f9ebc9a658ed45e754266c76151ec6dbefe\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/registry/OracleProviderProperties.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev The OracleProviderProperties struct represents properties of the oracle provider.\\n * @param minTakeProfitBPS The minimum take-profit basis points.\\n * @param maxTakeProfitBPS The maximum take-profit basis points.\\n * @param leverageLevel The leverage level of the oracle provider.\\n */\\nstruct OracleProviderProperties {\\n    uint32 minTakeProfitBPS;\\n    uint32 maxTakeProfitBPS;\\n    uint8 leverageLevel;\\n}\\n\\nusing OracleProviderPropertiesLib for OracleProviderProperties global;\\n\\nlibrary OracleProviderPropertiesLib {\\n    function checkValidLeverageLevel(uint8 leverageLevel) internal pure returns (bool) {\\n        return leverageLevel <= 3;\\n    }\\n\\n    function maxAllowableLeverage(\\n        OracleProviderProperties memory self\\n    ) internal pure returns (uint256 leverage) {\\n        uint8 level = self.leverageLevel;\\n        assembly {\\n            switch level\\n            case 0 {\\n                leverage := 10\\n            }\\n            case 1 {\\n                leverage := 20\\n            }\\n            case 2 {\\n                leverage := 50\\n            }\\n            case 3 {\\n                leverage := 100\\n            }\\n            default {\\n                leverage := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b5a48475f814aef56a330571cce9f27e752f7fab6a99e2284a32b85be79b284\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IOracleProvider {\\n    /// @dev Error for invalid oracle round\\n    error InvalidOracleRound();\\n\\n    /**\\n     * @dev A singular oracle version with its corresponding data\\n     * @param version The iterative version\\n     * @param timestamp the timestamp of the oracle update\\n     * @param price The oracle price of the corresponding version\\n     */\\n    struct OracleVersion {\\n        uint256 version;\\n        uint256 timestamp;\\n        int256 price;\\n    }\\n\\n    /**\\n     * @notice Checks for a new price and updates the internal phase annotation state accordingly\\n     * @dev `sync` is expected to be called soon after a phase update occurs in the underlying proxy.\\n     *      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call\\n     *      This is feasible in the short term due to how infrequent phase updates are, but phase update\\n     *      and roundCount detection should eventually be implemented at the contract level.\\n     *      Reverts if there is more than 1 phase to update in a single sync because we currently cannot\\n     *      determine the startingRoundId for the intermediary phase.\\n     * @return The current oracle version after sync\\n     */\\n    function sync() external returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @return oracleVersion Current oracle version\\n     */\\n    function currentVersion() external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @param version The version of which to lookup\\n     * @return oracleVersion Oracle version at version `version`\\n     */\\n    function atVersion(uint256 version) external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Retrieves the description of the Oracle Provider.\\n     * @return A string representing the description of the Oracle Provider.\\n     */\\n    function description() external view returns (string memory);\\n\\n    /**\\n     * @notice Retrieves the name of the Oracle Provider.\\n     * @return A string representing the name of the Oracle Provider.\\n     */\\n    function oracleProviderName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7578ac3fc7a41e93a3e3d0c8eebebd559a0a34f8464079914e9f4f5cf39e427d\",\"license\":\"Apache-2.0\"},\"contracts/periphery/ChromaticLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IChromaticMarket} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarket.sol\\\";\\nimport {PendingLiquidity, ClaimableLiquidity, LiquidityBinStatus} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\nimport {BPS, FEE_RATES_LENGTH} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {IChromaticRouter} from \\\"@chromatic-protocol/contracts/periphery/interfaces/IChromaticRouter.sol\\\";\\n\\n/**\\n * @title ChromaticLens\\n * @dev A contract that provides utility functions for interacting with Chromatic markets.\\n */\\ncontract ChromaticLens {\\n\\n    struct CLBBalance {\\n        uint256 tokenId;\\n        uint256 balance;\\n        uint256 totalSupply;\\n        uint256 binValue;\\n    }\\n\\n    IChromaticRouter immutable router;\\n\\n    constructor(IChromaticRouter _router) {\\n        router = _router;\\n    }\\n\\n    /**\\n     * @dev Retrieves the OracleVersion for the specified oracle version in the given Chromatic market.\\n     * @param market The address of the Chromatic market contract.\\n     * @param version An oracle version.\\n     * @return oracleVersion The OracleVersion for the specified oracle version.\\n     */\\n    function oracleVersion(\\n        IChromaticMarket market,\\n        uint256 version\\n    ) external view returns (IOracleProvider.OracleVersion memory) {\\n        return market.oracleProvider().atVersion(version);\\n    }\\n\\n    /**\\n     * @dev Retrieves the LP receipts for the specified owner in the given Chromatic market.\\n     * @param market The address of the Chromatic market contract.\\n     * @param owner The address of the LP token owner.\\n     * @return result An array of LpReceipt containing the LP receipts for the owner.\\n     */\\n    function lpReceipts(\\n        IChromaticMarket market,\\n        address owner\\n    ) public view returns (LpReceipt[] memory result) {\\n        uint256[] memory receiptIds = router.getLpReceiptIds(address(market), owner);\\n\\n        result = new LpReceipt[](receiptIds.length);\\n        for (uint i; i < receiptIds.length; ) {\\n            //slither-disable-next-line calls-loop\\n            result[i] = market.getLpReceipt(receiptIds[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves the CLB token balances for the specified owner in the given Chromatic market.\\n     * @param market The address of the Chromatic market contract.\\n     * @param owner The address of the CLB token owner.\\n     * @return An array of CLBBalance containing the CLB token balance information for the owner.\\n     */\\n    function clbBalanceOf(\\n        IChromaticMarket market,\\n        address owner\\n    ) external view returns (CLBBalance[] memory) {\\n        uint256[] memory tokenIds = CLBTokenLib.tokenIds();\\n        address[] memory accounts = new address[](tokenIds.length);\\n        // Set all accounts to the owner's address\\n        for (uint256 i; i < accounts.length; ) {\\n            accounts[i] = owner;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Get balances of CLB tokens for the owner\\n        uint256[] memory balances = market.clbToken().balanceOfBatch(accounts, tokenIds);\\n\\n        // Count the number of CLB tokens with non-zero balance\\n        //slither-disable-next-line uninitialized-local\\n        uint256 effectiveCnt;\\n        for (uint256 i; i < balances.length; ) {\\n            if (balances[i] != 0) {\\n                unchecked {\\n                    effectiveCnt++;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256[] memory effectiveBalances = new uint256[](effectiveCnt);\\n        uint256[] memory effectiveTokenIds = new uint256[](effectiveCnt);\\n        int16[] memory effectiveFeeRates = new int16[](effectiveCnt);\\n\\n        //slither-disable-next-line uninitialized-local\\n        uint256 idx;\\n        for (uint256 i; i < balances.length; ) {\\n            if (balances[i] != 0) {\\n                effectiveBalances[idx] = balances[i];\\n                effectiveTokenIds[idx] = tokenIds[i];\\n                effectiveFeeRates[idx] = CLBTokenLib.decodeId(tokenIds[i]);\\n                unchecked {\\n                    idx++;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256[] memory totalSupplies = market.clbToken().totalSupplyBatch(effectiveTokenIds);\\n        uint256[] memory binValues = market.getBinValues(effectiveFeeRates);\\n\\n        // Populate the result array with CLB token balance information\\n        CLBBalance[] memory result = new CLBBalance[](effectiveCnt);\\n        for (uint256 i; i < effectiveCnt; ) {\\n            result[i] = CLBBalance({\\n                tokenId: effectiveTokenIds[i],\\n                balance: effectiveBalances[i],\\n                totalSupply: totalSupplies[i],\\n                binValue: binValues[i]\\n            });\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information for a specific trading fee rate in the given Chromatic market.\\n     * @param market The Chromatic market from which to retrieve the pending liquidity information.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.\\n     * @return pendingLiquidity An instance of PendingLiquidity representing the pending liquidity information.\\n     */\\n    function pendingLiquidity(\\n        IChromaticMarket market,\\n        int16 tradingFeeRate\\n    ) external view returns (PendingLiquidity memory) {\\n        return market.pendingLiquidity(tradingFeeRate);\\n    }\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information for a list of trading fee rates in the given Chromatic market.\\n     * @param market The Chromatic market from which to retrieve the pending liquidity information.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.\\n     * @return pendingLiquidityList An array of PendingLiquidity representing the pending liquidity information for each trading fee rate.\\n     */\\n    function pendingLiquidityBatch(\\n        IChromaticMarket market,\\n        int16[] calldata tradingFeeRates\\n    ) external view returns (PendingLiquidity[] memory) {\\n        return market.pendingLiquidityBatch(tradingFeeRates);\\n    }\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the given Chromatic Market.\\n     * @param market The Chromatic Market from which to retrieve the claimable liquidity information.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.\\n     * @param _oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        IChromaticMarket market,\\n        int16 tradingFeeRate,\\n        uint256 _oracleVersion\\n    ) external view returns (ClaimableLiquidity memory) {\\n        return market.claimableLiquidity(tradingFeeRate, _oracleVersion);\\n    }\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a list of trading fee rates and a specific oracle version from the given Chromatic Market.\\n     * @param market The Chromatic Market from which to retrieve the claimable liquidity information.\\n     * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.\\n     * @param _oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidityList An array of ClaimableLiquidity representing the claimable liquidity information for each trading fee rate and the oracle version.\\n     */\\n    function claimableLiquidityBatch(\\n        IChromaticMarket market,\\n        int16[] calldata tradingFeeRates,\\n        uint256 _oracleVersion\\n    ) external view returns (ClaimableLiquidity[] memory) {\\n        return market.claimableLiquidityBatch(tradingFeeRates, _oracleVersion);\\n    }\\n\\n    /**\\n     * @dev Retrieves the liquidity bin statuses for the specified Chromatic Market.\\n     * @param market The Chromatic Market contract for which liquidity bin statuses are retrieved.\\n     * @return statuses An array of LiquidityBinStatus representing the liquidity bin statuses.\\n     */\\n    function liquidityBinStatuses(\\n        IChromaticMarket market\\n    ) external view returns (LiquidityBinStatus[] memory) {\\n        return market.liquidityBinStatuses();\\n    }\\n}\\n\",\"keccak256\":\"0x388a0e0166e741e0dec10bde3692caa70bc895f8a7cab830d8597190eccd6869\",\"license\":\"MIT\"},\"contracts/periphery/interfaces/IChromaticRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IChromaticLiquidityCallback} from \\\"@chromatic-protocol/contracts/core/interfaces/callback/IChromaticLiquidityCallback.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\nimport {OpenPositionInfo} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketTrade.sol\\\";\\n\\n/**\\n * @title IChromaticRouter\\n * @dev Interface for the ChromaticRouter contract.\\n */\\ninterface IChromaticRouter is IChromaticLiquidityCallback {\\n    /**\\n     * @dev Emitted when a position is opened.\\n     * @param marketAddress The address of the market.\\n     * @param trader The owner of The account\\n     * @param account The account The address of the account opening the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param tradingFeeUSD The trading fee in USD\\n     */\\n    event OpenPosition(\\n        address indexed marketAddress,\\n        address indexed trader,\\n        address indexed account,\\n        uint256 tradingFee,\\n        uint256 tradingFeeUSD\\n    );\\n\\n    /**\\n     * @dev Emitted when a new account is created.\\n     * @param account The address of the created account.\\n     * @param owner The address of the owner of the created account.\\n     */\\n    event AccountCreated(address indexed account, address indexed owner);\\n\\n    /**\\n     * @dev Opens a new position in a ChromaticMarket contract.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param qty The quantity of the position.\\n     * @param takerMargin The margin amount for the taker.\\n     * @param makerMargin The margin amount for the maker.\\n     * @param maxAllowableTradingFee The maximum allowable trading fee.\\n     * @return position The new position.\\n     */\\n    function openPosition(\\n        address market,\\n        int256 qty,\\n        uint256 takerMargin,\\n        uint256 makerMargin,\\n        uint256 maxAllowableTradingFee\\n    ) external returns (OpenPositionInfo memory);\\n\\n    /**\\n     * @notice Closes a position in a ChromaticMarket contract.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param positionId The ID of the position to close.\\n     */\\n    function closePosition(address market, uint256 positionId) external;\\n\\n    /**\\n     * @notice Claims a position from a ChromaticMarket contract.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param positionId The ID of the position to claim.\\n     */\\n    function claimPosition(address market, uint256 positionId) external;\\n\\n    /**\\n     * @notice Adds liquidity to a ChromaticMarket contract.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param feeRate The fee rate of the liquidity bin.\\n     * @param amount The amount to add as liquidity.\\n     * @param recipient The recipient address.\\n     * @return receipt The LP receipt.\\n     */\\n    function addLiquidity(\\n        address market,\\n        int16 feeRate,\\n        uint256 amount,\\n        address recipient\\n    ) external returns (LpReceipt memory);\\n\\n    /**\\n     * @notice Claims liquidity from a ChromaticMarket contract.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param receiptId The ID of the LP receipt.\\n     */\\n    function claimLiquidity(address market, uint256 receiptId) external;\\n\\n    /**\\n     * @notice Removes liquidity from a ChromaticMarket contract.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param feeRate The fee rate of the liquidity bin.\\n     * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.\\n     * @param recipient The recipient address.\\n     * @return receipt The LP receipt.\\n     */\\n    function removeLiquidity(\\n        address market,\\n        int16 feeRate,\\n        uint256 clbTokenAmount,\\n        address recipient\\n    ) external returns (LpReceipt memory);\\n\\n    /**\\n     * @notice Withdraws liquidity from a ChromaticMarket contract.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param receiptId The ID of the LP receipt.\\n     */\\n    function withdrawLiquidity(address market, uint256 receiptId) external;\\n\\n    /**\\n     * @notice Creates a new user account.\\n     * @dev Only one account can be created per user.\\n     *      Emits an `AccountCreated` event upon successful creation.\\n     */\\n    function createAccount() external;\\n\\n    /**\\n     * @notice Retrieves the account of the caller.\\n     * @return The account address.\\n     */\\n    function getAccount() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the LP receipt IDs of the caller for the specified market.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @return An array of LP receipt IDs.\\n     */\\n    function getLpReceiptIds(address market) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Get the LP receipt IDs associated with a specific market and owner.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param owner The address of the owner.\\n     * @return An array of LP receipt IDs.\\n     */\\n    function getLpReceiptIds(\\n        address market,\\n        address owner\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param recipient The address of the recipient for each liquidity bin.\\n     * @param feeRates An array of fee rates for each liquidity bin.\\n     * @param amounts An array of amounts to add as liquidity for each bin.\\n     * @return lpReceipts An array of LP receipts.\\n     */\\n    function addLiquidityBatch(\\n        address market,\\n        address recipient,\\n        int16[] calldata feeRates,\\n        uint256[] calldata amounts\\n    ) external returns (LpReceipt[] memory lpReceipts);\\n\\n    /**\\n     * @notice Claims liquidity from multiple ChromaticMarket contracts in a batch.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param receiptIds An array of LP receipt IDs to claim liquidity from.\\n     */\\n    function claimLiquidityBatch(address market, uint256[] calldata receiptIds) external;\\n\\n    /**\\n     * @notice Removes liquidity from multiple ChromaticMarket contracts in a batch.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param recipient The address of the recipient for each liquidity bin.\\n     * @param feeRates An array of fee rates for each liquidity bin.\\n     * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.\\n     * @return lpReceipts An array of LP receipts.\\n     */\\n    function removeLiquidityBatch(\\n        address market,\\n        address recipient,\\n        int16[] calldata feeRates,\\n        uint256[] calldata clbTokenAmounts\\n    ) external returns (LpReceipt[] memory lpReceipts);\\n\\n    /**\\n     * @notice Withdraws liquidity from multiple ChromaticMarket contracts in a batch.\\n     * @param market The address of the ChromaticMarket contract.\\n     * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.\\n     */\\n    function withdrawLiquidityBatch(address market, uint256[] calldata receiptIds) external;\\n}\\n\",\"keccak256\":\"0x2a6a834265706032f4f23458894cc5b5fbbcd53516c0645d12c5e5336c78b350\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161200838038061200883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611f7d61008b6000396000610d540152611f7d6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639b2fa3721161005b5780639b2fa3721461012b578063ad35f0261461014b578063bb4b52fe1461016b578063e1928af01461018b57600080fd5b80631e7317611461008d57806353fd2a92146100b6578063585bc529146100d6578063676c6ce9146100f6575b600080fd5b6100a061009b36600461132d565b6101ab565b6040516100ad9190611382565b60405180910390f35b6100c96100c43660046113e4565b61026d565b6040516100ad9190611440565b6100e96100e43660046114ad565b610332565b6040516100ad91906114e6565b61010961010436600461154a565b6109d8565b60408051825181526020808401519082015291810151908201526060016100ad565b61013e610139366004611585565b610aed565b6040516100ad91906115c6565b61015e6101593660046115ff565b610bb8565b6040516100ad919061161c565b61017e610179366004611679565b610c4b565b6040516100ad91906116a7565b61019e6101993660046114ad565b610d01565b6040516100ad91906116f7565b6040517f68adaeaa00000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff8516906368adaeaa906102029086908690600401611805565b600060405180830381865afa15801561021f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102659190810190611941565b949350505050565b6040517f70ebd41b00000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff8616906370ebd41b906102c6908790879087906004016119e0565b600060405180830381865afa1580156102e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103299190810190611a74565b95945050505050565b6060600061033e610f07565b90506000815167ffffffffffffffff81111561035c5761035c611819565b604051908082528060200260200182016040528015610385578160200160208202803683370190505b50905060005b81518110156103d457848282815181106103a7576103a7611b02565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010161038b565b5060008573ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190611b31565b73ffffffffffffffffffffffffffffffffffffffff16634e1273f483856040518363ffffffff1660e01b815260040161047f929190611b7e565b600060405180830381865afa15801561049c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104e29190810190611beb565b90506000805b82518110156105215782818151811061050357610503611b02565b6020026020010151600014610519576001909101905b6001016104e8565b5060008167ffffffffffffffff81111561053d5761053d611819565b604051908082528060200260200182016040528015610566578160200160208202803683370190505b50905060008267ffffffffffffffff81111561058457610584611819565b6040519080825280602002602001820160405280156105ad578160200160208202803683370190505b50905060008367ffffffffffffffff8111156105cb576105cb611819565b6040519080825280602002602001820160405280156105f4578160200160208202803683370190505b5090506000805b86518110156106e75786818151811061061657610616611b02565b60200260200101516000146106df5786818151811061063757610637611b02565b602002602001015185838151811061065157610651611b02565b60200260200101818152505088818151811061066f5761066f611b02565b602002602001015184838151811061068957610689611b02565b6020026020010181815250506106b78982815181106106aa576106aa611b02565b6020026020010151611009565b8383815181106106c9576106c9611b02565b600192830b602091820292909201015291909101905b6001016105fb565b5060008b73ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190611b31565b73ffffffffffffffffffffffffffffffffffffffff166377954ac2856040518263ffffffff1660e01b81526004016107909190611c7c565b600060405180830381865afa1580156107ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107f39190810190611beb565b905060008c73ffffffffffffffffffffffffffffffffffffffff1663faf07bf3856040518263ffffffff1660e01b81526004016108309190611c8f565b600060405180830381865afa15801561084d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108939190810190611beb565b905060008767ffffffffffffffff8111156108b0576108b0611819565b60405190808252806020026020018201604052801561090c57816020015b6108f96040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816108ce5790505b50905060005b888110156109c457604051806080016040528088838151811061093757610937611b02565b6020026020010151815260200189838151811061095657610956611b02565b6020026020010151815260200185838151811061097557610975611b02565b6020026020010151815260200184838151811061099457610994611b02565b60200260200101518152508282815181106109b1576109b1611b02565b6020908102919091010152600101610912565b509a50505050505050505050505b92915050565b6109fc60405180606001604052806000815260200160008152602001600081525090565b8273ffffffffffffffffffffffffffffffffffffffff16630aa7d2f96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b9190611b31565b73ffffffffffffffffffffffffffffffffffffffff16637ece075d836040518263ffffffff1660e01b8152600401610aa591815260200190565b606060405180830381865afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190611cca565b9392505050565b610b1f6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040517f5cefa9fb000000000000000000000000000000000000000000000000000000008152600184900b60048201526024810183905273ffffffffffffffffffffffffffffffffffffffff851690635cefa9fb9060440160a060405180830381865afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102659190611d06565b60608173ffffffffffffffffffffffffffffffffffffffff166338085c3d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c05573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109d29190810190611d22565b610c6f60405180606001604052806000815260200160008152602001600081525090565b6040517f837d4b58000000000000000000000000000000000000000000000000000000008152600183900b600482015273ffffffffffffffffffffffffffffffffffffffff84169063837d4b5890602401606060405180830381865afa158015610cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190611deb565b6040517f067681e800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015282811660248301526060916000917f0000000000000000000000000000000000000000000000000000000000000000169063067681e890604401600060405180830381865afa158015610d9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610de19190810190611beb565b9050805167ffffffffffffffff811115610dfd57610dfd611819565b604051908082528060200260200182016040528015610e3657816020015b610e23611240565b815260200190600190039081610e1b5790505b50915060005b8151811015610eff578473ffffffffffffffffffffffffffffffffffffffff1663b79711e1838381518110610e7357610e73611b02565b60200260200101516040518263ffffffff1660e01b8152600401610e9991815260200190565b60c060405180830381865afa158015610eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eda9190611e07565b838281518110610eec57610eec611b02565b6020908102919091010152600101610e3c565b505092915050565b60606000610f13611040565b90506000610f2360246002611ecc565b67ffffffffffffffff811115610f3b57610f3b611819565b604051908082528060200260200182016040528015610f64578160200160208202803683370190505b50905060005b602481101561100257610f94838260248110610f8857610f88611b02565b6020020151600161117c565b828281518110610fa657610fa6611b02565b602002602001018181525050610fd3838260248110610fc757610fc7611b02565b6020020151600061117c565b82610fdf602484611ee3565b81518110610fef57610fef611b02565b6020908102919091010152600101610f6a565b5092915050565b60006402540be40082106110375761102e6110296402540be40084611ef6565b6111a4565b6109d290611f09565b6109d2826111a4565b61104861129d565b50604080516104808101825260018152600260208201526003918101919091526004606082015260056080820152600660a0820152600760c0820152600860e08201526009610100820152600a6101208201526014610140820152601e610160820152602861018082015260326101a0820152603c6101c082015260466101e08201526050610200820152605a610220820152606461024082015260c861026082015261012c6102808201526101906102a08201526101f46102c08201526102586102e08201526102bc610300820152610320808201526103846103408201526103e86103608201526105dc6103808201526107d06103a08201526109c46103c0820152610bb86103e0820152610dac610400820152610fa061042082015261119461044082015261138861046082015290565b60008161119b576111966402540be40061ffff8516611ee3565b610ae6565b505061ffff1690565b600061ffff82111561123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f3620626974730000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b5090565b6040518060c00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006001811115611290576112906116c8565b8152600060209091015290565b6040518061048001604052806024906020820280368337509192915050565b73ffffffffffffffffffffffffffffffffffffffff811681146112de57600080fd5b50565b60008083601f8401126112f357600080fd5b50813567ffffffffffffffff81111561130b57600080fd5b6020830191508360208260051b850101111561132657600080fd5b9250929050565b60008060006040848603121561134257600080fd5b833561134d816112bc565b9250602084013567ffffffffffffffff81111561136957600080fd5b611375868287016112e1565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b818110156113d8576113c58385518051825260208082015190830152604090810151910152565b928401926060929092019160010161139e565b50909695505050505050565b600080600080606085870312156113fa57600080fd5b8435611405816112bc565b9350602085013567ffffffffffffffff81111561142157600080fd5b61142d878288016112e1565b9598909750949560400135949350505050565b6020808252825182820181905260009190848201906040850190845b818110156113d85761149a83855180518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b9284019260a0929092019160010161145c565b600080604083850312156114c057600080fd5b82356114cb816112bc565b915060208301356114db816112bc565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561153d57815180518552868101518786015285810151868601526060908101519085015260809093019290850190600101611503565b5091979650505050505050565b6000806040838503121561155d57600080fd5b8235611568816112bc565b946020939093013593505050565b8060010b81146112de57600080fd5b60008060006060848603121561159a57600080fd5b83356115a5816112bc565b925060208401356115b581611576565b929592945050506040919091013590565b60a081016109d2828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b60006020828403121561161157600080fd5b8135610ae6816112bc565b602080825282518282018190526000919060409081850190868401855b8281101561153d5781518051855286810151878601528581015186860152606090810151600190810b918601919091526080909401939186019101611639565b6000806040838503121561168c57600080fd5b8235611697816112bc565b915060208301356114db81611576565b815181526020808301519082015260408083015190820152606081016109d2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208082528251828201819052600091906040908185019086840185805b838110156117b4578251805186528781015188870152868101518787015260608082015173ffffffffffffffffffffffffffffffffffffffff16908701526080808201516002811061178e577f4e487b710000000000000000000000000000000000000000000000000000000085526021600452602485fd5b9087015260a090810151600190810b9187019190915260c0909501949287019201611715565b509298975050505050505050565b8183526000602080850194508260005b858110156117fa5781356117e581611576565b600190810b88529683019691830191016117d2565b509495945050505050565b6020815260006102656020830184866117c2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561186b5761186b611819565b60405290565b6040516080810167ffffffffffffffff8111828210171561186b5761186b611819565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156118db576118db611819565b604052919050565b600067ffffffffffffffff8211156118fd576118fd611819565b5060051b60200190565b60006060828403121561191957600080fd5b611921611848565b905081518152602082015160208201526040820151604082015292915050565b6000602080838503121561195457600080fd5b825167ffffffffffffffff81111561196b57600080fd5b8301601f8101851361197c57600080fd5b805161198f61198a826118e3565b611894565b818152606091820283018401918482019190888411156119ae57600080fd5b938501935b838510156119d4576119c58986611907565b835293840193918501916119b3565b50979650505050505050565b6040815260006119f46040830185876117c2565b9050826020830152949350505050565b600060a08284031215611a1657600080fd5b60405160a0810181811067ffffffffffffffff82111715611a3957611a39611819565b806040525080915082518152602083015160208201526040830151604082015260608301516060820152608083015160808201525092915050565b60006020808385031215611a8757600080fd5b825167ffffffffffffffff811115611a9e57600080fd5b8301601f81018513611aaf57600080fd5b8051611abd61198a826118e3565b81815260a09182028301840191848201919088841115611adc57600080fd5b938501935b838510156119d457611af38986611a04565b83529384019391850191611ae1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611b4357600080fd5b8151610ae6816112bc565b600081518084526020808501945080840160005b838110156117fa57815187529582019590820190600101611b62565b604080825283519082018190526000906020906060840190828701845b82811015611bcd57815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101611b9b565b50505083810382850152611be18186611b4e565b9695505050505050565b60006020808385031215611bfe57600080fd5b825167ffffffffffffffff811115611c1557600080fd5b8301601f81018513611c2657600080fd5b8051611c3461198a826118e3565b81815260059190911b82018301908381019087831115611c5357600080fd5b928401925b82841015611c7157835182529284019290840190611c58565b979650505050505050565b602081526000610ae66020830184611b4e565b6020808252825182820181905260009190848201906040850190845b818110156113d8578351600190810b8452938501939285019201611cab565b600060608284031215611cdc57600080fd5b611ce4611848565b8251815260208301516020820152604083015160408201528091505092915050565b600060a08284031215611d1857600080fd5b610ae68383611a04565b60006020808385031215611d3557600080fd5b825167ffffffffffffffff811115611d4c57600080fd5b8301601f81018513611d5d57600080fd5b8051611d6b61198a826118e3565b81815260079190911b82018301908381019087831115611d8a57600080fd5b928401925b82841015611c715760808489031215611da85760008081fd5b611db0611871565b84518152858501518682015260408086015190820152606080860151611dd581611576565b9082015282526080939093019290840190611d8f565b600060608284031215611dfd57600080fd5b610ae68383611907565b600060c08284031215611e1957600080fd5b60405160c0810181811067ffffffffffffffff82111715611e3c57611e3c611819565b80604052508251815260208301516020820152604083015160408201526060830151611e67816112bc565b6060820152608083015160028110611e7e57600080fd5b608082015260a0830151611e9181611576565b60a08201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176109d2576109d2611e9d565b808201808211156109d2576109d2611e9d565b818103818111156109d2576109d2611e9d565b60008160010b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80008103611f3e57611f3e611e9d565b6000039291505056fea26469706673582212203ad28624b6d5ec41cc0ccb3bb48cff71e715f4a038fc18d796a93fa72932da6764736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639b2fa3721161005b5780639b2fa3721461012b578063ad35f0261461014b578063bb4b52fe1461016b578063e1928af01461018b57600080fd5b80631e7317611461008d57806353fd2a92146100b6578063585bc529146100d6578063676c6ce9146100f6575b600080fd5b6100a061009b36600461132d565b6101ab565b6040516100ad9190611382565b60405180910390f35b6100c96100c43660046113e4565b61026d565b6040516100ad9190611440565b6100e96100e43660046114ad565b610332565b6040516100ad91906114e6565b61010961010436600461154a565b6109d8565b60408051825181526020808401519082015291810151908201526060016100ad565b61013e610139366004611585565b610aed565b6040516100ad91906115c6565b61015e6101593660046115ff565b610bb8565b6040516100ad919061161c565b61017e610179366004611679565b610c4b565b6040516100ad91906116a7565b61019e6101993660046114ad565b610d01565b6040516100ad91906116f7565b6040517f68adaeaa00000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff8516906368adaeaa906102029086908690600401611805565b600060405180830381865afa15801561021f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102659190810190611941565b949350505050565b6040517f70ebd41b00000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff8616906370ebd41b906102c6908790879087906004016119e0565b600060405180830381865afa1580156102e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103299190810190611a74565b95945050505050565b6060600061033e610f07565b90506000815167ffffffffffffffff81111561035c5761035c611819565b604051908082528060200260200182016040528015610385578160200160208202803683370190505b50905060005b81518110156103d457848282815181106103a7576103a7611b02565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010161038b565b5060008573ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190611b31565b73ffffffffffffffffffffffffffffffffffffffff16634e1273f483856040518363ffffffff1660e01b815260040161047f929190611b7e565b600060405180830381865afa15801561049c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104e29190810190611beb565b90506000805b82518110156105215782818151811061050357610503611b02565b6020026020010151600014610519576001909101905b6001016104e8565b5060008167ffffffffffffffff81111561053d5761053d611819565b604051908082528060200260200182016040528015610566578160200160208202803683370190505b50905060008267ffffffffffffffff81111561058457610584611819565b6040519080825280602002602001820160405280156105ad578160200160208202803683370190505b50905060008367ffffffffffffffff8111156105cb576105cb611819565b6040519080825280602002602001820160405280156105f4578160200160208202803683370190505b5090506000805b86518110156106e75786818151811061061657610616611b02565b60200260200101516000146106df5786818151811061063757610637611b02565b602002602001015185838151811061065157610651611b02565b60200260200101818152505088818151811061066f5761066f611b02565b602002602001015184838151811061068957610689611b02565b6020026020010181815250506106b78982815181106106aa576106aa611b02565b6020026020010151611009565b8383815181106106c9576106c9611b02565b600192830b602091820292909201015291909101905b6001016105fb565b5060008b73ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190611b31565b73ffffffffffffffffffffffffffffffffffffffff166377954ac2856040518263ffffffff1660e01b81526004016107909190611c7c565b600060405180830381865afa1580156107ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107f39190810190611beb565b905060008c73ffffffffffffffffffffffffffffffffffffffff1663faf07bf3856040518263ffffffff1660e01b81526004016108309190611c8f565b600060405180830381865afa15801561084d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108939190810190611beb565b905060008767ffffffffffffffff8111156108b0576108b0611819565b60405190808252806020026020018201604052801561090c57816020015b6108f96040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816108ce5790505b50905060005b888110156109c457604051806080016040528088838151811061093757610937611b02565b6020026020010151815260200189838151811061095657610956611b02565b6020026020010151815260200185838151811061097557610975611b02565b6020026020010151815260200184838151811061099457610994611b02565b60200260200101518152508282815181106109b1576109b1611b02565b6020908102919091010152600101610912565b509a50505050505050505050505b92915050565b6109fc60405180606001604052806000815260200160008152602001600081525090565b8273ffffffffffffffffffffffffffffffffffffffff16630aa7d2f96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b9190611b31565b73ffffffffffffffffffffffffffffffffffffffff16637ece075d836040518263ffffffff1660e01b8152600401610aa591815260200190565b606060405180830381865afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190611cca565b9392505050565b610b1f6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040517f5cefa9fb000000000000000000000000000000000000000000000000000000008152600184900b60048201526024810183905273ffffffffffffffffffffffffffffffffffffffff851690635cefa9fb9060440160a060405180830381865afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102659190611d06565b60608173ffffffffffffffffffffffffffffffffffffffff166338085c3d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c05573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109d29190810190611d22565b610c6f60405180606001604052806000815260200160008152602001600081525090565b6040517f837d4b58000000000000000000000000000000000000000000000000000000008152600183900b600482015273ffffffffffffffffffffffffffffffffffffffff84169063837d4b5890602401606060405180830381865afa158015610cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190611deb565b6040517f067681e800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015282811660248301526060916000917f0000000000000000000000000000000000000000000000000000000000000000169063067681e890604401600060405180830381865afa158015610d9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610de19190810190611beb565b9050805167ffffffffffffffff811115610dfd57610dfd611819565b604051908082528060200260200182016040528015610e3657816020015b610e23611240565b815260200190600190039081610e1b5790505b50915060005b8151811015610eff578473ffffffffffffffffffffffffffffffffffffffff1663b79711e1838381518110610e7357610e73611b02565b60200260200101516040518263ffffffff1660e01b8152600401610e9991815260200190565b60c060405180830381865afa158015610eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eda9190611e07565b838281518110610eec57610eec611b02565b6020908102919091010152600101610e3c565b505092915050565b60606000610f13611040565b90506000610f2360246002611ecc565b67ffffffffffffffff811115610f3b57610f3b611819565b604051908082528060200260200182016040528015610f64578160200160208202803683370190505b50905060005b602481101561100257610f94838260248110610f8857610f88611b02565b6020020151600161117c565b828281518110610fa657610fa6611b02565b602002602001018181525050610fd3838260248110610fc757610fc7611b02565b6020020151600061117c565b82610fdf602484611ee3565b81518110610fef57610fef611b02565b6020908102919091010152600101610f6a565b5092915050565b60006402540be40082106110375761102e6110296402540be40084611ef6565b6111a4565b6109d290611f09565b6109d2826111a4565b61104861129d565b50604080516104808101825260018152600260208201526003918101919091526004606082015260056080820152600660a0820152600760c0820152600860e08201526009610100820152600a6101208201526014610140820152601e610160820152602861018082015260326101a0820152603c6101c082015260466101e08201526050610200820152605a610220820152606461024082015260c861026082015261012c6102808201526101906102a08201526101f46102c08201526102586102e08201526102bc610300820152610320808201526103846103408201526103e86103608201526105dc6103808201526107d06103a08201526109c46103c0820152610bb86103e0820152610dac610400820152610fa061042082015261119461044082015261138861046082015290565b60008161119b576111966402540be40061ffff8516611ee3565b610ae6565b505061ffff1690565b600061ffff82111561123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f3620626974730000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b5090565b6040518060c00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006001811115611290576112906116c8565b8152600060209091015290565b6040518061048001604052806024906020820280368337509192915050565b73ffffffffffffffffffffffffffffffffffffffff811681146112de57600080fd5b50565b60008083601f8401126112f357600080fd5b50813567ffffffffffffffff81111561130b57600080fd5b6020830191508360208260051b850101111561132657600080fd5b9250929050565b60008060006040848603121561134257600080fd5b833561134d816112bc565b9250602084013567ffffffffffffffff81111561136957600080fd5b611375868287016112e1565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b818110156113d8576113c58385518051825260208082015190830152604090810151910152565b928401926060929092019160010161139e565b50909695505050505050565b600080600080606085870312156113fa57600080fd5b8435611405816112bc565b9350602085013567ffffffffffffffff81111561142157600080fd5b61142d878288016112e1565b9598909750949560400135949350505050565b6020808252825182820181905260009190848201906040850190845b818110156113d85761149a83855180518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b9284019260a0929092019160010161145c565b600080604083850312156114c057600080fd5b82356114cb816112bc565b915060208301356114db816112bc565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561153d57815180518552868101518786015285810151868601526060908101519085015260809093019290850190600101611503565b5091979650505050505050565b6000806040838503121561155d57600080fd5b8235611568816112bc565b946020939093013593505050565b8060010b81146112de57600080fd5b60008060006060848603121561159a57600080fd5b83356115a5816112bc565b925060208401356115b581611576565b929592945050506040919091013590565b60a081016109d2828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b60006020828403121561161157600080fd5b8135610ae6816112bc565b602080825282518282018190526000919060409081850190868401855b8281101561153d5781518051855286810151878601528581015186860152606090810151600190810b918601919091526080909401939186019101611639565b6000806040838503121561168c57600080fd5b8235611697816112bc565b915060208301356114db81611576565b815181526020808301519082015260408083015190820152606081016109d2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208082528251828201819052600091906040908185019086840185805b838110156117b4578251805186528781015188870152868101518787015260608082015173ffffffffffffffffffffffffffffffffffffffff16908701526080808201516002811061178e577f4e487b710000000000000000000000000000000000000000000000000000000085526021600452602485fd5b9087015260a090810151600190810b9187019190915260c0909501949287019201611715565b509298975050505050505050565b8183526000602080850194508260005b858110156117fa5781356117e581611576565b600190810b88529683019691830191016117d2565b509495945050505050565b6020815260006102656020830184866117c2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561186b5761186b611819565b60405290565b6040516080810167ffffffffffffffff8111828210171561186b5761186b611819565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156118db576118db611819565b604052919050565b600067ffffffffffffffff8211156118fd576118fd611819565b5060051b60200190565b60006060828403121561191957600080fd5b611921611848565b905081518152602082015160208201526040820151604082015292915050565b6000602080838503121561195457600080fd5b825167ffffffffffffffff81111561196b57600080fd5b8301601f8101851361197c57600080fd5b805161198f61198a826118e3565b611894565b818152606091820283018401918482019190888411156119ae57600080fd5b938501935b838510156119d4576119c58986611907565b835293840193918501916119b3565b50979650505050505050565b6040815260006119f46040830185876117c2565b9050826020830152949350505050565b600060a08284031215611a1657600080fd5b60405160a0810181811067ffffffffffffffff82111715611a3957611a39611819565b806040525080915082518152602083015160208201526040830151604082015260608301516060820152608083015160808201525092915050565b60006020808385031215611a8757600080fd5b825167ffffffffffffffff811115611a9e57600080fd5b8301601f81018513611aaf57600080fd5b8051611abd61198a826118e3565b81815260a09182028301840191848201919088841115611adc57600080fd5b938501935b838510156119d457611af38986611a04565b83529384019391850191611ae1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611b4357600080fd5b8151610ae6816112bc565b600081518084526020808501945080840160005b838110156117fa57815187529582019590820190600101611b62565b604080825283519082018190526000906020906060840190828701845b82811015611bcd57815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101611b9b565b50505083810382850152611be18186611b4e565b9695505050505050565b60006020808385031215611bfe57600080fd5b825167ffffffffffffffff811115611c1557600080fd5b8301601f81018513611c2657600080fd5b8051611c3461198a826118e3565b81815260059190911b82018301908381019087831115611c5357600080fd5b928401925b82841015611c7157835182529284019290840190611c58565b979650505050505050565b602081526000610ae66020830184611b4e565b6020808252825182820181905260009190848201906040850190845b818110156113d8578351600190810b8452938501939285019201611cab565b600060608284031215611cdc57600080fd5b611ce4611848565b8251815260208301516020820152604083015160408201528091505092915050565b600060a08284031215611d1857600080fd5b610ae68383611a04565b60006020808385031215611d3557600080fd5b825167ffffffffffffffff811115611d4c57600080fd5b8301601f81018513611d5d57600080fd5b8051611d6b61198a826118e3565b81815260079190911b82018301908381019087831115611d8a57600080fd5b928401925b82841015611c715760808489031215611da85760008081fd5b611db0611871565b84518152858501518682015260408086015190820152606080860151611dd581611576565b9082015282526080939093019290840190611d8f565b600060608284031215611dfd57600080fd5b610ae68383611907565b600060c08284031215611e1957600080fd5b60405160c0810181811067ffffffffffffffff82111715611e3c57611e3c611819565b80604052508251815260208301516020820152604083015160408201526060830151611e67816112bc565b6060820152608083015160028110611e7e57600080fd5b608082015260a0830151611e9181611576565b60a08201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176109d2576109d2611e9d565b808201808211156109d2576109d2611e9d565b818103818111156109d2576109d2611e9d565b60008160010b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80008103611f3e57611f3e611e9d565b6000039291505056fea26469706673582212203ad28624b6d5ec41cc0ccb3bb48cff71e715f4a038fc18d796a93fa72932da6764736f6c63430008130033",
  "devdoc": {
    "details": "A contract that provides utility functions for interacting with Chromatic markets.",
    "kind": "dev",
    "methods": {
      "claimableLiquidity(address,int16,uint256)": {
        "details": "Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the given Chromatic Market.",
        "params": {
          "_oracleVersion": "The oracle version for which to retrieve the claimable liquidity.",
          "market": "The Chromatic Market from which to retrieve the claimable liquidity information.",
          "tradingFeeRate": "The trading fee rate for which to retrieve the claimable liquidity."
        },
        "returns": {
          "_0": "claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information."
        }
      },
      "claimableLiquidityBatch(address,int16[],uint256)": {
        "details": "Retrieves the claimable liquidity information for a list of trading fee rates and a specific oracle version from the given Chromatic Market.",
        "params": {
          "_oracleVersion": "The oracle version for which to retrieve the claimable liquidity.",
          "market": "The Chromatic Market from which to retrieve the claimable liquidity information.",
          "tradingFeeRates": "The list of trading fee rates for which to retrieve the claimable liquidity."
        },
        "returns": {
          "_0": "claimableLiquidityList An array of ClaimableLiquidity representing the claimable liquidity information for each trading fee rate and the oracle version."
        }
      },
      "clbBalanceOf(address,address)": {
        "details": "Retrieves the CLB token balances for the specified owner in the given Chromatic market.",
        "params": {
          "market": "The address of the Chromatic market contract.",
          "owner": "The address of the CLB token owner."
        },
        "returns": {
          "_0": "An array of CLBBalance containing the CLB token balance information for the owner."
        }
      },
      "liquidityBinStatuses(address)": {
        "details": "Retrieves the liquidity bin statuses for the specified Chromatic Market.",
        "params": {
          "market": "The Chromatic Market contract for which liquidity bin statuses are retrieved."
        },
        "returns": {
          "_0": "statuses An array of LiquidityBinStatus representing the liquidity bin statuses."
        }
      },
      "lpReceipts(address,address)": {
        "details": "Retrieves the LP receipts for the specified owner in the given Chromatic market.",
        "params": {
          "market": "The address of the Chromatic market contract.",
          "owner": "The address of the LP token owner."
        },
        "returns": {
          "result": "An array of LpReceipt containing the LP receipts for the owner."
        }
      },
      "oracleVersion(address,uint256)": {
        "details": "Retrieves the OracleVersion for the specified oracle version in the given Chromatic market.",
        "params": {
          "market": "The address of the Chromatic market contract.",
          "version": "An oracle version."
        },
        "returns": {
          "_0": "oracleVersion The OracleVersion for the specified oracle version."
        }
      },
      "pendingLiquidity(address,int16)": {
        "details": "Retrieves the pending liquidity information for a specific trading fee rate in the given Chromatic market.",
        "params": {
          "market": "The Chromatic market from which to retrieve the pending liquidity information.",
          "tradingFeeRate": "The trading fee rate for which to retrieve the pending liquidity."
        },
        "returns": {
          "_0": "pendingLiquidity An instance of PendingLiquidity representing the pending liquidity information."
        }
      },
      "pendingLiquidityBatch(address,int16[])": {
        "details": "Retrieves the pending liquidity information for a list of trading fee rates in the given Chromatic market.",
        "params": {
          "market": "The Chromatic market from which to retrieve the pending liquidity information.",
          "tradingFeeRates": "The list of trading fee rates for which to retrieve the pending liquidity."
        },
        "returns": {
          "_0": "pendingLiquidityList An array of PendingLiquidity representing the pending liquidity information for each trading fee rate."
        }
      }
    },
    "title": "ChromaticLens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}