{
  "address": "0x7b58149424b83347dd4740F1B29CA6493909b3F8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IChromaticMarketFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "contract IWETH9",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidSwapValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "KeeperFeeTransferFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByDao",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByFactoryOrDao",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "SetRouter",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "WETH9",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approve",
          "type": "bool"
        }
      ],
      "name": "approveToRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IChromaticMarketFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "keeperAddress",
          "type": "address"
        }
      ],
      "name": "payKeeperFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcf2b1e9c0965d6cae7393294c3abf6c645a0546fb20f65be976b7407460f6afb",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0x7b58149424b83347dd4740F1B29CA6493909b3F8",
    "transactionIndex": 1,
    "gasUsed": "955805",
    "logsBloom": "0x
    "blockHash": "0x6f146e1c59fbbd2e760c8bc28ec4acb07910b058f0e459c660e160f31e420966",
    "transactionHash": "0xcf2b1e9c0965d6cae7393294c3abf6c645a0546fb20f65be976b7407460f6afb",
    "logs": [],
    "blockNumber": 3111046,
    "cumulativeGasUsed": "955805",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa74B572cA410b79B581C24cc37743d65b2D936c8",
    "0x64d630A03A9792F28769B2E5d781eaf0A1540D63",
    "0x980B62Da83eFf3D4576C647993b0c1D7faf17c73"
  ],
  "numDeployments": 4,
  "solcInputHash": "1e9db94fec94dd4fd878c14e15d047fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IChromaticMarketFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"contract IWETH9\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidSwapValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KeeperFeeTransferFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByDao\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByFactoryOrDao\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SetRouter\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"approveToRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IChromaticMarketFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"keeperAddress\",\"type\":\"address\"}],\"name\":\"payKeeperFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"A contract that pays keeper fees using a Uniswap router.\",\"errors\":{\"InvalidSwapValue()\":[{\"details\":\"Throws an error indicating that the swap value for the Uniswap trade is invalid.\"}],\"KeeperFeeTransferFailure()\":[{\"details\":\"Throws an error indicating that the transfer of keeper fee has failed.\"}],\"OnlyAccessableByDao()\":[{\"details\":\"Throws an error indicating that the caller is not the DAO.\"}],\"OnlyAccessableByFactoryOrDao()\":[{\"details\":\"Throws an error indicating that the caller is nether the chormatic factory contract nor the DAO.\"}]},\"kind\":\"dev\",\"methods\":{\"approveToRouter(address,bool)\":{\"details\":\"Only the factory or the DAO can call this function.\",\"params\":{\"approve\":\"A boolean indicating whether to approve or revoke approval.\",\"token\":\"The address of the token.\"}},\"constructor\":{\"details\":\"Constructor function.\",\"params\":{\"_factory\":\"The address of the ChromaticMarketFactory contract.\",\"_uniswapRouter\":\"The address of the Uniswap router contract.\",\"_weth\":\"The address of the WETH9 contract.\"}},\"payKeeperFee(address,uint256,address)\":{\"details\":\"Throws a `KeeperFeeTransferFailure` error if the transfer of ETH to the keeper address fails.      Throws an `InvalidSwapValue` error if the remaining balance of the input token after the swap is insufficient.\",\"params\":{\"amountOut\":\"The desired amount of output tokens.\",\"keeperAddress\":\"The address of the keeper to receive the fee.\",\"tokenIn\":\"The address of the token being swapped.\"},\"returns\":{\"amountIn\":\"The actual amount of input tokens used for the swap.\"}},\"setRouter(address)\":{\"details\":\"Sets the Uniswap router address.\",\"params\":{\"_uniswapRouter\":\"The address of the Uniswap router contract.\"}}},\"title\":\"KeeperFeePayer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveToRouter(address,bool)\":{\"notice\":\"Approves or revokes approval to the Uniswap router for a given token.\"},\"payKeeperFee(address,uint256,address)\":{\"notice\":\"Pays the keeper fee using Uniswap swaps.\"},\"setRouter(address)\":{\"notice\":\"Only the DAO can call this function.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/KeeperFeePayer.sol\":\"KeeperFeePayer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/KeeperFeePayer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {IWETH9} from \\\"@chromatic-protocol/contracts/core/interfaces/IWETH9.sol\\\";\\nimport {IKeeperFeePayer} from \\\"@chromatic-protocol/contracts/core/interfaces/IKeeperFeePayer.sol\\\";\\nimport {IChromaticMarketFactory} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\\\";\\n\\n/**\\n * @title KeeperFeePayer\\n * @dev A contract that pays keeper fees using a Uniswap router.\\n */\\ncontract KeeperFeePayer is IKeeperFeePayer {\\n    IChromaticMarketFactory public immutable factory;\\n    ISwapRouter public uniswapRouter;\\n    IWETH9 public immutable WETH9;\\n\\n    /**\\n     * @dev Throws an error indicating that the caller is not the DAO.\\n     */\\n    error OnlyAccessableByDao();\\n\\n    /**\\n     * @dev Throws an error indicating that the caller is nether the chormatic factory contract nor the DAO.\\n     */\\n    error OnlyAccessableByFactoryOrDao();\\n\\n    /**\\n     * @dev Throws an error indicating that the transfer of keeper fee has failed.\\n     */\\n    error KeeperFeeTransferFailure();\\n\\n    /**\\n     * @dev Throws an error indicating that the swap value for the Uniswap trade is invalid.\\n     */\\n    error InvalidSwapValue();\\n\\n    /**\\n     * @dev Modifier to restrict access to only the DAO.\\n     *      Throws an `OnlyAccessableByDao` error if the caller is not the DAO.\\n     */\\n    modifier onlyDao() {\\n        if (msg.sender != factory.dao()) revert OnlyAccessableByDao();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict access to only the factory or the DAO.\\n     *      Throws an `OnlyAccessableByFactoryOrDao` error if the caller is nether the chormatic factory contract nor the DAO.\\n     */\\n    modifier onlyFactoryOrDao() {\\n        if (msg.sender != address(factory) && msg.sender != factory.dao())\\n            revert OnlyAccessableByFactoryOrDao();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor function.\\n     * @param _factory The address of the ChromaticMarketFactory contract.\\n     * @param _uniswapRouter The address of the Uniswap router contract.\\n     * @param _weth The address of the WETH9 contract.\\n     */\\n    constructor(IChromaticMarketFactory _factory, ISwapRouter _uniswapRouter, IWETH9 _weth) {\\n        factory = _factory;\\n        uniswapRouter = _uniswapRouter;\\n        WETH9 = _weth;\\n    }\\n\\n    /**\\n     * @dev Sets the Uniswap router address.\\n     * @param _uniswapRouter The address of the Uniswap router contract.\\n     * @notice Only the DAO can call this function.\\n     */\\n    function setRouter(ISwapRouter _uniswapRouter) public onlyDao {\\n        uniswapRouter = _uniswapRouter;\\n        emit SetRouter(address(uniswapRouter));\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperFeePayer\\n     * @dev Only the factory or the DAO can call this function.\\n     */\\n    function approveToRouter(address token, bool approve) external onlyFactoryOrDao {\\n        require(IERC20(token).approve(address(uniswapRouter), approve ? type(uint256).max : 0));\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperFeePayer\\n     * @dev Throws a `KeeperFeeTransferFailure` error if the transfer of ETH to the keeper address fails.\\n     *      Throws an `InvalidSwapValue` error if the remaining balance of the input token after the swap is insufficient.\\n     */\\n    function payKeeperFee(\\n        address tokenIn,\\n        uint256 amountOut,\\n        address keeperAddress\\n    ) external returns (uint256 amountIn) {\\n        require(keeperAddress != address(0));\\n        uint256 balance = IERC20(tokenIn).balanceOf(address(this));\\n\\n        amountIn = swapExactOutput(tokenIn, address(this), amountOut, balance);\\n\\n        // unwrap\\n        WETH9.withdraw(amountOut);\\n\\n        // send eth to keeper\\n        //slither-disable-next-line arbitrary-send-eth\\n        bool success = payable(keeperAddress).send(amountOut);\\n        if (!success) revert KeeperFeeTransferFailure();\\n\\n        uint256 remainedBalance = IERC20(tokenIn).balanceOf(address(this));\\n        if (remainedBalance + amountIn < balance) revert InvalidSwapValue();\\n\\n        SafeERC20.safeTransfer(IERC20(tokenIn), msg.sender, remainedBalance);\\n    }\\n\\n    /**\\n     * @dev Executes a Uniswap swap with exact output amount.\\n     * @param tokenIn The address of the input token.\\n     * @param recipient The address that will receive the output tokens.\\n     * @param amountOut The desired amount of output tokens.\\n     * @param amountInMaximum The maximum amount of input tokens allowed for the swap.\\n     * @return amountIn The actual amount of input tokens used for the swap.\\n     */\\n    function swapExactOutput(\\n        address tokenIn,\\n        address recipient,\\n        uint256 amountOut,\\n        uint256 amountInMaximum\\n    ) internal returns (uint256 amountIn) {\\n        if (tokenIn == address(WETH9)) return amountOut;\\n\\n        ISwapRouter.ExactOutputSingleParams memory swapParam = ISwapRouter.ExactOutputSingleParams(\\n            tokenIn,\\n            address(WETH9),\\n            factory.getUniswapFeeTier(tokenIn),\\n            recipient,\\n            block.timestamp,\\n            amountOut,\\n            amountInMaximum,\\n            0\\n        );\\n        return uniswapRouter.exactOutputSingle(swapParam);\\n    }\\n\\n    /**\\n     * @dev Fallback function to receive ETH payments.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Fallback function to receive ETH payments.\\n     */\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xabe5777595f32cd519af1630bca8a5680b103394f568bca09c938ea4dbb560d0\",\"license\":\"BUSL-1.1\"},\"contracts/core/interfaces/IChromaticMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IMarketDeployer} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IMarketDeployer.sol\\\";\\nimport {ISettlementTokenRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\\\";\\nimport {IOracleProviderRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IOracleProviderRegistry.sol\\\";\\n\\n/**\\n * @title IChromaticMarketFactory\\n * @dev Interface for the Chromatic Market Factory contract.\\n */\\ninterface IChromaticMarketFactory is\\n    IMarketDeployer,\\n    IOracleProviderRegistry,\\n    ISettlementTokenRegistry,\\n    IInterestCalculator\\n{\\n    /**\\n     * @notice Emitted when the DAO address is updated.\\n     * @param daoOld The old DAO address.\\n     * @param daoNew The new DAO address.\\n     */\\n    event DaoUpdated(address indexed daoOld, address indexed daoNew);\\n\\n    /**\\n     * @notice Emitted when the DAO treasury address is updated.\\n     * @param treasuryOld The old DAO treasury address.\\n     * @param treasuryNew The new DAO treasury address.\\n     */\\n    event TreasuryUpdated(address indexed treasuryOld, address indexed treasuryNew);\\n\\n    /**\\n     * @notice Emitted when the liquidator address is updated.\\n     * @param liquidatorOld The old liquidator address.\\n     * @param liquidatorNew The new liquidator address.\\n     */\\n    event LiquidatorUpdated(address indexed liquidatorOld, address indexed liquidatorNew);\\n\\n    /**\\n     * @notice Emitted when the keeper fee payer address is updated.\\n     * @param keeperFeePayerOld The old keeper fee payer address.\\n     * @param keeperFeePayerNew The new keeper fee payer address.\\n     */\\n    event KeeperFeePayerUpdated(\\n        address indexed keeperFeePayerOld,\\n        address indexed keeperFeePayerNew\\n    );\\n\\n    /**\\n     * @notice Emitted when the default protocol fee rate is updated.\\n     * @param defaultProtocolFeeRateOld The old default protocol fee rate.\\n     * @param defaultProtocolFeeRateNew The new default protocol fee rate.\\n     */\\n    event DefaultProtocolFeeRateUpdated(\\n        uint16 indexed defaultProtocolFeeRateOld,\\n        uint16 indexed defaultProtocolFeeRateNew\\n    );\\n\\n    /**\\n     * @notice Emitted when the vault address is set.\\n     * @param vault The vault address.\\n     */\\n    event VaultSet(address indexed vault);\\n\\n    /**\\n     * @notice Emitted when the market settlement task address is updated.\\n     * @param marketSettlementOld The old market settlement task address.\\n     * @param marketSettlementNew The new market settlement task address.\\n     */\\n    event MarketSettlementUpdated(\\n        address indexed marketSettlementOld,\\n        address indexed marketSettlementNew\\n    );\\n\\n    /**\\n     * @notice Emitted when a market is created.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @param market The address of the created market.\\n     */\\n    event MarketCreated(\\n        address indexed oracleProvider,\\n        address indexed settlementToken,\\n        address indexed market\\n    );\\n\\n    /**\\n     * @notice Returns the address of the DAO.\\n     * @return The address of the DAO.\\n     */\\n    function dao() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO treasury.\\n     * @return The address of the DAO treasury.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the liquidator.\\n     * @return The address of the liquidator.\\n     */\\n    function liquidator() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the vault.\\n     * @return The address of the vault.\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the keeper fee payer.\\n     * @return The address of the keeper fee payer.\\n     */\\n    function keeperFeePayer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the market settlement task.\\n     * @return The address of the market settlement task.\\n     */\\n    function marketSettlement() external view returns (address);\\n\\n    /**\\n     * @notice Returns the default protocol fee rate.\\n     * @return The default protocol fee rate.\\n     */\\n    function defaultProtocolFeeRate() external view returns (uint16);\\n\\n    /**\\n     * @notice Updates the DAO address.\\n     * @param _dao The new DAO address.\\n     */\\n    function updateDao(address _dao) external;\\n\\n    /**\\n     * @notice Updates the DAO treasury address.\\n     * @param _treasury The new DAO treasury address.\\n     */\\n    function updateTreasury(address _treasury) external;\\n\\n    /**\\n     * @notice Updates the liquidator address.\\n     * @param _liquidator The new liquidator address.\\n     */\\n    function updateLiquidator(address _liquidator) external;\\n\\n    /**\\n     * @notice Updates the keeper fee payer address.\\n     * @param _keeperFeePayer The new keeper fee payer address.\\n     */\\n    function updateKeeperFeePayer(address _keeperFeePayer) external;\\n\\n    /**\\n     * @notice Updates the default protocl fee rate.\\n     * @param _defaultProtocolFeeRate The new default protocol fee rate.\\n     */\\n    function updateDefaultProtocolFeeRate(uint16 _defaultProtocolFeeRate) external;\\n\\n    /**\\n     * @notice Sets the vault address.\\n     * @param _vault The vault address.\\n     */\\n    function setVault(address _vault) external;\\n\\n    /**\\n     * @notice Updates the market settlement task address.\\n     * @param _marketSettlement The new market settlement task address.\\n     */\\n    function updateMarketSettlement(address _marketSettlement) external;\\n\\n    /**\\n     * @notice Returns an array of all market addresses.\\n     * @return markets An array of all market addresses.\\n     */\\n    function getMarkets() external view returns (address[] memory markets);\\n\\n    /**\\n     * @notice Returns an array of market addresses associated with a settlement token.\\n     * @param settlementToken The address of the settlement token.\\n     * @return An array of market addresses.\\n     */\\n    function getMarketsBySettlmentToken(\\n        address settlementToken\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of a market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @return The address of the market.\\n     */\\n    function getMarket(\\n        address oracleProvider,\\n        address settlementToken\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Creates a new market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     */\\n    function createMarket(address oracleProvider, address settlementToken) external;\\n\\n    /**\\n     * @notice Checks if a market is registered.\\n     * @param market The address of the market.\\n     * @return True if the market is registered, false otherwise.\\n     */\\n    function isRegisteredMarket(address market) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x55af351b2b8078b2bce59668930a3d8f2102a97d38a50859f0f93183712cf2b0\",\"license\":\"MIT\"},\"contracts/core/interfaces/IInterestCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IInterestCalculator\\n * @dev Interface for an interest calculator contract.\\n */\\ninterface IInterestCalculator {\\n    /**\\n     * @notice Calculates the interest accrued for a given token and amount within a specified time range.\\n     * @param token The address of the token.\\n     * @param amount The amount of the token.\\n     * @param from The starting timestamp (inclusive) of the time range.\\n     * @param to The ending timestamp (exclusive) of the time range.\\n     * @return The accrued interest for the specified token and amount within the given time range.\\n     */\\n    function calculateInterest(\\n        address token,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf70b44ce6eb1422abed056169dc5db83ddbb2ee34d7751192f00e6cb3dc1ccbe\",\"license\":\"MIT\"},\"contracts/core/interfaces/IKeeperFeePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IKeeperFeePayer\\n * @dev Interface for a contract that pays keeper fees.\\n */\\ninterface IKeeperFeePayer {\\n    event SetRouter(address indexed);\\n\\n    /**\\n     * @notice Approves or revokes approval to the Uniswap router for a given token.\\n     * @param token The address of the token.\\n     * @param approve A boolean indicating whether to approve or revoke approval.\\n     */\\n    function approveToRouter(address token, bool approve) external;\\n\\n    /**\\n     * @notice Pays the keeper fee using Uniswap swaps.\\n     * @param tokenIn The address of the token being swapped.\\n     * @param amountOut The desired amount of output tokens.\\n     * @param keeperAddress The address of the keeper to receive the fee.\\n     * @return amountIn The actual amount of input tokens used for the swap.\\n     */\\n    function payKeeperFee(\\n        address tokenIn,\\n        uint256 amountOut,\\n        address keeperAddress\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xffaab8adb0713fa436e217be2aa016cf79b55ec2868db06656b150217151a66e\",\"license\":\"MIT\"},\"contracts/core/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x61c8396222785191affb49c5bf79da738138af77f63a39c8e90b418156e5bc11\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/IMarketDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title An interface for a contract that is capable of deploying Chromatic markets\\n * @notice A contract that constructs a market must implement this to pass arguments to the market\\n * @dev This is used to avoid having constructor arguments in the market contract, which results in the init code hash\\n * of the market being constant allowing the CREATE2 address of the market to be cheaply computed on-chain\\n */\\ninterface IMarketDeployer {\\n    /**\\n     * @notice Get the parameters to be used in constructing the market, set transiently during market creation.\\n     * @dev Called by the market constructor to fetch the parameters of the market\\n     * Returns underlyingAsset The underlying asset of the market\\n     * Returns settlementToken The settlement token of the market\\n     * Returns protocolFeeRate The protocol fee rate of the market\\n     * Returns vPoolCapacity Capacity of virtual future pool\\n     * Returns vPoolA Amplification coefficient of virtual future pool, precise value\\n     */\\n    function parameters()\\n        external\\n        view\\n        returns (address oracleProvider, address settlementToken, uint16 protocolFeeRate);\\n}\\n\",\"keccak256\":\"0xd26775e3671a4b653a631c3d94de5c4e193113fb4d9d2323a2bc83081e682bff\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/IOracleProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {OracleProviderProperties} from \\\"@chromatic-protocol/contracts/core/libraries/registry/OracleProviderProperties.sol\\\";\\n\\n/**\\n * @title IOracleProviderRegistry\\n * @dev Interface for the Oracle Provider Registry contract.\\n */\\ninterface IOracleProviderRegistry {\\n    /**\\n     * @dev Emitted when a new oracle provider is registered.\\n     * @param oracleProvider The address of the registered oracle provider.\\n     * @param properties The properties of the registered oracle provider.\\n     */\\n    event OracleProviderRegistered(\\n        address indexed oracleProvider,\\n        OracleProviderProperties properties\\n    );\\n\\n    /**\\n     * @dev Emitted when an oracle provider is unregistered.\\n     * @param oracleProvider The address of the unregistered oracle provider.\\n     */\\n    event OracleProviderUnregistered(address indexed oracleProvider);\\n\\n    /**\\n     * @dev Emitted when the take-profit basis points range of an oracle provider is updated.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\\n     */\\n    event UpdateTakeProfitBPSRange(\\n        address indexed oracleProvider,\\n        uint32 indexed minTakeProfitBPS,\\n        uint32 indexed maxTakeProfitBPS\\n    );\\n\\n    /**\\n     * @dev Emitted when the level of an oracle provider is set.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new level set for the oracle provider.\\n     */\\n    event UpdateLeverageLevel(address indexed oracleProvider, uint8 indexed level);\\n\\n    /**\\n     * @notice Registers an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to register.\\n     * @param properties The properties of the oracle provider.\\n     */\\n    function registerOracleProvider(\\n        address oracleProvider,\\n        OracleProviderProperties memory properties\\n    ) external;\\n\\n    /**\\n     * @notice Unregisters an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to unregister.\\n     */\\n    function unregisterOracleProvider(address oracleProvider) external;\\n\\n    /**\\n     * @notice Gets the registered oracle providers.\\n     * @return An array of registered oracle provider addresses.\\n     */\\n    function registeredOracleProviders() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if an oracle provider is registered.\\n     * @param oracleProvider The address of the oracle provider to check.\\n     * @return A boolean indicating if the oracle provider is registered.\\n     */\\n    function isRegisteredOracleProvider(address oracleProvider) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the properties of an oracle provider.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @return The properties of the oracle provider.\\n     */\\n    function getOracleProviderProperties(\\n        address oracleProvider\\n    ) external view returns (OracleProviderProperties memory);\\n\\n    /**\\n     * @notice Updates the take-profit basis points range of an oracle provider.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\\n     */\\n    function updateTakeProfitBPSRange(\\n        address oracleProvider,\\n        uint32 minTakeProfitBPS,\\n        uint32 maxTakeProfitBPS\\n    ) external;\\n\\n    /**\\n     * @notice Updates the leverage level of an oracle provider in the registry.\\n     * @dev The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new leverage level to be set for the oracle provider.\\n     */\\n    function updateLeverageLevel(address oracleProvider, uint8 level) external;\\n}\\n\",\"keccak256\":\"0xd5d7bbf0355ac791412f58b3c469b864833cd962db6280bfa5938a20131cdc92\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {InterestRate} from \\\"@chromatic-protocol/contracts/core/libraries/InterestRate.sol\\\";\\n\\n/**\\n * @title ISettlementTokenRegistry\\n * @dev Interface for the Settlement Token Registry contract.\\n */\\ninterface ISettlementTokenRegistry {\\n    /**\\n     * @dev Emitted when a new settlement token is registered.\\n     * @param token The address of the registered settlement token.\\n     * @param oracleProvider The oracle provider address for the settlement token.\\n     * @param minimumMargin The minimum margin for the markets using this settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    event SettlementTokenRegistered(\\n        address indexed token,\\n        address indexed oracleProvider,\\n        uint256 minimumMargin,\\n        uint256 interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    );\\n\\n    /**\\n     * @dev Emitted when the oracle provider address for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param oracleProvider The oracle provider address for the settlement token.\\n     */\\n    event SetSettlementTokenOracleProvider(address indexed token, address indexed oracleProvider);\\n\\n    /**\\n     * @dev Emitted when the minimum margin for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    event SetMinimumMargin(address indexed token, uint256 indexed minimumMargin);\\n\\n    /**\\n     * @dev Emitted when the flash loan fee rate for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    event SetFlashLoanFeeRate(address indexed token, uint256 indexed flashLoanFeeRate);\\n\\n    /**\\n     * @dev Emitted when the earning distribution threshold for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    event SetEarningDistributionThreshold(\\n        address indexed token,\\n        uint256 indexed earningDistributionThreshold\\n    );\\n\\n    /**\\n     * @dev Emitted when the Uniswap fee tier for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    event SetUniswapFeeTier(address indexed token, uint24 indexed uniswapFeeTier);\\n\\n    /**\\n     * @dev Emitted when an interest rate record is appended for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event InterestRateRecordAppended(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the last interest rate record is removed for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event LastInterestRateRecordRemoved(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @notice Registers a new settlement token.\\n     * @param token The address of the settlement token to register.\\n     * @param oracleProvider The oracle provider address for the settlement token.\\n     * @param minimumMargin The minimum margin for the settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    function registerSettlementToken(\\n        address token,\\n        address oracleProvider,\\n        uint256 minimumMargin,\\n        uint256 interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    ) external;\\n\\n    /**\\n     * @notice Gets the list of registered settlement tokens.\\n     * @return An array of addresses representing the registered settlement tokens.\\n     */\\n    function registeredSettlementTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if a settlement token is registered.\\n     * @param token The address of the settlement token to check.\\n     * @return True if the settlement token is registered, false otherwise.\\n     */\\n    function isRegisteredSettlementToken(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the oracle provider address for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The oracle provider address for the settlement token.\\n     */\\n    function getSettlementTokenOracleProvider(address token) external view returns (address);\\n\\n    /**\\n     * @notice Sets the oracle provider address for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param oracleProvider The new oracle provider address for the settlement token.\\n     */\\n    function setSettlementTokenOracleProvider(address token, address oracleProvider) external;\\n\\n    /**\\n     * @notice Gets the minimum margin for a settlement token.\\n     * @dev The minimumMargin is used as the minimum value for the taker margin of a position\\n     *      or as the minimum value for the maker margin of each bin.\\n     * @param token The address of the settlement token.\\n     * @return The minimum margin for the settlement token.\\n     */\\n    function getMinimumMargin(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the minimum margin for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    function setMinimumMargin(address token, uint256 minimumMargin) external;\\n\\n    /**\\n     * @notice Gets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The flash loan fee rate for the settlement token.\\n     */\\n    function getFlashLoanFeeRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    function setFlashLoanFeeRate(address token, uint256 flashLoanFeeRate) external;\\n\\n    /**\\n     * @notice Gets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The earning distribution threshold for the settlement token.\\n     */\\n    function getEarningDistributionThreshold(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    function setEarningDistributionThreshold(\\n        address token,\\n        uint256 earningDistributionThreshold\\n    ) external;\\n\\n    /**\\n     * @notice Gets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The Uniswap fee tier for the settlement token.\\n     */\\n    function getUniswapFeeTier(address token) external view returns (uint24);\\n\\n    /**\\n     * @notice Sets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    function setUniswapFeeTier(address token, uint24 uniswapFeeTier) external;\\n\\n    /**\\n     * @notice Appends an interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    function appendInterestRateRecord(\\n        address token,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes the last interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     */\\n    function removeLastInterestRateRecord(address token) external;\\n\\n    /**\\n     * @notice Gets the current interest rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The current interest rate for the settlement token.\\n     */\\n    function currentInterestRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets all the interest rate records for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return An array of interest rate records for the settlement token.\\n     */\\n    function getInterestRateRecords(\\n        address token\\n    ) external view returns (InterestRate.Record[] memory);\\n}\\n\",\"keccak256\":\"0x5494b39be7e9f1d831e932c1d31513c5a7c8eb86e3054c12c59b71de29aefc9d\",\"license\":\"MIT\"},\"contracts/core/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nuint256 constant BPS = 10000;\\nuint256 constant FEE_RATES_LENGTH = 36;\\nuint256 constant PRICE_PRECISION = 1e18;\",\"keccak256\":\"0xd14bb41459e61008626b00dd6f5eebd6669d20a280e3d1ffcb043dd401922c7c\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Errors\\n * @dev This library provides a set of error codes as string constants for handling exceptions and revert messages in the library.\\n */\\nlibrary Errors {\\n    /**\\n     * @dev Error code indicating that there is not enough free liquidity available in liquidity pool when open a new poisition.\\n     */\\n    string constant NOT_ENOUGH_FREE_LIQUIDITY = \\\"NEFL\\\";\\n\\n    /**\\n     * @dev Error code indicating that the specified amount is too small when add liquidity to each bin.\\n     */\\n    string constant TOO_SMALL_AMOUNT = \\\"TSA\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided oracle version is invalid or unsupported.\\n     */\\n    string constant INVALID_ORACLE_VERSION = \\\"IOV\\\";\\n\\n    /**\\n     * @dev Error code indicating that the specified value exceeds the allowed margin range when claim a position.\\n     */\\n    string constant EXCEED_MARGIN_RANGE = \\\"IOV\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided trading fee rate is not supported.\\n     */\\n    string constant UNSUPPORTED_TRADING_FEE_RATE = \\\"UTFR\\\";\\n\\n    /**\\n     * @dev Error code indicating that the oracle provider is already registered.\\n     */\\n    string constant ALREADY_REGISTERED_ORACLE_PROVIDER = \\\"ARO\\\";\\n\\n    /**\\n     * @dev Error code indicating that the settlement token is already registered.\\n     */\\n    string constant ALREADY_REGISTERED_TOKEN = \\\"ART\\\";\\n\\n    /**\\n     * @dev Error code indicating that the settlement token is not registered.\\n     */\\n    string constant UNREGISTERED_TOKEN = \\\"URT\\\";\\n\\n    /**\\n     * @dev Error code indicating that the interest rate has not been initialized.\\n     */\\n    string constant INTEREST_RATE_NOT_INITIALIZED = \\\"IRNI\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided interest rate exceeds the maximum allowed rate.\\n     */\\n    string constant INTEREST_RATE_OVERFLOW = \\\"IROF\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided timestamp for an interest rate is in the past.\\n     */\\n    string constant INTEREST_RATE_PAST_TIMESTAMP = \\\"IRPT\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided interest rate record cannot be appended to the existing array.\\n     */\\n    string constant INTEREST_RATE_NOT_APPENDABLE = \\\"IRNA\\\";\\n\\n    /**\\n     * @dev Error code indicating that an interest rate has already been applied and cannot be modified further.\\n     */\\n    string constant INTEREST_RATE_ALREADY_APPLIED = \\\"IRAA\\\";\\n\\n    /**\\n     * @dev Error code indicating that the position is unsettled.\\n     */\\n    string constant UNSETTLED_POSITION = \\\"USP\\\";\\n\\n    /**\\n     * @dev Error code indicating that the position quantity is invalid.\\n     */\\n    string constant INVALID_POSITION_QTY = \\\"IPQ\\\";\\n\\n    /**\\n     * @dev Error code indicating that the oracle price is not positive.\\n     */\\n    string constant NOT_POSITIVE_PRICE = \\\"NPP\\\";\\n}\\n\",\"keccak256\":\"0x2243516d87f4b064250fa810fef1caaf62544e651556c3d5326ea2f7406d1787\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/InterestRate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {BPS} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title InterestRate\\n * @notice Provides functions for managing interest rates.\\n * @dev The library allows for the initialization, appending, and removal of interest rate records,\\n *      as well as calculating interest based on these records.\\n */\\nlibrary InterestRate {\\n    using Math for uint256;\\n\\n    /**\\n     * @dev Record type\\n     * @param annualRateBPS Annual interest rate in BPS\\n     * @param beginTimestamp Timestamp when the interest rate becomes effective\\n     */\\n    struct Record {\\n        uint256 annualRateBPS;\\n        uint256 beginTimestamp;\\n    }\\n\\n    uint256 private constant MAX_RATE_BPS = BPS; // max interest rate is 100%\\n    uint256 private constant YEAR = 365 * 24 * 3600;\\n\\n    /**\\n     * @dev Ensure that the interest rate records have been initialized before certain functions can be called.\\n     *      It checks whether the length of the Record array is greater than 0.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty (it indicates that the interest rate has not been initialized).\\n     */\\n    modifier initialized(Record[] storage self) {\\n        require(self.length != 0, Errors.INTEREST_RATE_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the interest rate records.\\n     * @param self The stored record array\\n     * @param initialInterestRate The initial interest rate\\n     */\\n    function initialize(Record[] storage self, uint256 initialInterestRate) internal {\\n        self.push(Record({annualRateBPS: initialInterestRate, beginTimestamp: 0}));\\n    }\\n\\n    /**\\n     * @notice Add a new interest rate record to the array.\\n     * @dev Annual rate is not greater than the maximum rate and that the begin timestamp is in the future,\\n     *      and the new record's begin timestamp is greater than the previous record's timestamp.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_OVERFLOW` if the rate exceed the maximum allowed rate (100%).\\n     *      Throws an error with the code `Errors.INTEREST_RATE_PAST_TIMESTAMP` if the timestamp is in the past, ensuring that the interest rate period has not already started.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_APPENDABLE` if the timestamp is greater than the last recorded timestamp, ensuring that the new record is appended in chronological order.\\n     * @param self The stored record array\\n     * @param annualRateBPS The annual interest rate in BPS\\n     * @param beginTimestamp Begin timestamp of this record\\n     */\\n    function appendRecord(\\n        Record[] storage self,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) internal initialized(self) {\\n        require(annualRateBPS <= MAX_RATE_BPS, Errors.INTEREST_RATE_OVERFLOW);\\n        //slither-disable-next-line timestamp\\n        require(beginTimestamp > block.timestamp, Errors.INTEREST_RATE_PAST_TIMESTAMP);\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        require(beginTimestamp > lastRecord.beginTimestamp, Errors.INTEREST_RATE_NOT_APPENDABLE);\\n\\n        self.push(Record({annualRateBPS: annualRateBPS, beginTimestamp: beginTimestamp}));\\n    }\\n\\n    /**\\n     * @notice Remove the last interest rate record from the array.\\n     * @dev The current time must be less than the begin timestamp of the last record.\\n     *      If the array has only one record, it returns false along with an empty record.\\n     *      Otherwise, it removes the last record from the array and returns true along with the removed record.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_ALREADY_APPLIED` if the `beginTimestamp` of the last record is not in the future.\\n     * @param self The stored record array\\n     * @return removed Whether the last record is removed\\n     * @return record The removed record\\n     */\\n    function removeLastRecord(\\n        Record[] storage self\\n    ) internal initialized(self) returns (bool removed, Record memory record) {\\n        if (self.length <= 1) {\\n            // empty\\n            return (false, Record(0, 0));\\n        }\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        //slither-disable-next-line timestamp\\n        require(block.timestamp < lastRecord.beginTimestamp, Errors.INTEREST_RATE_ALREADY_APPLIED);\\n\\n        self.pop();\\n\\n        return (true, lastRecord);\\n    }\\n\\n    /**\\n     * @notice Find the interest rate record that applies to a given timestamp.\\n     * @dev It iterates through the array from the end to the beginning\\n     *      and returns the first record with a begin timestamp less than or equal to the provided timestamp.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     * @param self The stored record array\\n     * @param timestamp Given timestamp\\n     * @return interestRate The record which is found\\n     * @return index The index of record\\n     */\\n    function findRecordAt(\\n        Record[] storage self,\\n        uint256 timestamp\\n    ) internal view initialized(self) returns (Record memory interestRate, uint256 index) {\\n        for (uint256 i = self.length; i != 0; ) {\\n            unchecked {\\n                index = i - 1;\\n            }\\n            interestRate = self[index];\\n\\n            if (interestRate.beginTimestamp <= timestamp) {\\n                return (interestRate, index);\\n            }\\n\\n            unchecked {\\n                i--;\\n            }\\n        }\\n\\n        return (self[0], 0); // empty result (this line is not reachable)\\n    }\\n\\n    /**\\n     * @notice Calculate the interest\\n     * @dev Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     * @param self The stored record array\\n     * @param amount Token amount\\n     * @param from Begin timestamp (inclusive)\\n     * @param to End timestamp (exclusive)\\n     */\\n    function calculateInterest(\\n        Record[] storage self,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) internal view initialized(self) returns (uint256) {\\n        if (from >= to) {\\n            return 0;\\n        }\\n\\n        uint256 interest = 0;\\n\\n        uint256 endTimestamp = type(uint256).max;\\n        for (uint256 idx = self.length; idx != 0; ) {\\n            Record memory record = self[idx - 1];\\n            if (endTimestamp <= from) {\\n                break;\\n            }\\n\\n            interest += _interest(\\n                amount,\\n                record.annualRateBPS,\\n                Math.min(to, endTimestamp) - Math.max(from, record.beginTimestamp)\\n            );\\n            endTimestamp = record.beginTimestamp;\\n\\n            unchecked {\\n                idx--;\\n            }\\n        }\\n        return interest;\\n    }\\n\\n    function _interest(\\n        uint256 amount,\\n        uint256 rateBPS, // annual rate\\n        uint256 period // in seconds\\n    ) private pure returns (uint256) {\\n        return amount.mulDiv(rateBPS * period, BPS * YEAR, Math.Rounding.Up);\\n    }\\n}\\n\",\"keccak256\":\"0x1ba597a94b3e70bc851d88e7340609e46e3f56cc971f5969a62c2a1264adab0a\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/registry/OracleProviderProperties.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev The OracleProviderProperties struct represents properties of the oracle provider.\\n * @param minTakeProfitBPS The minimum take-profit basis points.\\n * @param maxTakeProfitBPS The maximum take-profit basis points.\\n * @param leverageLevel The leverage level of the oracle provider.\\n */\\nstruct OracleProviderProperties {\\n    uint32 minTakeProfitBPS;\\n    uint32 maxTakeProfitBPS;\\n    uint8 leverageLevel;\\n}\\n\\nusing OracleProviderPropertiesLib for OracleProviderProperties global;\\n\\nlibrary OracleProviderPropertiesLib {\\n    function checkValidLeverageLevel(uint8 leverageLevel) internal pure returns (bool) {\\n        return leverageLevel <= 3;\\n    }\\n\\n    function maxAllowableLeverage(\\n        OracleProviderProperties memory self\\n    ) internal pure returns (uint256 leverage) {\\n        uint8 level = self.leverageLevel;\\n        assembly {\\n            switch level\\n            case 0 {\\n                leverage := 10\\n            }\\n            case 1 {\\n                leverage := 20\\n            }\\n            case 2 {\\n                leverage := 50\\n            }\\n            case 3 {\\n                leverage := 100\\n            }\\n            default {\\n                leverage := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b5a48475f814aef56a330571cce9f27e752f7fab6a99e2284a32b85be79b284\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161111538038061111583398101604081905261002f91610076565b6001600160a01b03928316608052600080546001600160a01b031916928416929092179091551660a0526100c3565b6001600160a01b038116811461007357600080fd5b50565b60008060006060848603121561008b57600080fd5b83516100968161005e565b60208501519093506100a78161005e565b60408501519092506100b88161005e565b809150509250925092565b60805160a051610ffd61011860003960008181607e0152818161028c015281816107e2015261086201526000818161015701528181610457015281816105cd015281816105f801526108bd0152610ffd6000f3fe6080604052600436106100635760003560e01c8063c0d7865511610040578063c0d7865514610125578063c45a015514610145578063f900a8b41461017957005b80634aa4a4fc1461006c578063735de9f7146100ca578063780205b1146100f757005b3661006a57005b005b34801561007857600080fd5b506100a07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100d657600080fd5b506000546100a09073ffffffffffffffffffffffffffffffffffffffff1681565b34801561010357600080fd5b50610117610112366004610d39565b610199565b6040519081526020016100c1565b34801561013157600080fd5b5061006a610140366004610d7b565b610455565b34801561015157600080fd5b506100a07f000000000000000000000000000000000000000000000000000000000000000081565b34801561018557600080fd5b5061006a610194366004610dad565b6105b5565b600073ffffffffffffffffffffffffffffffffffffffff82166101bb57600080fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015610228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024c9190610de6565b905061025a853086846107de565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018690529092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b50506040516000925073ffffffffffffffffffffffffffffffffffffffff8616915086156108fc0290879084818181858888f1935050505090508061036a576040517f0a73bac700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8816906370a0823190602401602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb9190610de6565b9050826104088583610dff565b1015610440576040517f3301796700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61044b8733836109fd565b5050509392505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e49190610e3f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610548576040517f808ca14f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f6de4326a8b9054d72d9dbab97d27bc4edffadee7d966f5af9cc4eafdaf8e545591a250565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906106b557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610e3f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156106ec576040517f6119ddb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005473ffffffffffffffffffffffffffffffffffffffff8084169163095ea7b391168361071b57600061073d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af11580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d19190610e5c565b6107da57600080fd5b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361083a5750816109f5565b604080516101008101825273ffffffffffffffffffffffffffffffffffffffff8088168083527f00000000000000000000000000000000000000000000000000000000000000008216602084015283517f67250c9500000000000000000000000000000000000000000000000000000000815260048101919091526000938301917f000000000000000000000000000000000000000000000000000000000000000016906367250c9590602401602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109289190610e79565b62ffffff16815273ffffffffffffffffffffffffffffffffffffffff8088166020830152426040808401919091526060830188905260808301879052600060a0909301839052915491517fdb3e2198000000000000000000000000000000000000000000000000000000008152929350169063db3e2198906109ae908490600401610e9e565b6020604051808303816000875af11580156109cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f19190610de6565b9150505b949350505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610a8a908490610a8f565b505050565b6000610af1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ba39092919063ffffffff16565b9050805160001480610b12575080806020019051810190610b129190610e5c565b610a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60606109f58484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051610bd79190610f5a565b60006040518083038185875af1925050503d8060008114610c14576040519150601f19603f3d011682016040523d82523d6000602084013e610c19565b606091505b5091509150610c2a87838387610c35565b979650505050505050565b60608315610ccb578251600003610cc45773ffffffffffffffffffffffffffffffffffffffff85163b610cc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b9a565b50816109f5565b6109f58383815115610ce05781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a9190610f76565b73ffffffffffffffffffffffffffffffffffffffff81168114610d3657600080fd5b50565b600080600060608486031215610d4e57600080fd5b8335610d5981610d14565b9250602084013591506040840135610d7081610d14565b809150509250925092565b600060208284031215610d8d57600080fd5b8135610d9881610d14565b9392505050565b8015158114610d3657600080fd5b60008060408385031215610dc057600080fd5b8235610dcb81610d14565b91506020830135610ddb81610d9f565b809150509250929050565b600060208284031215610df857600080fd5b5051919050565b80820180821115610e39577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b600060208284031215610e5157600080fd5b8151610d9881610d14565b600060208284031215610e6e57600080fd5b8151610d9881610d9f565b600060208284031215610e8b57600080fd5b815162ffffff81168114610d9857600080fd5b60006101008201905073ffffffffffffffffffffffffffffffffffffffff80845116835280602085015116602084015262ffffff6040850151166040840152806060850151166060840152506080830151608083015260a083015160a083015260c083015160c083015260e0830151610f2f60e084018273ffffffffffffffffffffffffffffffffffffffff169052565b5092915050565b60005b83811015610f51578181015183820152602001610f39565b50506000910152565b60008251610f6c818460208701610f36565b9190910192915050565b6020815260008251806020840152610f95816040850160208701610f36565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220b017911e1ae1a9b7bebef925be16e695ab541fb2c516f49ea9a6b32a1db449ce64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100635760003560e01c8063c0d7865511610040578063c0d7865514610125578063c45a015514610145578063f900a8b41461017957005b80634aa4a4fc1461006c578063735de9f7146100ca578063780205b1146100f757005b3661006a57005b005b34801561007857600080fd5b506100a07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100d657600080fd5b506000546100a09073ffffffffffffffffffffffffffffffffffffffff1681565b34801561010357600080fd5b50610117610112366004610d39565b610199565b6040519081526020016100c1565b34801561013157600080fd5b5061006a610140366004610d7b565b610455565b34801561015157600080fd5b506100a07f000000000000000000000000000000000000000000000000000000000000000081565b34801561018557600080fd5b5061006a610194366004610dad565b6105b5565b600073ffffffffffffffffffffffffffffffffffffffff82166101bb57600080fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015610228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024c9190610de6565b905061025a853086846107de565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018690529092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b50506040516000925073ffffffffffffffffffffffffffffffffffffffff8616915086156108fc0290879084818181858888f1935050505090508061036a576040517f0a73bac700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8816906370a0823190602401602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb9190610de6565b9050826104088583610dff565b1015610440576040517f3301796700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61044b8733836109fd565b5050509392505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e49190610e3f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610548576040517f808ca14f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f6de4326a8b9054d72d9dbab97d27bc4edffadee7d966f5af9cc4eafdaf8e545591a250565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906106b557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610e3f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156106ec576040517f6119ddb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005473ffffffffffffffffffffffffffffffffffffffff8084169163095ea7b391168361071b57600061073d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af11580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d19190610e5c565b6107da57600080fd5b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361083a5750816109f5565b604080516101008101825273ffffffffffffffffffffffffffffffffffffffff8088168083527f00000000000000000000000000000000000000000000000000000000000000008216602084015283517f67250c9500000000000000000000000000000000000000000000000000000000815260048101919091526000938301917f000000000000000000000000000000000000000000000000000000000000000016906367250c9590602401602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109289190610e79565b62ffffff16815273ffffffffffffffffffffffffffffffffffffffff8088166020830152426040808401919091526060830188905260808301879052600060a0909301839052915491517fdb3e2198000000000000000000000000000000000000000000000000000000008152929350169063db3e2198906109ae908490600401610e9e565b6020604051808303816000875af11580156109cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f19190610de6565b9150505b949350505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610a8a908490610a8f565b505050565b6000610af1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ba39092919063ffffffff16565b9050805160001480610b12575080806020019051810190610b129190610e5c565b610a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60606109f58484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051610bd79190610f5a565b60006040518083038185875af1925050503d8060008114610c14576040519150601f19603f3d011682016040523d82523d6000602084013e610c19565b606091505b5091509150610c2a87838387610c35565b979650505050505050565b60608315610ccb578251600003610cc45773ffffffffffffffffffffffffffffffffffffffff85163b610cc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b9a565b50816109f5565b6109f58383815115610ce05781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a9190610f76565b73ffffffffffffffffffffffffffffffffffffffff81168114610d3657600080fd5b50565b600080600060608486031215610d4e57600080fd5b8335610d5981610d14565b9250602084013591506040840135610d7081610d14565b809150509250925092565b600060208284031215610d8d57600080fd5b8135610d9881610d14565b9392505050565b8015158114610d3657600080fd5b60008060408385031215610dc057600080fd5b8235610dcb81610d14565b91506020830135610ddb81610d9f565b809150509250929050565b600060208284031215610df857600080fd5b5051919050565b80820180821115610e39577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b600060208284031215610e5157600080fd5b8151610d9881610d14565b600060208284031215610e6e57600080fd5b8151610d9881610d9f565b600060208284031215610e8b57600080fd5b815162ffffff81168114610d9857600080fd5b60006101008201905073ffffffffffffffffffffffffffffffffffffffff80845116835280602085015116602084015262ffffff6040850151166040840152806060850151166060840152506080830151608083015260a083015160a083015260c083015160c083015260e0830151610f2f60e084018273ffffffffffffffffffffffffffffffffffffffff169052565b5092915050565b60005b83811015610f51578181015183820152602001610f39565b50506000910152565b60008251610f6c818460208701610f36565b9190910192915050565b6020815260008251806020840152610f95816040850160208701610f36565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220b017911e1ae1a9b7bebef925be16e695ab541fb2c516f49ea9a6b32a1db449ce64736f6c63430008130033",
  "devdoc": {
    "details": "A contract that pays keeper fees using a Uniswap router.",
    "errors": {
      "InvalidSwapValue()": [
        {
          "details": "Throws an error indicating that the swap value for the Uniswap trade is invalid."
        }
      ],
      "KeeperFeeTransferFailure()": [
        {
          "details": "Throws an error indicating that the transfer of keeper fee has failed."
        }
      ],
      "OnlyAccessableByDao()": [
        {
          "details": "Throws an error indicating that the caller is not the DAO."
        }
      ],
      "OnlyAccessableByFactoryOrDao()": [
        {
          "details": "Throws an error indicating that the caller is nether the chormatic factory contract nor the DAO."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "approveToRouter(address,bool)": {
        "details": "Only the factory or the DAO can call this function.",
        "params": {
          "approve": "A boolean indicating whether to approve or revoke approval.",
          "token": "The address of the token."
        }
      },
      "constructor": {
        "details": "Constructor function.",
        "params": {
          "_factory": "The address of the ChromaticMarketFactory contract.",
          "_uniswapRouter": "The address of the Uniswap router contract.",
          "_weth": "The address of the WETH9 contract."
        }
      },
      "payKeeperFee(address,uint256,address)": {
        "details": "Throws a `KeeperFeeTransferFailure` error if the transfer of ETH to the keeper address fails.      Throws an `InvalidSwapValue` error if the remaining balance of the input token after the swap is insufficient.",
        "params": {
          "amountOut": "The desired amount of output tokens.",
          "keeperAddress": "The address of the keeper to receive the fee.",
          "tokenIn": "The address of the token being swapped."
        },
        "returns": {
          "amountIn": "The actual amount of input tokens used for the swap."
        }
      },
      "setRouter(address)": {
        "details": "Sets the Uniswap router address.",
        "params": {
          "_uniswapRouter": "The address of the Uniswap router contract."
        }
      }
    },
    "title": "KeeperFeePayer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveToRouter(address,bool)": {
        "notice": "Approves or revokes approval to the Uniswap router for a given token."
      },
      "payKeeperFee(address,uint256,address)": {
        "notice": "Pays the keeper fee using Uniswap swaps."
      },
      "setRouter(address)": {
        "notice": "Only the DAO can call this function."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10547,
        "contract": "contracts/core/KeeperFeePayer.sol:KeeperFeePayer",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISwapRouter)6476"
      }
    ],
    "types": {
      "t_contract(ISwapRouter)6476": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      }
    }
  }
}