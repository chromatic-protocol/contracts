{
  "address": "0xd991A1a9bDd9cA12EB328499CC3778e0B2DA2629",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AbstractPyth",
          "name": "pyth_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "priceFeedId_",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "description_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidOracleRound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceFeedNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongData",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "atVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "oracleVersion",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "oracleVersion",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraModule",
      "outputs": [
        {
          "internalType": "enum ExtraModule",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraParam",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "offchainData",
          "type": "bytes"
        }
      ],
      "name": "getUpdateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSyncedVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleProviderName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "parseExtraData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract AbstractPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "offchainData",
          "type": "bytes"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e86ffd31f2e2aef0f5f94ec837183b1bf9ac97d22129763c1f70a447c1e5aee",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0xd991A1a9bDd9cA12EB328499CC3778e0B2DA2629",
    "transactionIndex": 1,
    "gasUsed": "6352049",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc06f6887633191d5c0607f5229ed84ebb092897e0ff1f62c713210ed954b2908",
    "transactionHash": "0x0e86ffd31f2e2aef0f5f94ec837183b1bf9ac97d22129763c1f70a447c1e5aee",
    "logs": [],
    "blockNumber": 12276153,
    "cumulativeGasUsed": "6352049",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4374e5a8b9c22271e9eb878a2aa31de97df15daf",
    "0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
    "BTC/USD"
  ],
  "numDeployments": 1,
  "solcInputHash": "2aae7d11b792fd8b95d0b7495e52965c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AbstractPyth\",\"name\":\"pyth_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"priceFeedId_\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidOracleRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeedNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongData\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"atVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"oracleVersion\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"oracleVersion\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraModule\",\"outputs\":[{\"internalType\":\"enum ExtraModule\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraParam\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"offchainData\",\"type\":\"bytes\"}],\"name\":\"getUpdateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSyncedVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleProviderName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"parseExtraData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract AbstractPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"offchainData\",\"type\":\"bytes\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidOracleRound()\":[{\"details\":\"Error for invalid oracle round\"}]},\"kind\":\"dev\",\"methods\":{\"atVersion(uint256)\":{\"params\":{\"version\":\"The version of which to lookup\"},\"returns\":{\"oracleVersion\":\"Oracle version at version `version`\"}},\"constructor\":{\"params\":{\"description_\":\"The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)\",\"priceFeedId_\":\"The id of pyth price feed (https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet)\",\"pyth_\":\"Pyth address (https://docs.pyth.network/documentation/pythnet-price-feeds/evm)\"}},\"currentVersion()\":{\"returns\":{\"oracleVersion\":\"Current oracle version\"}},\"description()\":{\"returns\":{\"_0\":\"A string representing the description of the Oracle Provider.\"}},\"extraModule()\":{\"details\":\"Returns the type of automation module that the Keeper will execute, either \\\"None\\\" or \\\"Pyth\\\".\",\"returns\":{\"_0\":\"Automation module type, which can be \\\"None\\\" or \\\"Pyth\\\".\"}},\"extraParam()\":{\"details\":\"Retrieves the parameter needed to request data from the Keeper, e.g., the price feed ID in the case of Pyth integration.\",\"returns\":{\"_0\":\"Required parameter for Keeper requests as bytes\"}},\"getUpdateFee(bytes)\":{\"details\":\"Returns the fee required to update the Oracle Provider with the given off-chain data\",\"params\":{\"offchainData\":\"Off-chain data required for the update\"},\"returns\":{\"_0\":\"fee amount\"}},\"lastSyncedVersion()\":{\"details\":\"Retrieves the last synchronized oracle version\",\"returns\":{\"_0\":\"Last synchronized oracle version\"}},\"oracleProviderName()\":{\"returns\":{\"_0\":\"A string representing the name of the Oracle Provider.\"}},\"parseExtraData(bytes)\":{\"details\":\"Parses the provided off-chain data received from the Keeper and returns an OracleVersion structure representing the parsed data\",\"params\":{\"extraData\":\"Off-chain data received from the Keeper\"},\"returns\":{\"_0\":\"Parsed OracleVersion structure\"}},\"sync()\":{\"details\":\"`sync` is expected to be called soon after a phase update occurs in the underlying proxy.      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call      This is feasible in the short term due to how infrequent phase updates are, but phase update      and roundCount detection should eventually be implemented at the contract level.      Reverts if there is more than 1 phase to update in a single sync because we currently cannot      determine the startingRoundId for the intermediary phase.\",\"returns\":{\"_0\":\"The current oracle version after sync\"}},\"updatePrice(bytes)\":{\"details\":\"Updates the Oracle Provider with the provided off-chain data\",\"params\":{\"offchainData\":\"Off-chain data used for the update\"}}},\"stateVariables\":{\"_description\":{\"details\":\"The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)\"},\"lastSyncedVersionIndex\":{\"details\":\"Last version index seen when `sync` was called\"},\"oracleVersions\":{\"details\":\"Mapping of version to OracleVersion\"},\"priceFeedId\":{\"details\":\"The id of pyth price feed (https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet)\"},\"pyth\":{\"details\":\"Pyth address (https://docs.pyth.network/documentation/pythnet-price-feeds/evm)\"},\"updatedVaa\":{\"details\":\"Mapping of updateData(vaa) to version index\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"atVersion(uint256)\":{\"notice\":\"Returns the current oracle version\"},\"constructor\":{\"notice\":\"Initializes the contract state\"},\"currentVersion()\":{\"notice\":\"Returns the current oracle version\"},\"description()\":{\"notice\":\"Retrieves the description of the Oracle Provider.\"},\"oracleProviderName()\":{\"notice\":\"Retrieves the name of the Oracle Provider.\"},\"sync()\":{\"notice\":\"Checks for a new price and updates the internal phase annotation state accordingly\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/PythFeedOracle.sol\":\"PythFeedOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/AbstractPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPyth.sol\\\";\\nimport \\\"./PythErrors.sol\\\";\\n\\nabstract contract AbstractPyth is IPyth {\\n    /// @notice Returns the price feed with given id.\\n    /// @dev Reverts if the price does not exist.\\n    /// @param id The Pyth Price Feed ID of which to fetch the PriceFeed.\\n    function queryPriceFeed(\\n        bytes32 id\\n    ) public view virtual returns (PythStructs.PriceFeed memory priceFeed);\\n\\n    /// @notice Returns true if a price feed with the given id exists.\\n    /// @param id The Pyth Price Feed ID of which to check its existence.\\n    function priceFeedExists(\\n        bytes32 id\\n    ) public view virtual returns (bool exists);\\n\\n    function getValidTimePeriod()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint validTimePeriod);\\n\\n    function getPrice(\\n        bytes32 id\\n    ) external view virtual override returns (PythStructs.Price memory price) {\\n        return getPriceNoOlderThan(id, getValidTimePeriod());\\n    }\\n\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view virtual override returns (PythStructs.Price memory price) {\\n        return getEmaPriceNoOlderThan(id, getValidTimePeriod());\\n    }\\n\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) public view virtual override returns (PythStructs.Price memory price) {\\n        PythStructs.PriceFeed memory priceFeed = queryPriceFeed(id);\\n        return priceFeed.price;\\n    }\\n\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) public view virtual override returns (PythStructs.Price memory price) {\\n        price = getPriceUnsafe(id);\\n\\n        if (diff(block.timestamp, price.publishTime) > age)\\n            revert PythErrors.StalePrice();\\n\\n        return price;\\n    }\\n\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) public view virtual override returns (PythStructs.Price memory price) {\\n        PythStructs.PriceFeed memory priceFeed = queryPriceFeed(id);\\n        return priceFeed.emaPrice;\\n    }\\n\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) public view virtual override returns (PythStructs.Price memory price) {\\n        price = getEmaPriceUnsafe(id);\\n\\n        if (diff(block.timestamp, price.publishTime) > age)\\n            revert PythErrors.StalePrice();\\n\\n        return price;\\n    }\\n\\n    function diff(uint x, uint y) internal pure returns (uint) {\\n        if (x > y) {\\n            return x - y;\\n        } else {\\n            return y - x;\\n        }\\n    }\\n\\n    // Access modifier is overridden to public to be able to call it locally.\\n    function updatePriceFeeds(\\n        bytes[] calldata updateData\\n    ) public payable virtual override;\\n\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable virtual override {\\n        if (priceIds.length != publishTimes.length)\\n            revert PythErrors.InvalidArgument();\\n\\n        for (uint i = 0; i < priceIds.length; i++) {\\n            if (\\n                !priceFeedExists(priceIds[i]) ||\\n                queryPriceFeed(priceIds[i]).price.publishTime < publishTimes[i]\\n            ) {\\n                updatePriceFeeds(updateData);\\n                return;\\n            }\\n        }\\n\\n        revert PythErrors.NoFreshUpdate();\\n    }\\n\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x6915425548e6ca40d6f74fdb624d3796e65dc997b0b667bbe68773ed907e53a2\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nlibrary PythErrors {\\n    // Function arguments are invalid (e.g., the arguments lengths mismatch)\\n    error InvalidArgument();\\n    // Update data is coming from an invalid data source.\\n    error InvalidUpdateDataSource();\\n    // Update data is invalid (e.g., deserialization error)\\n    error InvalidUpdateData();\\n    // Insufficient fee is paid to the method.\\n    error InsufficientFee();\\n    // There is no fresh update, whereas expected fresh updates.\\n    error NoFreshUpdate();\\n    // There is no price feed found within the given range or it does not exists.\\n    error PriceFeedNotFoundWithinRange();\\n    // Price feed not found or it is not pushed on-chain yet.\\n    error PriceFeedNotFound();\\n    // Requested price is stale.\\n    error StalePrice();\\n    // Given message is not a valid Wormhole VAA.\\n    error InvalidWormholeVaa();\\n    // Governance message is invalid (e.g., deserialization error).\\n    error InvalidGovernanceMessage();\\n    // Governance message is not for this contract.\\n    error InvalidGovernanceTarget();\\n    // Governance message is coming from an invalid data source.\\n    error InvalidGovernanceDataSource();\\n    // Governance message is old.\\n    error OldGovernanceMessage();\\n}\\n\",\"keccak256\":\"0x2684f05e118f9c2f387bc20dcc66a75c90bd29e9c844ec1312657428409dc0c6\",\"license\":\"Apache 2\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\"},\"contracts/core/automation/mate2/IMate2Automation1_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nenum ExtraModule {\\n    None,\\n    Echo, // for debugging\\n    Pyth\\n}\\n\\nstruct PythOffchainPrice {\\n    uint256 publishTime;\\n    int64 price;\\n    int32 expo;\\n    bytes vaa;\\n}\\n\\ninterface IMate2Automation1_1 {\\n    event catchErr(string _name, string _err);\\n    /**\\n     * @notice method that is simulated by the keepers to see if any work actually\\n     * needs to be performed. This method does does not actually need to be\\n     * executable, and since it is only ever simulated it can consume lots of gas.\\n     * @dev To ensure that it is never called, you may want to add the\\n     * cannotExecute modifier from KeeperBase to your implementation of this\\n     * method.\\n     * @param checkData specified in the upkeep registration so it is always the\\n     * same for a registered upkeep. This can easily be broken down into specific\\n     * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n     * same contract and easily differentiated by the contract.\\n     * @param extraData passed by keeper for passing offchain data\\n     * @return upkeepNeeded boolean to indicate whether the keeper should call\\n     * performUpkeep or not.\\n     * @return performData bytes that the keeper should call performUpkeep with, if\\n     * upkeep is needed. If you would like to encode data to decode later, try\\n     * `abi.encode`.\\n     */\\n    function checkUpkeep(\\n        bytes calldata checkData,\\n        bytes calldata extraData\\n    ) external view returns (bool upkeepNeeded, bytes memory performData);\\n\\n    /**\\n     * @notice method that is actually executed by the keepers, via the registry.\\n     * The data returned by the checkUpkeep simulation will be passed into\\n     * this method to actually be executed.\\n     * @dev The input to this method should not be trusted, and the caller of the\\n     * method should not even be restricted to any single registry. Anyone should\\n     * be able call it, and the input should be validated, there is no guarantee\\n     * that the data passed in is the performData returned from checkUpkeep. This\\n     * could happen due to malicious keepers, racing keepers, or simply a state\\n     * change while the performUpkeep transaction is waiting for confirmation.\\n     * Always validate the data passed in.\\n     * @param performData is the data which was passed back from the checkData\\n     * simulation. If it is encoded, it can easily be decoded into other types by\\n     * calling `abi.decode`. This data should not be trusted, and should be\\n     * validated against the contract's current state.\\n     */\\n    function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x90dfa867cf68e381a46b38590690f06cf8d10db405825805a9eec75c6db5f823\",\"license\":\"MIT\"},\"contracts/oracle/PythFeedOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport {PythOffchainPrice, ExtraModule} from \\\"@chromatic-protocol/contracts/core/automation/mate2/IMate2Automation1_1.sol\\\";\\nimport {OracleProviderPullBasedBase, IOracleProvider, IOracleProviderPullBased} from \\\"@chromatic-protocol/contracts/oracle/base/OracleProviderPullBasedBase.sol\\\";\\nimport {AbstractPyth, PythStructs} from \\\"@pythnetwork/pyth-sdk-solidity/AbstractPyth.sol\\\";\\n\\ncontract PythFeedOracle is OracleProviderPullBasedBase {\\n    using SignedMath for int256;\\n    using SignedSafeMath for int256;\\n\\n    error PriceFeedNotExist();\\n    error WrongData();\\n\\n    /// @dev Pyth address (https://docs.pyth.network/documentation/pythnet-price-feeds/evm)\\n    AbstractPyth public immutable pyth;\\n\\n    /// @dev The id of pyth price feed (https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet)\\n    bytes32 public immutable priceFeedId;\\n\\n    /// @dev The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)\\n    string private _description;\\n\\n    /// @dev Last version index seen when `sync` was called\\n    uint256 private lastSyncedVersionIndex;\\n\\n    /// @dev Mapping of version to OracleVersion\\n    mapping(uint256 => OracleVersion) private oracleVersions;\\n\\n    /// @dev Mapping of updateData(vaa) to version index\\n    mapping(bytes32 => bool) private updatedVaa;\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @param pyth_ Pyth address (https://docs.pyth.network/documentation/pythnet-price-feeds/evm)\\n     * @param priceFeedId_ The id of pyth price feed (https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet)\\n     * @param description_ The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)\\n     */\\n    constructor(AbstractPyth pyth_, bytes32 priceFeedId_, string memory description_) {\\n        pyth = pyth_;\\n        if (!pyth.priceFeedExists(priceFeedId_)) {\\n            revert PriceFeedNotExist();\\n        }\\n        priceFeedId = priceFeedId_;\\n        _description = description_;\\n        sync();\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProvider\\n     */\\n    function sync() public returns (OracleVersion memory) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceFeedId);\\n        OracleVersion memory lastVersion = oracleVersions[lastSyncedVersionIndex];\\n        if (lastVersion.timestamp < price.publishTime) {\\n            ++lastSyncedVersionIndex;\\n            oracleVersions[lastSyncedVersionIndex] = pythPriceToOracleVersion(\\n                price,\\n                lastSyncedVersionIndex\\n            );\\n        }\\n        return oracleVersions[lastSyncedVersionIndex];\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProvider\\n     */\\n    function currentVersion() public view returns (OracleVersion memory oracleVersion) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceFeedId);\\n        oracleVersion = oracleVersions[lastSyncedVersionIndex];\\n        if (price.publishTime > oracleVersion.timestamp) {\\n            oracleVersion = pythPriceToOracleVersion(price, lastSyncedVersionIndex + 1);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProviderPullBased\\n     */\\n    function lastSyncedVersion() external view returns (OracleVersion memory) {\\n        return oracleVersions[lastSyncedVersionIndex];\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProvider\\n     */\\n    function atVersion(uint256 version) public view returns (OracleVersion memory oracleVersion) {\\n        return oracleVersions[version];\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProvider\\n     */\\n    function description() external view override returns (string memory) {\\n        return _description;\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProvider\\n     */\\n    function oracleProviderName() external pure override returns (string memory) {\\n        return \\\"pyth\\\";\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProviderPullBased\\n     */\\n    function extraModule() external pure override returns (ExtraModule) {\\n        return ExtraModule.Pyth;\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProviderPullBased\\n     */\\n    function extraParam() external view override returns (bytes memory) {\\n        return abi.encodePacked(priceFeedId);\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProviderPullBased\\n     */\\n    function updatePrice(bytes calldata offchainData) external payable override {\\n        PythOffchainPrice memory offChainPrice = decodeOffchainData(offchainData);\\n\\n        bytes32 vaa = keccak256(offChainPrice.vaa);\\n        if (updatedVaa[vaa]) {\\n            (bool success, ) = msg.sender.call{value: msg.value}(\\\"\\\");\\n            require(success, \\\"oracle update fee refund rejected\\\");\\n            return;\\n        }\\n\\n        bytes[] memory updateDatas = new bytes[](1);\\n        updateDatas[0] = offChainPrice.vaa;\\n\\n        pyth.updatePriceFeeds{value: msg.value}(updateDatas);\\n\\n        updatedVaa[vaa] = true;\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProviderPullBased\\n     */\\n    function getUpdateFee(bytes calldata offchainData) external view override returns (uint256) {\\n        bytes[] memory updateDatas = new bytes[](1);\\n        updateDatas[0] = decodeOffchainData(offchainData).vaa;\\n        return pyth.getUpdateFee(updateDatas);\\n    }\\n\\n    function decodeOffchainData(\\n        bytes calldata offchainData\\n    ) internal pure returns (PythOffchainPrice memory) {\\n        return abi.decode(offchainData, (PythOffchainPrice));\\n    }\\n\\n    function baseDecimalPrice(int256 pythPrice, int32 expo) internal pure returns (int256) {\\n        int256 pythDecimal = int256(10 ** int256(expo).abs());\\n        return\\n            expo > 0\\n                ? int256(pythPrice).mul(BASE).mul(pythDecimal)\\n                : int256(pythPrice).mul(BASE).div(pythDecimal);\\n    }\\n\\n    function pythPriceToOracleVersion(\\n        PythStructs.Price memory price,\\n        uint256 version\\n    ) internal pure returns (OracleVersion memory) {\\n        return\\n            OracleVersion({\\n                version: version,\\n                timestamp: price.publishTime,\\n                price: baseDecimalPrice(price.price, price.expo)\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProviderPullBased\\n     */\\n    function parseExtraData(\\n        bytes calldata extraData\\n    ) external view override returns (OracleVersion memory) {\\n        PythOffchainPrice memory offChainPrice = decodeOffchainData(extraData);\\n        return\\n            OracleVersion(\\n                lastSyncedVersionIndex + 1,\\n                offChainPrice.publishTime,\\n                baseDecimalPrice(offChainPrice.price, offChainPrice.expo)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6f80af1ce73db43bdc13d17eb13cfec935a78e54cb1ed95bf934303c77797952\",\"license\":\"Apache-2.0\"},\"contracts/oracle/base/OracleProviderBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../interfaces/IOracleProvider.sol\\\";\\n\\nabstract contract OracleProviderBase is IOracleProvider {\\n    int256 constant BASE = 1e18;\\n\\n    function supportsInterface(bytes4 interfaceID) public pure virtual returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector ||\\n            type(IOracleProvider).interfaceId == interfaceID;\\n    }\\n}\\n\",\"keccak256\":\"0xc3eb40a0c7ceba13970fadd99c8dc839f6cef6e1865826ecbb22f95a144a140e\",\"license\":\"Apache-2.0\"},\"contracts/oracle/base/OracleProviderPullBasedBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./OracleProviderBase.sol\\\";\\nimport \\\"../interfaces/IOracleProviderPullBased.sol\\\";\\n\\nabstract contract OracleProviderPullBasedBase is OracleProviderBase, IOracleProviderPullBased {\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public pure override(IERC165, OracleProviderBase) returns (bool) {\\n        return\\n            type(IOracleProviderPullBased).interfaceId == interfaceID ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    /**\\n     * @dev Fallback function to receive ETH payments.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Fallback function to receive ETH payments.\\n     */\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x7afc0da02c3ef74e8c74dcb9a94a419f462f9502c6950654229a538a3238ad56\",\"license\":\"Apache-2.0\"},\"contracts/oracle/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\ninterface IOracleProvider is IERC165 {\\n    /// @dev Error for invalid oracle round\\n    error InvalidOracleRound();\\n\\n    /**\\n     * @dev A singular oracle version with its corresponding data\\n     * @param version The iterative version\\n     * @param timestamp the timestamp of the oracle update\\n     * @param price The oracle price of the corresponding version\\n     */\\n    struct OracleVersion {\\n        uint256 version;\\n        uint256 timestamp;\\n        int256 price;\\n    }\\n\\n    /**\\n     * @notice Checks for a new price and updates the internal phase annotation state accordingly\\n     * @dev `sync` is expected to be called soon after a phase update occurs in the underlying proxy.\\n     *      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call\\n     *      This is feasible in the short term due to how infrequent phase updates are, but phase update\\n     *      and roundCount detection should eventually be implemented at the contract level.\\n     *      Reverts if there is more than 1 phase to update in a single sync because we currently cannot\\n     *      determine the startingRoundId for the intermediary phase.\\n     * @return The current oracle version after sync\\n     */\\n    function sync() external returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @return oracleVersion Current oracle version\\n     */\\n    function currentVersion() external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @param version The version of which to lookup\\n     * @return oracleVersion Oracle version at version `version`\\n     */\\n    function atVersion(uint256 version) external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Retrieves the description of the Oracle Provider.\\n     * @return A string representing the description of the Oracle Provider.\\n     */\\n    function description() external view returns (string memory);\\n\\n    /**\\n     * @notice Retrieves the name of the Oracle Provider.\\n     * @return A string representing the name of the Oracle Provider.\\n     */\\n    function oracleProviderName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8dd1f7fd39ef44dfd3c59d19833c1dd2addcce6bf060752a86341d5231fc1258\",\"license\":\"Apache-2.0\"},\"contracts/oracle/interfaces/IOracleProviderPullBased.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ExtraModule} from \\\"@chromatic-protocol/contracts/core/automation/mate2/IMate2Automation1_1.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\n\\ninterface IOracleProviderPullBased is IOracleProvider {\\n    /**\\n     * @dev Returns the type of automation module that the Keeper will execute, either \\\"None\\\" or \\\"Pyth\\\".\\n     * @return Automation module type, which can be \\\"None\\\" or \\\"Pyth\\\".\\n     */\\n    function extraModule() external pure returns (ExtraModule);\\n\\n    /**\\n     * @dev Retrieves the parameter needed to request data from the Keeper, e.g., the price feed ID in the case of Pyth integration.\\n     * @return Required parameter for Keeper requests as bytes\\n     */\\n    function extraParam() external view returns (bytes memory);\\n\\n    /**\\n     * @dev Returns the fee required to update the Oracle Provider with the given off-chain data\\n     * @param offchainData Off-chain data required for the update\\n     * @return fee amount\\n     */\\n    function getUpdateFee(bytes calldata offchainData) external view returns (uint256);\\n\\n    /**\\n     * @dev Updates the Oracle Provider with the provided off-chain data\\n     * @param offchainData Off-chain data used for the update\\n     */\\n    function updatePrice(bytes calldata offchainData) external payable;\\n\\n    /**\\n     * @dev Parses the provided off-chain data received from the Keeper and returns an OracleVersion structure representing the parsed data\\n     * @param extraData Off-chain data received from the Keeper\\n     * @return Parsed OracleVersion structure\\n     */\\n    function parseExtraData(bytes calldata extraData) external view returns (OracleVersion memory);\\n\\n    /**\\n     * @dev Retrieves the last synchronized oracle version\\n     * @return Last synchronized oracle version\\n     */\\n    function lastSyncedVersion() external view returns (OracleVersion memory);\\n}\\n\",\"keccak256\":\"0x5b47f334567f61f3c60eabd968de6eb1aa5fb755d4a222db640a241bccffe48d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001df238038062001df28339810160408190526200003491620003be565b6001600160a01b038316608081905260405163b5ec026160e01b81526004810184905263b5ec026190602401602060405180830381865afa1580156200007e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a491906200049f565b620000c257604051631ec230d760e11b815260040160405180910390fd5b60a08290526000620000d5828262000552565b50620000e0620000ea565b505050506200086e565b6200010f60405180606001604052806000815260200160008152602001600081525090565b60805160a0516040516396834ad360e01b815260048101919091526000916001600160a01b0316906396834ad390602401608060405180830381865afa1580156200015e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018491906200061e565b6001805460009081526002602081815260409283902083516060808201865282548252958201549281018390529201549282019290925291830151929350909111156200021c57600160008154620001dc90620006d1565b90915550600154620001f090839062000256565b600180546000908152600260208181526040928390208551815590850151938101939093559201519101555b5050600180546000908152600260208181526040928390208351606081018552815481529481015491850191909152015490820152919050565b6200027b60405180606001604052806000815260200160008152602001600081525090565b604051806060016040528083815260200184606001518152602001620002b3856000015160070b8660400151620002be60201b60201c565b905290505b92915050565b600080620002d0600384900b62000339565b620002dd90600a620007ea565b905060008360030b1362000311576200030b816200030486670de0b6b3a764000062000352565b9062000367565b62000331565b62000331816200032a86670de0b6b3a764000062000352565b9062000352565b949350505050565b6000808212156200034e5781600003620002b8565b5090565b6000620003608284620007f8565b9392505050565b60006200036082846200082e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003b657620003b662000375565b604052919050565b600080600060608486031215620003d457600080fd5b83516001600160a01b0381168114620003ec57600080fd5b60208581015160408701519295509350906001600160401b03808211156200041357600080fd5b818701915087601f8301126200042857600080fd5b8151818111156200043d576200043d62000375565b62000451601f8201601f191685016200038b565b915080825288848285010111156200046857600080fd5b60005b81811015620004885783810185015183820186015284016200046b565b506000848284010152508093505050509250925092565b600060208284031215620004b257600080fd5b815180151581146200036057600080fd5b600181811c90821680620004d857607f821691505b602082108103620004f957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200054d57600081815260208120601f850160051c81016020861015620005285750805b601f850160051c820191505b81811015620005495782815560010162000534565b5050505b505050565b81516001600160401b038111156200056e576200056e62000375565b62000586816200057f8454620004c3565b84620004ff565b602080601f831160018114620005be5760008415620005a55750858301515b600019600386901b1c1916600185901b17855562000549565b600085815260208120601f198616915b82811015620005ef57888601518255948401946001909101908401620005ce565b50858210156200060e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000608082840312156200063157600080fd5b604051608081016001600160401b03808211838310171562000657576200065762000375565b81604052845191508160070b82146200066f57600080fd5b90825260208401519080821682146200068757600080fd5b5060208201526040830151600381900b8114620006a357600080fd5b60408201526060928301519281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b600060018201620006e657620006e6620006bb565b5060010190565b600181815b808511156200072e578160001904821115620007125762000712620006bb565b808516156200072057918102915b93841c9390800290620006f2565b509250929050565b6000826200074757506001620002b8565b816200075657506000620002b8565b81600181146200076f57600281146200077a576200079a565b6001915050620002b8565b60ff8411156200078e576200078e620006bb565b50506001821b620002b8565b5060208310610133831016604e8410600b8410161715620007bf575081810a620002b8565b620007cb8383620006ed565b8060001904821115620007e257620007e2620006bb565b029392505050565b600062000360838362000736565b80820260008212600160ff1b84141615620008175762000817620006bb565b8181058314821517620002b857620002b8620006bb565b6000826200084c57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615620008695762000869620006bb565b500590565b60805160a05161152d620008c5600039600081816101670152818161021c0152818161090a0152610a650152600081816102f8015281816104c4015281816107f7015281816109330152610a8e015261152d6000f3fe6080604052600436106100d55760003560e01c80637ece075d116100795780639d888e86116100565780639d888e86146102b5578063f8fd6061146102ca578063f98d06f0146102e6578063fff6cae91461033f57005b80637ece075d1461026d578063870535bc1461028d5780638736ec47146102a257005b8063238e0a8a116100b2578063238e0a8a1461019757806325882087146101b757806365bf03d7146102065780637284e4161461025857005b806301ffc9a7146100de578063085d9ce8146101135780631999bb9e1461015557005b366100dc57005b005b3480156100ea57600080fd5b506100fe6100f9366004610d92565b610354565b60405190151581526020015b60405180910390f35b34801561011f57600080fd5b5061013361012e366004610dd4565b6103b0565b604080518251815260208084015190820152918101519082015260600161010a565b34801561016157600080fd5b506101897f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161010a565b3480156101a357600080fd5b506101896101b2366004610dd4565b61042a565b3480156101c357600080fd5b5060408051808201909152600481527f707974680000000000000000000000000000000000000000000000000000000060208201525b60405161010a9190610eaa565b34801561021257600080fd5b506101f9604080517f0000000000000000000000000000000000000000000000000000000000000000602082015260609101604051602081830303815290604052905090565b34801561026457600080fd5b506101f9610542565b34801561027957600080fd5b50610133610288366004610ebd565b6105d4565b34801561029957600080fd5b50610133610631565b6100dc6102b0366004610dd4565b61068c565b3480156102c157600080fd5b506101336108be565b3480156102d657600080fd5b50600260405161010a9190610ed6565b3480156102f257600080fd5b5061031a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010a565b34801561034b57600080fd5b50610133610a19565b60007fb6a22c2f000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103aa57506103aa82610bdb565b92915050565b6103d460405180606001604052806000815260200160008152602001600081525090565b60006103e08484610c70565b9050604051806060016040528060015460016103fc9190610f46565b815260200182600001518152602001610420836020015160070b8460400151610ca6565b9052949350505050565b604080516001808252818301909252600091829190816020015b60608152602001906001900390816104445790505090506104658484610c70565b606001518160008151811061047c5761047c610f88565b60209081029190910101526040517fd47eed4500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d47eed45906104f9908490600401610fb7565b602060405180830381865afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190611037565b949350505050565b60606000805461055190611050565b80601f016020809104026020016040519081016040528092919081815260200182805461057d90611050565b80156105ca5780601f1061059f576101008083540402835291602001916105ca565b820191906000526020600020905b8154815290600101906020018083116105ad57829003601f168201915b5050505050905090565b6105f860405180606001604052806000815260200160008152602001600081525090565b50600090815260026020818152604092839020835160608101855281548152600182015492810192909252909101549181019190915290565b61065560405180606001604052806000815260200160008152602001600081525090565b5060018054600090815260026020818152604092839020835160608101855281548152948101549185019190915201549082015290565b60006106988383610c70565b60608101518051602091820120600081815260039092526040909120549192509060ff16156107a457604051600090339034908381818185875af1925050503d8060008114610703576040519150601f19603f3d011682016040523d82523d6000602084013e610708565b606091505b505090508061079d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f6f7261636c65207570646174652066656520726566756e642072656a6563746560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b5050505050565b604080516001808252818301909252600091816020015b60608152602001906001900390816107bb5790505090508260600151816000815181106107ea576107ea610f88565b60200260200101819052507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef9e5e2834836040518363ffffffff1660e01b815260040161084f9190610fb7565b6000604051808303818588803b15801561086857600080fd5b505af115801561087c573d6000803e3d6000fd5b505050600093845250506003602052506040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055505050565b6108e260405180606001604052806000815260200160008152602001600081525090565b6040517f96834ad30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906396834ad390602401608060405180830381865afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b3919061113c565b60018054600090815260026020818152604092839020835160608082018652825482529582015492810183905292015492820192909252918301519194509192501115610a1557610a12816001546001610a0d9190610f46565b610d0a565b91505b5090565b610a3d60405180606001604052806000815260200160008152602001600081525090565b6040517f96834ad30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906396834ad390602401608060405180830381865afa158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e919061113c565b600180546000908152600260208181526040928390208351606080820186528254825295820154928101839052920154928201929092529183015192935090911115610ba157600160008154610b63906111a9565b90915550600154610b75908390610d0a565b600180546000908152600260208181526040928390208551815590850151938101939093559201519101555b5050600180546000908152600260208181526040928390208351606081018552815481529481015491850191909152015490820152919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806103aa5750507fffffffff00000000000000000000000000000000000000000000000000000000167f4bbc87a3000000000000000000000000000000000000000000000000000000001490565b6040805160808101825260008082526020820181905291810191909152606080820152610c9f828401846111e1565b9392505050565b600080610cb58360030b610d67565b610cc090600a611410565b905060008360030b13610cee57610ce981610ce386670de0b6b3a7640000610d7a565b90610d86565b61053a565b61053a81610d0486670de0b6b3a7640000610d7a565b90610d7a565b610d2e60405180606001604052806000815260200160008152602001600081525090565b604051806060016040528083815260200184606001518152602001610d5e856000015160070b8660400151610ca6565b90529392505050565b600080821215610a1557816000036103aa565b6000610c9f828461141c565b6000610c9f8284611468565b600060208284031215610da457600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610c9f57600080fd5b60008060208385031215610de757600080fd5b823567ffffffffffffffff80821115610dff57600080fd5b818501915085601f830112610e1357600080fd5b813581811115610e2257600080fd5b866020828501011115610e3457600080fd5b60209290920196919550909350505050565b6000815180845260005b81811015610e6c57602081850181015186830182015201610e50565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610c9f6020830184610e46565b600060208284031215610ecf57600080fd5b5035919050565b6020810160038310610f11577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156103aa576103aa610f17565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561102a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611018858351610e46565b94509285019290850190600101610fde565b5092979650505050505050565b60006020828403121561104957600080fd5b5051919050565b600181811c9082168061106457607f821691505b60208210810361109d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6040516080810167ffffffffffffffff811182821017156110c6576110c6610f59565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561111357611113610f59565b604052919050565b8060070b811461112a57600080fd5b50565b8060030b811461112a57600080fd5b60006080828403121561114e57600080fd5b6111566110a3565b82516111618161111b565b8152602083015167ffffffffffffffff8116811461117e57600080fd5b602082015260408301516111918161112d565b60408201526060928301519281019290925250919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111da576111da610f17565b5060010190565b600060208083850312156111f457600080fd5b823567ffffffffffffffff8082111561120c57600080fd5b908401906080828703121561122057600080fd5b6112286110a3565b82358152838301356112398161111b565b81850152604083013561124b8161112d565b604082015260608301358281111561126257600080fd5b80840193505086601f84011261127757600080fd5b82358281111561128957611289610f59565b6112b9857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016110cc565b925080835287858286010111156112cf57600080fd5b80858501868501376000908301909401939093526060830152509392505050565b600181815b8085111561134957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561132f5761132f610f17565b8085161561133c57918102915b93841c93908002906112f5565b509250929050565b600082611360575060016103aa565b8161136d575060006103aa565b8160018114611383576002811461138d576113a9565b60019150506103aa565b60ff84111561139e5761139e610f17565b50506001821b6103aa565b5060208310610133831016604e8410600b84101617156113cc575081810a6103aa565b6113d683836112f0565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561140857611408610f17565b029392505050565b6000610c9f8383611351565b808202600082127f80000000000000000000000000000000000000000000000000000000000000008414161561145457611454610f17565b81810583148215176103aa576103aa610f17565b60008261149e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156114f2576114f2610f17565b50059056fea264697066735822122032cf424913c0a03dfb67c62934c039ae742febc789b9b803633baf63eaa0ecc564736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100d55760003560e01c80637ece075d116100795780639d888e86116100565780639d888e86146102b5578063f8fd6061146102ca578063f98d06f0146102e6578063fff6cae91461033f57005b80637ece075d1461026d578063870535bc1461028d5780638736ec47146102a257005b8063238e0a8a116100b2578063238e0a8a1461019757806325882087146101b757806365bf03d7146102065780637284e4161461025857005b806301ffc9a7146100de578063085d9ce8146101135780631999bb9e1461015557005b366100dc57005b005b3480156100ea57600080fd5b506100fe6100f9366004610d92565b610354565b60405190151581526020015b60405180910390f35b34801561011f57600080fd5b5061013361012e366004610dd4565b6103b0565b604080518251815260208084015190820152918101519082015260600161010a565b34801561016157600080fd5b506101897f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161010a565b3480156101a357600080fd5b506101896101b2366004610dd4565b61042a565b3480156101c357600080fd5b5060408051808201909152600481527f707974680000000000000000000000000000000000000000000000000000000060208201525b60405161010a9190610eaa565b34801561021257600080fd5b506101f9604080517f0000000000000000000000000000000000000000000000000000000000000000602082015260609101604051602081830303815290604052905090565b34801561026457600080fd5b506101f9610542565b34801561027957600080fd5b50610133610288366004610ebd565b6105d4565b34801561029957600080fd5b50610133610631565b6100dc6102b0366004610dd4565b61068c565b3480156102c157600080fd5b506101336108be565b3480156102d657600080fd5b50600260405161010a9190610ed6565b3480156102f257600080fd5b5061031a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010a565b34801561034b57600080fd5b50610133610a19565b60007fb6a22c2f000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103aa57506103aa82610bdb565b92915050565b6103d460405180606001604052806000815260200160008152602001600081525090565b60006103e08484610c70565b9050604051806060016040528060015460016103fc9190610f46565b815260200182600001518152602001610420836020015160070b8460400151610ca6565b9052949350505050565b604080516001808252818301909252600091829190816020015b60608152602001906001900390816104445790505090506104658484610c70565b606001518160008151811061047c5761047c610f88565b60209081029190910101526040517fd47eed4500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d47eed45906104f9908490600401610fb7565b602060405180830381865afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190611037565b949350505050565b60606000805461055190611050565b80601f016020809104026020016040519081016040528092919081815260200182805461057d90611050565b80156105ca5780601f1061059f576101008083540402835291602001916105ca565b820191906000526020600020905b8154815290600101906020018083116105ad57829003601f168201915b5050505050905090565b6105f860405180606001604052806000815260200160008152602001600081525090565b50600090815260026020818152604092839020835160608101855281548152600182015492810192909252909101549181019190915290565b61065560405180606001604052806000815260200160008152602001600081525090565b5060018054600090815260026020818152604092839020835160608101855281548152948101549185019190915201549082015290565b60006106988383610c70565b60608101518051602091820120600081815260039092526040909120549192509060ff16156107a457604051600090339034908381818185875af1925050503d8060008114610703576040519150601f19603f3d011682016040523d82523d6000602084013e610708565b606091505b505090508061079d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f6f7261636c65207570646174652066656520726566756e642072656a6563746560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b5050505050565b604080516001808252818301909252600091816020015b60608152602001906001900390816107bb5790505090508260600151816000815181106107ea576107ea610f88565b60200260200101819052507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef9e5e2834836040518363ffffffff1660e01b815260040161084f9190610fb7565b6000604051808303818588803b15801561086857600080fd5b505af115801561087c573d6000803e3d6000fd5b505050600093845250506003602052506040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055505050565b6108e260405180606001604052806000815260200160008152602001600081525090565b6040517f96834ad30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906396834ad390602401608060405180830381865afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b3919061113c565b60018054600090815260026020818152604092839020835160608082018652825482529582015492810183905292015492820192909252918301519194509192501115610a1557610a12816001546001610a0d9190610f46565b610d0a565b91505b5090565b610a3d60405180606001604052806000815260200160008152602001600081525090565b6040517f96834ad30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906396834ad390602401608060405180830381865afa158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e919061113c565b600180546000908152600260208181526040928390208351606080820186528254825295820154928101839052920154928201929092529183015192935090911115610ba157600160008154610b63906111a9565b90915550600154610b75908390610d0a565b600180546000908152600260208181526040928390208551815590850151938101939093559201519101555b5050600180546000908152600260208181526040928390208351606081018552815481529481015491850191909152015490820152919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806103aa5750507fffffffff00000000000000000000000000000000000000000000000000000000167f4bbc87a3000000000000000000000000000000000000000000000000000000001490565b6040805160808101825260008082526020820181905291810191909152606080820152610c9f828401846111e1565b9392505050565b600080610cb58360030b610d67565b610cc090600a611410565b905060008360030b13610cee57610ce981610ce386670de0b6b3a7640000610d7a565b90610d86565b61053a565b61053a81610d0486670de0b6b3a7640000610d7a565b90610d7a565b610d2e60405180606001604052806000815260200160008152602001600081525090565b604051806060016040528083815260200184606001518152602001610d5e856000015160070b8660400151610ca6565b90529392505050565b600080821215610a1557816000036103aa565b6000610c9f828461141c565b6000610c9f8284611468565b600060208284031215610da457600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610c9f57600080fd5b60008060208385031215610de757600080fd5b823567ffffffffffffffff80821115610dff57600080fd5b818501915085601f830112610e1357600080fd5b813581811115610e2257600080fd5b866020828501011115610e3457600080fd5b60209290920196919550909350505050565b6000815180845260005b81811015610e6c57602081850181015186830182015201610e50565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610c9f6020830184610e46565b600060208284031215610ecf57600080fd5b5035919050565b6020810160038310610f11577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156103aa576103aa610f17565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561102a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611018858351610e46565b94509285019290850190600101610fde565b5092979650505050505050565b60006020828403121561104957600080fd5b5051919050565b600181811c9082168061106457607f821691505b60208210810361109d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6040516080810167ffffffffffffffff811182821017156110c6576110c6610f59565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561111357611113610f59565b604052919050565b8060070b811461112a57600080fd5b50565b8060030b811461112a57600080fd5b60006080828403121561114e57600080fd5b6111566110a3565b82516111618161111b565b8152602083015167ffffffffffffffff8116811461117e57600080fd5b602082015260408301516111918161112d565b60408201526060928301519281019290925250919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111da576111da610f17565b5060010190565b600060208083850312156111f457600080fd5b823567ffffffffffffffff8082111561120c57600080fd5b908401906080828703121561122057600080fd5b6112286110a3565b82358152838301356112398161111b565b81850152604083013561124b8161112d565b604082015260608301358281111561126257600080fd5b80840193505086601f84011261127757600080fd5b82358281111561128957611289610f59565b6112b9857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016110cc565b925080835287858286010111156112cf57600080fd5b80858501868501376000908301909401939093526060830152509392505050565b600181815b8085111561134957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561132f5761132f610f17565b8085161561133c57918102915b93841c93908002906112f5565b509250929050565b600082611360575060016103aa565b8161136d575060006103aa565b8160018114611383576002811461138d576113a9565b60019150506103aa565b60ff84111561139e5761139e610f17565b50506001821b6103aa565b5060208310610133831016604e8410600b84101617156113cc575081810a6103aa565b6113d683836112f0565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561140857611408610f17565b029392505050565b6000610c9f8383611351565b808202600082127f80000000000000000000000000000000000000000000000000000000000000008414161561145457611454610f17565b81810583148215176103aa576103aa610f17565b60008261149e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156114f2576114f2610f17565b50059056fea264697066735822122032cf424913c0a03dfb67c62934c039ae742febc789b9b803633baf63eaa0ecc564736f6c63430008130033",
  "devdoc": {
    "errors": {
      "InvalidOracleRound()": [
        {
          "details": "Error for invalid oracle round"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "atVersion(uint256)": {
        "params": {
          "version": "The version of which to lookup"
        },
        "returns": {
          "oracleVersion": "Oracle version at version `version`"
        }
      },
      "constructor": {
        "params": {
          "description_": "The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)",
          "priceFeedId_": "The id of pyth price feed (https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet)",
          "pyth_": "Pyth address (https://docs.pyth.network/documentation/pythnet-price-feeds/evm)"
        }
      },
      "currentVersion()": {
        "returns": {
          "oracleVersion": "Current oracle version"
        }
      },
      "description()": {
        "returns": {
          "_0": "A string representing the description of the Oracle Provider."
        }
      },
      "extraModule()": {
        "details": "Returns the type of automation module that the Keeper will execute, either \"None\" or \"Pyth\".",
        "returns": {
          "_0": "Automation module type, which can be \"None\" or \"Pyth\"."
        }
      },
      "extraParam()": {
        "details": "Retrieves the parameter needed to request data from the Keeper, e.g., the price feed ID in the case of Pyth integration.",
        "returns": {
          "_0": "Required parameter for Keeper requests as bytes"
        }
      },
      "getUpdateFee(bytes)": {
        "details": "Returns the fee required to update the Oracle Provider with the given off-chain data",
        "params": {
          "offchainData": "Off-chain data required for the update"
        },
        "returns": {
          "_0": "fee amount"
        }
      },
      "lastSyncedVersion()": {
        "details": "Retrieves the last synchronized oracle version",
        "returns": {
          "_0": "Last synchronized oracle version"
        }
      },
      "oracleProviderName()": {
        "returns": {
          "_0": "A string representing the name of the Oracle Provider."
        }
      },
      "parseExtraData(bytes)": {
        "details": "Parses the provided off-chain data received from the Keeper and returns an OracleVersion structure representing the parsed data",
        "params": {
          "extraData": "Off-chain data received from the Keeper"
        },
        "returns": {
          "_0": "Parsed OracleVersion structure"
        }
      },
      "sync()": {
        "details": "`sync` is expected to be called soon after a phase update occurs in the underlying proxy.      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call      This is feasible in the short term due to how infrequent phase updates are, but phase update      and roundCount detection should eventually be implemented at the contract level.      Reverts if there is more than 1 phase to update in a single sync because we currently cannot      determine the startingRoundId for the intermediary phase.",
        "returns": {
          "_0": "The current oracle version after sync"
        }
      },
      "updatePrice(bytes)": {
        "details": "Updates the Oracle Provider with the provided off-chain data",
        "params": {
          "offchainData": "Off-chain data used for the update"
        }
      }
    },
    "stateVariables": {
      "_description": {
        "details": "The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)"
      },
      "lastSyncedVersionIndex": {
        "details": "Last version index seen when `sync` was called"
      },
      "oracleVersions": {
        "details": "Mapping of version to OracleVersion"
      },
      "priceFeedId": {
        "details": "The id of pyth price feed (https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet)"
      },
      "pyth": {
        "details": "Pyth address (https://docs.pyth.network/documentation/pythnet-price-feeds/evm)"
      },
      "updatedVaa": {
        "details": "Mapping of updateData(vaa) to version index"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "atVersion(uint256)": {
        "notice": "Returns the current oracle version"
      },
      "constructor": {
        "notice": "Initializes the contract state"
      },
      "currentVersion()": {
        "notice": "Returns the current oracle version"
      },
      "description()": {
        "notice": "Retrieves the description of the Oracle Provider."
      },
      "oracleProviderName()": {
        "notice": "Retrieves the name of the Oracle Provider."
      },
      "sync()": {
        "notice": "Checks for a new price and updates the internal phase annotation state accordingly"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 34025,
        "contract": "contracts/oracle/PythFeedOracle.sol:PythFeedOracle",
        "label": "_description",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 34028,
        "contract": "contracts/oracle/PythFeedOracle.sol:PythFeedOracle",
        "label": "lastSyncedVersionIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 34034,
        "contract": "contracts/oracle/PythFeedOracle.sol:PythFeedOracle",
        "label": "oracleVersions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(OracleVersion)34824_storage)"
      },
      {
        "astId": 34039,
        "contract": "contracts/oracle/PythFeedOracle.sol:PythFeedOracle",
        "label": "updatedVaa",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(OracleVersion)34824_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IOracleProvider.OracleVersion)",
        "numberOfBytes": "32",
        "value": "t_struct(OracleVersion)34824_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(OracleVersion)34824_storage": {
        "encoding": "inplace",
        "label": "struct IOracleProvider.OracleVersion",
        "members": [
          {
            "astId": 34819,
            "contract": "contracts/oracle/PythFeedOracle.sol:PythFeedOracle",
            "label": "version",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 34821,
            "contract": "contracts/oracle/PythFeedOracle.sol:PythFeedOracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 34823,
            "contract": "contracts/oracle/PythFeedOracle.sol:PythFeedOracle",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}