{
  "address": "0x3f6E20Db139caf6BBA7ad3a24c1040cbC59C5616",
  "abi": [
    {
      "inputs": [],
      "name": "Empty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByDao",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByLiquidator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAccessableByVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int16[]",
          "name": "feeRates",
          "type": "int16[]"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe4dab911fe219bbbdc041d5152441c4334beeeb589c68b2719470ed7d100bf3c",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0x3f6E20Db139caf6BBA7ad3a24c1040cbC59C5616",
    "transactionIndex": 1,
    "gasUsed": "1932837",
    "logsBloom": "0x
    "blockHash": "0x8c10f4033af24639311e10287fc8df5825988a76ffcb885bc158780d44240000",
    "transactionHash": "0xe4dab911fe219bbbdc041d5152441c4334beeeb589c68b2719470ed7d100bf3c",
    "logs": [],
    "blockNumber": 52700863,
    "cumulativeGasUsed": "1932837",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "56bceea35be7e0d66214085237c57d89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Empty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByDao\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByLiquidator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAccessableByVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int16[]\",\"name\":\"feeRates\",\"type\":\"int16[]\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"Empty()\":[{\"details\":\"An operation (e.g. {front}) couldn't be completed due to the queue being empty.\"}],\"OnlyAccessableByDao()\":[{\"details\":\"Throws an error indicating that the caller is not the DAO.\"}],\"OnlyAccessableByLiquidator()\":[{\"details\":\"Throws an error indicating that the caller is not the chromatic liquidator contract.\"}],\"OnlyAccessableByVault()\":[{\"details\":\"Throws an error indicating that the caller is not the chromatch vault contract.\"}],\"OutOfBounds()\":[{\"details\":\"An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\"}]},\"kind\":\"dev\",\"methods\":{\"settle(int16[])\":{\"details\":\"This function settles the market by synchronizing the oracle version      and calling the settle function of the liquidity pool.\",\"params\":{\"feeRates\":\"The feeRate list of liquidity bin to settle.\"}},\"settleAll()\":{\"details\":\"This function settles the market by synchronizing the oracle version      and calling the settle function of the liquidity pool.\"}},\"title\":\"MarketSettleFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"settle(int16[])\":{\"notice\":\"Executes the settlement process for the Chromatic market.\"},\"settleAll()\":{\"notice\":\"Executes the settlement process for the Chromatic market.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/facets/market/MarketSettleFacet.sol\":\"MarketSettleFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\",\"keccak256\":\"0x8b4a492c14765d24f935516cb3437a1b39fbd65f20fc8828e7880fb1bdcfba86\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.4;\\n\\nimport \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```solidity\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n *\\n * _Available since v4.6._\\n */\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\\n\",\"keccak256\":\"0xb5fbb623dec53bb9b6c1b738b4ab6540a04ac5dc2ac94d95fa3ebfd22898559c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/core/facets/market/MarketFacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {MarketStorage, MarketStorageLib} from \\\"@chromatic-protocol/contracts/core/libraries/MarketStorage.sol\\\";\\n\\nabstract contract MarketFacetBase {\\n    /**\\n     * @dev Throws an error indicating that the caller is not the DAO.\\n     */\\n    error OnlyAccessableByDao();\\n\\n    /**\\n     * @dev Throws an error indicating that the caller is not the chromatic liquidator contract.\\n     */\\n\\n    error OnlyAccessableByLiquidator();\\n\\n    /**\\n     * @dev Throws an error indicating that the caller is not the chromatch vault contract.\\n     */\\n    error OnlyAccessableByVault();\\n\\n    /**\\n     * @dev Modifier to restrict access to only the DAO.\\n     *      Throws an `OnlyAccessableByDao` error if the caller is not the DAO.\\n     */\\n    modifier onlyDao() {\\n        if (msg.sender != MarketStorageLib.marketStorage().factory.dao())\\n            revert OnlyAccessableByDao();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict access to only the liquidator contract.\\n     *      Throws an `OnlyAccessableByLiquidator` error if the caller is not the chromatic liquidator contract.\\n     */\\n    modifier onlyLiquidator() {\\n        if (msg.sender != address(MarketStorageLib.marketStorage().liquidator))\\n            revert OnlyAccessableByLiquidator();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict a function to be called only by the vault contract.\\n     *      Throws an `OnlyAccessableByVault` error if the caller is not the chromatic vault contract.\\n     */\\n    modifier onlyVault() {\\n        if (msg.sender != address(MarketStorageLib.marketStorage().vault))\\n            revert OnlyAccessableByVault();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new LP context.\\n     * @return The LP context.\\n     */\\n    function newLpContext(MarketStorage storage ms) internal view returns (LpContext memory) {\\n        \\n        //slither-disable-next-line uninitialized-local\\n        IOracleProvider.OracleVersion memory _currentVersionCache;\\n        return\\n            LpContext({\\n                oracleProvider: ms.oracleProvider,\\n                interestCalculator: ms.factory,\\n                vault: ms.vault,\\n                clbToken: ms.clbToken,\\n                market: address(this),\\n                settlementToken: address(ms.settlementToken),\\n                tokenPrecision: 10 ** ms.settlementToken.decimals(),\\n                _currentVersionCache: _currentVersionCache\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xfe9b757a0ced305ded6f723abe6de9af7d14ae791c524df46ee15fe0ee598161\",\"license\":\"BUSL-1.1\"},\"contracts/core/facets/market/MarketSettleFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IMarketSettle} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketSettle.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {MarketStorage, MarketStorageLib} from \\\"@chromatic-protocol/contracts/core/libraries/MarketStorage.sol\\\";\\nimport {MarketFacetBase} from \\\"@chromatic-protocol/contracts/core/facets/market/MarketFacetBase.sol\\\";\\n\\n/**\\n * @title MarketSettleFacet\\n */\\ncontract MarketSettleFacet is MarketFacetBase, IMarketSettle {\\n    /**\\n     * @inheritdoc IMarketSettle\\n     * @dev This function settles the market by synchronizing the oracle version\\n     *      and calling the settle function of the liquidity pool.\\n     */\\n    function settle(int16[] calldata feeRates) external override {\\n        MarketStorage storage ms = MarketStorageLib.marketStorage();\\n\\n        LpContext memory ctx = newLpContext(ms);\\n        ctx.syncOracleVersion();\\n\\n        ms.liquidityPool.settle(ctx, feeRates);\\n    }\\n\\n    /**\\n     * @inheritdoc IMarketSettle\\n     * @dev This function settles the market by synchronizing the oracle version\\n     *      and calling the settle function of the liquidity pool.\\n     */\\n    function settleAll() external override {\\n        MarketStorage storage ms = MarketStorageLib.marketStorage();\\n\\n        LpContext memory ctx = newLpContext(ms);\\n        ctx.syncOracleVersion();\\n\\n        ms.liquidityPool.settleAll(ctx);\\n    }\\n}\\n\",\"keccak256\":\"0x912ce8e7127777273589fe403d5ec32d855440d969f8f8c48284cb856772b15b\",\"license\":\"MIT\"},\"contracts/core/interfaces/ICLBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\n\\n/**\\n * @title ICLBToken\\n * @dev Interface for CLBToken contract, which represents Liquidity Bin tokens.\\n */\\ninterface ICLBToken is IERC1155, IERC1155MetadataURI {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     * @param id The token ID for which to retrieve the total supply.\\n     * @return The total supply of tokens for the given token ID.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Total amounts of tokens in with the given ids.\\n     * @param ids The token IDs for which to retrieve the total supply.\\n     * @return The total supples of tokens for the given token IDs.\\n     */\\n    function totalSupplyBatch(uint256[] memory ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Mints new tokens and assigns them to the specified address.\\n     * @param to The address to which the minted tokens will be assigned.\\n     * @param id The token ID to mint.\\n     * @param amount The amount of tokens to mint.\\n     * @param data Additional data to pass during the minting process.\\n     */\\n    function mint(address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Burns tokens from a specified address.\\n     * @param from The address from which to burn tokens.\\n     * @param id The token ID to burn.\\n     * @param amount The amount of tokens to burn.\\n     */\\n    function burn(address from, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Retrieves the number of decimals used for token amounts.\\n     * @return The number of decimals used for token amounts.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Retrieves the name of a token.\\n     * @param id The token ID for which to retrieve the name.\\n     * @return The name of the token.\\n     */\\n    function name(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the description of a token.\\n     * @param id The token ID for which to retrieve the description.\\n     * @return The description of the token.\\n     */\\n    function description(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the image URI of a token.\\n     * @param id The token ID for which to retrieve the image URI.\\n     * @return The image URI of the token.\\n     */\\n    function image(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x104e532ccc23403fdf1b340c292d208c3837f9abd29eda787eec5b6ac1438488\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IMarketDeployer} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IMarketDeployer.sol\\\";\\nimport {ISettlementTokenRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\\\";\\nimport {IOracleProviderRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IOracleProviderRegistry.sol\\\";\\n\\n/**\\n * @title IChromaticMarketFactory\\n * @dev Interface for the Chromatic Market Factory contract.\\n */\\ninterface IChromaticMarketFactory is\\n    IMarketDeployer,\\n    IOracleProviderRegistry,\\n    ISettlementTokenRegistry,\\n    IInterestCalculator\\n{\\n    /**\\n     * @notice Emitted when the DAO address is updated.\\n     * @param dao The new DAO address.\\n     */\\n    event UpdateDao(address indexed dao);\\n\\n    /**\\n     * @notice Emitted when the DAO treasury address is updated.\\n     * @param treasury The new DAO treasury address.\\n     */\\n    event UpdateTreasury(address indexed treasury);\\n\\n    /**\\n     * @notice Emitted when the liquidator address is set.\\n     * @param liquidator The liquidator address.\\n     */\\n    event SetLiquidator(address indexed liquidator);\\n\\n    /**\\n     * @notice Emitted when the vault address is set.\\n     * @param vault The vault address.\\n     */\\n    event SetVault(address indexed vault);\\n\\n    /**\\n     * @notice Emitted when the keeper fee payer address is set.\\n     * @param keeperFeePayer The keeper fee payer address.\\n     */\\n    event SetKeeperFeePayer(address indexed keeperFeePayer);\\n\\n    /**\\n     * @notice Emitted when the market settlement task address is set.\\n     * @param marketSettlement The market settlement task address.\\n     */\\n    event SetMarketSettlement(address indexed marketSettlement);\\n\\n    /**\\n     * @notice Emitted when a market is created.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @param market The address of the created market.\\n     */\\n    event MarketCreated(\\n        address indexed oracleProvider,\\n        address indexed settlementToken,\\n        address indexed market\\n    );\\n\\n    /**\\n     * @notice Returns the address of the DAO.\\n     * @return The address of the DAO.\\n     */\\n    function dao() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO treasury.\\n     * @return The address of the DAO treasury.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the liquidator.\\n     * @return The address of the liquidator.\\n     */\\n    function liquidator() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the vault.\\n     * @return The address of the vault.\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the keeper fee payer.\\n     * @return The address of the keeper fee payer.\\n     */\\n    function keeperFeePayer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the market settlement task.\\n     * @return The address of the market settlement task.\\n     */\\n    function marketSettlement() external view returns (address);\\n\\n    /**\\n     * @notice Updates the DAO address.\\n     * @param _dao The new DAO address.\\n     */\\n    function updateDao(address _dao) external;\\n\\n    /**\\n     * @notice Updates the DAO treasury address.\\n     * @param _treasury The new DAO treasury address.\\n     */\\n    function updateTreasury(address _treasury) external;\\n\\n    /**\\n     * @notice Sets the liquidator address.\\n     * @param _liquidator The liquidator address.\\n     */\\n    function setLiquidator(address _liquidator) external;\\n\\n    /**\\n     * @notice Sets the vault address.\\n     * @param _vault The vault address.\\n     */\\n    function setVault(address _vault) external;\\n\\n    /**\\n     * @notice Sets the keeper fee payer address.\\n     * @param _keeperFeePayer The keeper fee payer address.\\n     */\\n    function setKeeperFeePayer(address _keeperFeePayer) external;\\n\\n    /**\\n     * @notice Sets the market settlement task address.\\n     * @param _marketSettlement The market settlement task address.\\n     */\\n    function setMarketSettlement(address _marketSettlement) external;\\n\\n    /**\\n     * @notice Returns an array of all market addresses.\\n     * @return markets An array of all market addresses.\\n     */\\n    function getMarkets() external view returns (address[] memory markets);\\n\\n    /**\\n     * @notice Returns an array of market addresses associated with a settlement token.\\n     * @param settlementToken The address of the settlement token.\\n     * @return An array of market addresses.\\n     */\\n    function getMarketsBySettlmentToken(\\n        address settlementToken\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of a market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @return The address of the market.\\n     */\\n    function getMarket(\\n        address oracleProvider,\\n        address settlementToken\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Creates a new market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     */\\n    function createMarket(address oracleProvider, address settlementToken) external;\\n\\n    /**\\n     * @notice Checks if a market is registered.\\n     * @param market The address of the market.\\n     * @return True if the market is registered, false otherwise.\\n     */\\n    function isRegisteredMarket(address market) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9e281572c161bee4179d8e1cd7703d9278c319695491b7bf5f71701d1351f78f\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ILendingPool} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/ILendingPool.sol\\\";\\nimport {IVault} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/IVault.sol\\\";\\n\\n/**\\n * @title IChromaticVault\\n * @notice Interface for the Chromatic Vault contract.\\n */\\ninterface IChromaticVault is IVault, ILendingPool {\\n    /**\\n     * @dev Emitted when market earning is accumulated.\\n     * @param market The address of the market.\\n     * @param earning The amount of earning accumulated.\\n     */\\n    event MarketEarningAccumulated(address indexed market, uint256 earning);\\n\\n    /**\\n     * @dev Emitted when maker earning is distributed.\\n     * @param token The address of the settlement token.\\n     * @param earning The amount of earning distributed.\\n     * @param usedKeeperFee The amount of keeper fee used.\\n     */\\n    event MakerEarningDistributed(\\n        address indexed token,\\n        uint256 indexed earning,\\n        uint256 indexed usedKeeperFee\\n    );\\n\\n    /**\\n     * @dev Emitted when market earning is distributed.\\n     * @param market The address of the market.\\n     * @param earning The amount of earning distributed.\\n     * @param usedKeeperFee The amount of keeper fee used.\\n     * @param marketBalance The balance of the market.\\n     */\\n    event MarketEarningDistributed(\\n        address indexed market,\\n        uint256 indexed earning,\\n        uint256 indexed usedKeeperFee,\\n        uint256 marketBalance\\n    );\\n\\n    function pendingMakerEarnings(address token) external view returns (uint256);\\n\\n    function pendingMarketEarnings(address market) external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function createMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Cancels a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function cancelMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Distributes the maker earning for a token to the each markets.\\n     * @param token The address of the settlement token.\\n     * @param fee The keeper fee amount.\\n     * @param keeper The keeper address to receive fee.\\n     */\\n    function distributeMakerEarning(address token, uint256 fee, address keeper) external;\\n\\n    /**\\n     * @notice Creates a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function createMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Cancels a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function cancelMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Distributes the market earning for a market to the each bins.\\n     * @param market The address of the market.\\n     * @param fee The fee amount.\\n     * @param keeper The keeper address to receive fee.\\n     */\\n    function distributeMarketEarning(address market, uint256 fee, address keeper) external;\\n}\\n\",\"keccak256\":\"0x8521226c86ff197092c32d2e693734c8ff6f2d0c1f9cbb1e8cbc70b6654102f0\",\"license\":\"MIT\"},\"contracts/core/interfaces/IInterestCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IInterestCalculator\\n * @dev Interface for an interest calculator contract.\\n */\\ninterface IInterestCalculator {\\n    /**\\n     * @notice Calculates the interest accrued for a given token and amount within a specified time range.\\n     * @param token The address of the token.\\n     * @param amount The amount of the token.\\n     * @param from The starting timestamp (inclusive) of the time range.\\n     * @param to The ending timestamp (exclusive) of the time range.\\n     * @return The accrued interest for the specified token and amount within the given time range.\\n     */\\n    function calculateInterest(\\n        address token,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf70b44ce6eb1422abed056169dc5db83ddbb2ee34d7751192f00e6cb3dc1ccbe\",\"license\":\"MIT\"},\"contracts/core/interfaces/IKeeperFeePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IKeeperFeePayer\\n * @dev Interface for a contract that pays keeper fees.\\n */\\ninterface IKeeperFeePayer {\\n    event SetRouter(address indexed);\\n\\n    /**\\n     * @notice Approves or revokes approval to the Uniswap router for a given token.\\n     * @param token The address of the token.\\n     * @param approve A boolean indicating whether to approve or revoke approval.\\n     */\\n    function approveToRouter(address token, bool approve) external;\\n\\n    /**\\n     * @notice Pays the keeper fee using Uniswap swaps.\\n     * @param tokenIn The address of the token being swapped.\\n     * @param amountOut The desired amount of output tokens.\\n     * @param keeperAddress The address of the keeper to receive the fee.\\n     * @return amountIn The actual amount of input tokens used for the swap.\\n     */\\n    function payKeeperFee(\\n        address tokenIn,\\n        uint256 amountOut,\\n        address keeperAddress\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xffaab8adb0713fa436e217be2aa016cf79b55ec2868db06656b150217151a66e\",\"license\":\"MIT\"},\"contracts/core/interfaces/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title ILiquidator\\n * @dev Interface for the Chromatic Liquidator contract.\\n */\\ninterface ILiquidator {\\n    /**\\n     * @notice Creates a liquidation task for a given position.\\n     * @param positionId The ID of the position to be liquidated.\\n     */\\n    function createLiquidationTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Cancels a liquidation task for a given position.\\n     * @param positionId The ID of the position for which to cancel the liquidation task.\\n     */\\n    function cancelLiquidationTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Resolves the liquidation of a position.\\n     * @dev This function is called by the automation system.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be liquidated.\\n     * @return canExec Whether the liquidation can be executed.\\n     * @return execPayload The encoded function call to execute the liquidation.\\n     */\\n    function resolveLiquidation(\\n        address market,\\n        uint256 positionId\\n    ) external view returns (bool canExec, bytes memory execPayload);\\n\\n    /**\\n     * @notice Liquidates a position in a market.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be liquidated.\\n     */\\n    function liquidate(address market, uint256 positionId) external;\\n\\n    /**\\n     * @notice Creates a claim position task for a given position.\\n     * @param positionId The ID of the position to be claimed.\\n     */\\n    function createClaimPositionTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Cancels a claim position task for a given position.\\n     * @param positionId The ID of the position for which to cancel the claim position task.\\n     */\\n    function cancelClaimPositionTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Resolves the claim of a position.\\n     * @dev This function is called by the automation system.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be claimed.\\n     * @return canExec Whether the claim can be executed.\\n     * @return execPayload The encoded function call to execute the claim.\\n     */\\n    function resolveClaimPosition(\\n        address market,\\n        uint256 positionId\\n    ) external view returns (bool canExec, bytes memory execPayload);\\n\\n    /**\\n     * @notice Claims a position in a market.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be claimed.\\n     */\\n    function claimPosition(address market, uint256 positionId) external;\\n\\n    function getLiquidationTaskId(\\n        address market,\\n        uint256 positionId\\n    ) external view returns (bytes32);\\n\\n    function getClaimPositionTaskId(\\n        address market,\\n        uint256 positionId\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1c432965ed93d482fddf0f0f69dd3ffa275212a202e40cd1f9b51cd10d50b2c2\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/IMarketDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title An interface for a contract that is capable of deploying Chromatic markets\\n * @notice A contract that constructs a market must implement this to pass arguments to the market\\n * @dev This is used to avoid having constructor arguments in the market contract, which results in the init code hash\\n * of the market being constant allowing the CREATE2 address of the market to be cheaply computed on-chain\\n */\\ninterface IMarketDeployer {\\n    /**\\n     * @notice Get the parameters to be used in constructing the market, set transiently during market creation.\\n     * @dev Called by the market constructor to fetch the parameters of the market\\n     * Returns underlyingAsset The underlying asset of the market\\n     * Returns settlementToken The settlement token of the market\\n     * Returns vPoolCapacity Capacity of virtual future pool\\n     * Returns vPoolA Amplification coefficient of virtual future pool, precise value\\n     */\\n    function parameters() external view returns (address oracleProvider, address settlementToken);\\n}\\n\",\"keccak256\":\"0x6ce7c90b2b1a8ff9b721644a33ab4585d84fdacf789af3ea6169f49dc033fd77\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/IOracleProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IOracleProviderRegistry\\n * @dev Interface for the Oracle Provider Registry contract.\\n */\\ninterface IOracleProviderRegistry {\\n    \\n    /**\\n     * @dev The OracleProviderProperties struct represents properties of the oracle provider.\\n     * @param minTakeProfitBPS The minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The maximum take-profit basis points.\\n     * @param leverageLevel The leverage level of the oracle provider.\\n     */\\n    struct OracleProviderProperties {\\n        uint32 minTakeProfitBPS;\\n        uint32 maxTakeProfitBPS;\\n        uint8 leverageLevel;\\n    }\\n\\n    /**\\n     * @dev Emitted when a new oracle provider is registered.\\n     * @param oracleProvider The address of the registered oracle provider.\\n     * @param properties The properties of the registered oracle provider.\\n     */\\n    event OracleProviderRegistered(\\n        address indexed oracleProvider,\\n        OracleProviderProperties properties\\n    );\\n\\n    /**\\n     * @dev Emitted when an oracle provider is unregistered.\\n     * @param oracleProvider The address of the unregistered oracle provider.\\n     */\\n    event OracleProviderUnregistered(address indexed oracleProvider);\\n\\n    /**\\n     * @dev Emitted when the take-profit basis points range of an oracle provider is updated.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\\n     */\\n    event UpdateTakeProfitBPSRange(\\n        address indexed oracleProvider,\\n        uint32 indexed minTakeProfitBPS,\\n        uint32 indexed maxTakeProfitBPS\\n    );\\n\\n    /**\\n     * @dev Emitted when the level of an oracle provider is set.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new level set for the oracle provider.\\n     */\\n    event UpdateLeverageLevel(address indexed oracleProvider, uint8 indexed level);\\n\\n    /**\\n     * @notice Registers an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to register.\\n     * @param properties The properties of the oracle provider.\\n     */\\n    function registerOracleProvider(\\n        address oracleProvider,\\n        OracleProviderProperties memory properties\\n    ) external;\\n\\n    /**\\n     * @notice Unregisters an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to unregister.\\n     */\\n    function unregisterOracleProvider(address oracleProvider) external;\\n\\n    /**\\n     * @notice Gets the registered oracle providers.\\n     * @return An array of registered oracle provider addresses.\\n     */\\n    function registeredOracleProviders() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if an oracle provider is registered.\\n     * @param oracleProvider The address of the oracle provider to check.\\n     * @return A boolean indicating if the oracle provider is registered.\\n     */\\n    function isRegisteredOracleProvider(address oracleProvider) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the properties of an oracle provider.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @return The properties of the oracle provider.\\n     */\\n    function getOracleProviderProperties(\\n        address oracleProvider\\n    ) external view returns (OracleProviderProperties memory);\\n\\n    /**\\n     * @notice Updates the take-profit basis points range of an oracle provider.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The new minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The new maximum take-profit basis points.\\n     */\\n    function updateTakeProfitBPSRange(\\n        address oracleProvider,\\n        uint32 minTakeProfitBPS,\\n        uint32 maxTakeProfitBPS\\n    ) external;\\n\\n    /**\\n     * @notice Updates the leverage level of an oracle provider in the registry.\\n     * @dev The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new leverage level to be set for the oracle provider.\\n     */\\n    function updateLeverageLevel(address oracleProvider, uint8 level) external;\\n}\\n\",\"keccak256\":\"0x77262e41b90e3a09c60ecd12e257a1d4119ed15ee8c4fbc51d6fb6e34d4c138a\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {InterestRate} from \\\"@chromatic-protocol/contracts/core/libraries/InterestRate.sol\\\";\\n\\n/**\\n * @title ISettlementTokenRegistry\\n * @dev Interface for the Settlement Token Registry contract.\\n */\\ninterface ISettlementTokenRegistry {\\n    /**\\n     * @dev Emitted when a new settlement token is registered.\\n     * @param token The address of the registered settlement token.\\n     * @param minimumMargin The minimum margin for the markets using this settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    event SettlementTokenRegistered(\\n        address indexed token,\\n        uint256 indexed minimumMargin,\\n        uint256 indexed interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    );\\n\\n    /**\\n     * @dev Emitted when the minimum margin for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    event SetMinimumMargin(address indexed token, uint256 indexed minimumMargin);\\n\\n    /**\\n     * @dev Emitted when the flash loan fee rate for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    event SetFlashLoanFeeRate(address indexed token, uint256 indexed flashLoanFeeRate);\\n\\n    /**\\n     * @dev Emitted when the earning distribution threshold for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    event SetEarningDistributionThreshold(\\n        address indexed token,\\n        uint256 indexed earningDistributionThreshold\\n    );\\n\\n    /**\\n     * @dev Emitted when the Uniswap fee tier for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    event SetUniswapFeeTier(address indexed token, uint24 indexed uniswapFeeTier);\\n\\n    /**\\n     * @dev Emitted when an interest rate record is appended for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event InterestRateRecordAppended(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the last interest rate record is removed for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event LastInterestRateRecordRemoved(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @notice Registers a new settlement token.\\n     * @param token The address of the settlement token to register.\\n     * @param minimumMargin The minimum margin for the settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    function registerSettlementToken(\\n        address token,\\n        uint256 minimumMargin,\\n        uint256 interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    ) external;\\n\\n    /**\\n     * @notice Gets the list of registered settlement tokens.\\n     * @return An array of addresses representing the registered settlement tokens.\\n     */\\n    function registeredSettlementTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if a settlement token is registered.\\n     * @param token The address of the settlement token to check.\\n     * @return True if the settlement token is registered, false otherwise.\\n     */\\n    function isRegisteredSettlementToken(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the minimum margin for a settlement token.\\n     * @dev The minimumMargin is used as the minimum value for the taker margin of a position\\n     *      or as the minimum value for the maker margin of each bin.\\n     * @param token The address of the settlement token.\\n     * @return The minimum margin for the settlement token.\\n     */\\n    function getMinimumMargin(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the minimum margin for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    function setMinimumMargin(address token, uint256 minimumMargin) external;\\n\\n    /**\\n     * @notice Gets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The flash loan fee rate for the settlement token.\\n     */\\n    function getFlashLoanFeeRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    function setFlashLoanFeeRate(address token, uint256 flashLoanFeeRate) external;\\n\\n    /**\\n     * @notice Gets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The earning distribution threshold for the settlement token.\\n     */\\n    function getEarningDistributionThreshold(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    function setEarningDistributionThreshold(\\n        address token,\\n        uint256 earningDistributionThreshold\\n    ) external;\\n\\n    /**\\n     * @notice Gets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The Uniswap fee tier for the settlement token.\\n     */\\n    function getUniswapFeeTier(address token) external view returns (uint24);\\n\\n    /**\\n     * @notice Sets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    function setUniswapFeeTier(address token, uint24 uniswapFeeTier) external;\\n\\n    /**\\n     * @notice Appends an interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    function appendInterestRateRecord(\\n        address token,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes the last interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     */\\n    function removeLastInterestRateRecord(address token) external;\\n\\n    /**\\n     * @notice Gets the current interest rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The current interest rate for the settlement token.\\n     */\\n    function currentInterestRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets all the interest rate records for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return An array of interest rate records for the settlement token.\\n     */\\n    function getInterestRateRecords(\\n        address token\\n    ) external view returns (InterestRate.Record[] memory);\\n}\\n\",\"keccak256\":\"0xf315d983e68563051864163318bd1223ebd3eed20fde5914c212fc2b2e3ba3a3\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketSettle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IMarketSettle\\n * @dev Interface for market settlement.\\n */\\ninterface IMarketSettle {\\n    /**\\n     * @notice Executes the settlement process for the Chromatic market.\\n     * @dev This function is called to settle the market.\\n     * @param feeRates The feeRate list of liquidity bin to settle.\\n     */\\n    function settle(int16[] calldata feeRates) external;\\n\\n    /**\\n     * @notice Executes the settlement process for the Chromatic market.\\n     * @dev This function is called to settle the market.\\n     */\\n    function settleAll() external;\\n}\\n\",\"keccak256\":\"0xb88a0c6429f6311db0b58b113d880ba1816aa7e59953f457ad1585d3d8b3e8a1\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nbytes4 constant CLAIM_USER = \\\"UC\\\";\\nbytes4 constant CLAIM_KEEPER = \\\"KC\\\";\\nbytes4 constant CLAIM_TP = \\\"TP\\\";\\nbytes4 constant CLAIM_SL = \\\"SL\\\";\\n\\n/**\\n * @dev The OpenPositionInfo struct represents a opened trading position.\\n * @param id The position identifier\\n * @param openVersion The version of the oracle when the position was opened\\n * @param qty The quantity of the position\\n * @param openTimestamp The timestamp when the position was opened\\n * @param takerMargin The amount of collateral that a trader must provide\\n * @param makerMargin The margin amount provided by the maker.\\n * @param tradingFee The trading fee associated with the position.\\n */\\nstruct OpenPositionInfo {\\n    uint256 id;\\n    uint256 openVersion;\\n    int256 qty;\\n    uint256 openTimestamp;\\n    uint256 takerMargin;\\n    uint256 makerMargin;\\n    uint256 tradingFee;\\n}\\n\\n/**\\n * @dev The ClosePositionInfo struct represents a closed trading position.\\n * @param id The position identifier\\n * @param closeVersion The version of the oracle when the position was closed\\n * @param closeTimestamp The timestamp when the position was closed\\n */\\nstruct ClosePositionInfo {\\n    uint256 id;\\n    uint256 closeVersion;\\n    uint256 closeTimestamp;\\n}\\n\\n/**\\n * @dev The ClaimPositionInfo struct represents a claimed position information.\\n * @param id The position identifier\\n * @param entryPrice The entry price of the position\\n * @param exitPrice The exit price of the position\\n * @param realizedPnl The profit or loss of the claimed position.\\n * @param interest The interest paid for the claimed position.\\n * @param cause The description of being claimed.\\n */\\nstruct ClaimPositionInfo {\\n    uint256 id;\\n    uint256 entryPrice;\\n    uint256 exitPrice;\\n    int256 realizedPnl;\\n    uint256 interest;\\n    bytes4 cause;\\n}\\n\\n/**\\n * @dev Represents a pending position within the LiquidityBin\\n * @param openVersion The oracle version when the position was opened.\\n * @param totalQty The total quantity of the pending position.\\n * @param totalMakerMargin The total maker margin of the pending position.\\n * @param totalTakerMargin The total taker margin of the pending position.\\n */\\nstruct PendingPosition {\\n    uint256 openVersion;\\n    int256 totalQty;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n}\\n\\n/**\\n * @dev Represents the closing position within an LiquidityBin.\\n * @param closeVersion The oracle version when the position was closed.\\n * @param totalQty The total quantity of the closing position.\\n * @param totalEntryAmount The total entry amount of the closing position.\\n * @param totalMakerMargin The total maker margin of the closing position.\\n * @param totalTakerMargin The total taker margin of the closing position.\\n */\\nstruct ClosingPosition {\\n    uint256 closeVersion;\\n    int256 totalQty;\\n    uint256 totalEntryAmount;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n}\\n\\n/**\\n * @dev A struct representing pending liquidity information.\\n * @param oracleVersion The oracle version of pending liqudity.\\n * @param mintingTokenAmountRequested The amount of settlement tokens requested for minting.\\n * @param burningCLBTokenAmountRequested The amount of CLB tokens requested for burning.\\n */\\nstruct PendingLiquidity {\\n    uint256 oracleVersion;\\n    uint256 mintingTokenAmountRequested;\\n    uint256 burningCLBTokenAmountRequested;\\n}\\n\\n/**\\n * @dev A struct representing claimable liquidity information.\\n * @param mintingTokenAmountRequested The amount of settlement tokens requested for minting.\\n * @param mintingCLBTokenAmount The actual amount of CLB tokens minted.\\n * @param burningCLBTokenAmountRequested The amount of CLB tokens requested for burning.\\n * @param burningCLBTokenAmount The actual amount of CLB tokens burned.\\n * @param burningTokenAmount The amount of settlement tokens equal in value to the burned CLB tokens.\\n */\\nstruct ClaimableLiquidity {\\n    uint256 mintingTokenAmountRequested;\\n    uint256 mintingCLBTokenAmount;\\n    uint256 burningCLBTokenAmountRequested;\\n    uint256 burningCLBTokenAmount;\\n    uint256 burningTokenAmount;\\n}\\n\\n/**\\n * @dev A struct representing status of the liquidity bin.\\n * @param liquidity The total liquidity amount in the bin\\n * @param freeLiquidity The amount of free liquidity available in the bin.\\n * @param binValue The current value of the bin.\\n * @param tradingFeeRate The trading fee rate for the liquidity.\\n */\\nstruct LiquidityBinStatus {\\n    uint256 liquidity;\\n    uint256 freeLiquidity;\\n    uint256 binValue;\\n    int16 tradingFeeRate;\\n}\\n\",\"keccak256\":\"0x33b22b217ffac58ab3c171542a89357d17eb5527359ab41a5f35d2d339fe5140\",\"license\":\"MIT\"},\"contracts/core/interfaces/vault/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title ILendingPool\\n * @dev Interface for a lending pool contract.\\n */\\ninterface ILendingPool {\\n    /**\\n     * @notice Emitted when a flash loan is executed.\\n     * @param sender The address initiating the flash loan.\\n     * @param recipient The address receiving the flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @param paid The amount paid back after the flash loan.\\n     * @param paidToTakerPool The amount paid to the taker pool after the flash loan.\\n     * @param paidToMakerPool The amount paid to the maker pool after the flash loan.\\n     */\\n    event FlashLoan(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed amount,\\n        uint256 paid,\\n        uint256 paidToTakerPool,\\n        uint256 paidToMakerPool\\n    );\\n\\n    /**\\n     * @notice Executes a flash loan.\\n     * @param token The address of the token for the flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @param recipient The address to receive the flash loan.\\n     * @param data Additional data for the flash loan.\\n     */\\n    function flashLoan(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.\\n     * @param market The address of the market.\\n     * @param settlementToken The settlement token address.\\n     * @param binBalance The balance of funds in the bin.\\n     * @return The pending share of earnings for the specified bin.\\n     */\\n    function getPendingBinShare(\\n        address market,\\n        address settlementToken,\\n        uint256 binBalance\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ff7f0f07254c591dda3c052cc6d02b89e4bcd4e9efe79f3f483ad067cfb9906\",\"license\":\"MIT\"},\"contracts/core/interfaces/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IVault\\n * @dev Interface for the Vault contract, responsible for managing positions and liquidity.\\n */\\ninterface IVault {\\n    /**\\n     * @notice Emitted when a position is opened.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the opened position.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param protocolFee The protocol fee associated with the position.\\n     */\\n    event OnOpenPosition(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        uint256 indexed takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    );\\n\\n    /**\\n     * @notice Emitted when a position is claimed.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the claimed position.\\n     * @param recipient The address of the recipient of the settlement amount.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param settlementAmount The settlement amount received by the recipient.\\n     */\\n    event OnClaimPosition(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        address indexed recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when liquidity is added to the vault.\\n     * @param market The address of the market.\\n     * @param amount The amount of liquidity added.\\n     */\\n    event OnAddLiquidity(address indexed market, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when pending liquidity is settled.\\n     * @param market The address of the market.\\n     * @param pendingDeposit The amount of pending deposit being settled.\\n     * @param pendingWithdrawal The amount of pending withdrawal being settled.\\n     */\\n    event OnSettlePendingLiquidity(\\n        address indexed market,\\n        uint256 indexed pendingDeposit,\\n        uint256 indexed pendingWithdrawal\\n    );\\n\\n    /**\\n     * @notice Emitted when liquidity is withdrawn from the vault.\\n     * @param market The address of the market.\\n     * @param amount The amount of liquidity withdrawn.\\n     * @param recipient The address of the recipient of the withdrawn liquidity.\\n     */\\n    event OnWithdrawLiquidity(\\n        address indexed market,\\n        uint256 indexed amount,\\n        address indexed recipient\\n    );\\n\\n    /**\\n     * @notice Emitted when the keeper fee is transferred.\\n     * @param fee The amount of the transferred keeper fee as native token.\\n     * @param amount The amount of settlement token to be used for paying keeper fee.\\n     */\\n    event TransferKeeperFee(uint256 indexed fee, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when the keeper fee is transferred for a specific market.\\n     * @param market The address of the market.\\n     * @param fee The amount of the transferred keeper fee as native token.\\n     * @param amount The amount of settlement token to be used for paying keeper fee.\\n     */\\n    event TransferKeeperFee(address indexed market, uint256 indexed fee, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when the protocol fee is transferred for a specific position.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the position.\\n     * @param amount The amount of the transferred fee.\\n     */\\n    event TransferProtocolFee(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @notice Called when a position is opened by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param positionId The ID of the opened position.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param protocolFee The protocol fee associated with the position.\\n     */\\n    function onOpenPosition(\\n        address settlementToken,\\n        uint256 positionId,\\n        uint256 takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    ) external;\\n\\n    /**\\n     * @notice Called when a position is claimed by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param positionId The ID of the claimed position.\\n     * @param recipient The address that will receive the settlement amount.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param settlementAmount The amount to be settled for the position.\\n     */\\n    function onClaimPosition(\\n        address settlementToken,\\n        uint256 positionId,\\n        address recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    ) external;\\n\\n    /**\\n     * @notice Called when liquidity is added to the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param amount The amount of liquidity being added.\\n     */\\n    function onAddLiquidity(address settlementToken, uint256 amount) external;\\n\\n    /**\\n     * @notice Called when pending liquidity is settled in the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param pendingDeposit The amount of pending deposits being settled.\\n     * @param pendingWithdrawal The amount of pending withdrawals being settled.\\n     */\\n    function onSettlePendingLiquidity(\\n        address settlementToken,\\n        uint256 pendingDeposit,\\n        uint256 pendingWithdrawal\\n    ) external;\\n\\n    /**\\n     * @notice Called when liquidity is withdrawn from the vault by a market contract.\\n     * @param settlementToken The settlement token address.\\n     * @param recipient The address that will receive the withdrawn liquidity.\\n     * @param amount The amount of liquidity to be withdrawn.\\n     */\\n    function onWithdrawLiquidity(\\n        address settlementToken,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Transfers the keeper fee from the market to the specified keeper.\\n     * @param settlementToken The settlement token address.\\n     * @param keeper The address of the keeper to receive the fee.\\n     * @param fee The amount of the fee to transfer as native token.\\n     * @param margin The margin amount used for the fee payment.\\n     * @return usedFee The actual settlement token amount of fee used for the transfer.\\n     */\\n    function transferKeeperFee(\\n        address settlementToken,\\n        address keeper,\\n        uint256 fee,\\n        uint256 margin\\n    ) external returns (uint256 usedFee);\\n}\\n\",\"keccak256\":\"0x3a3d8c5034d3a473347b2fe53a7973deeab827a88f6e83fc0ab2b0a85e45e429\",\"license\":\"MIT\"},\"contracts/core/libraries/BinMargin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev The BinMargin struct represents the margin information for an LP bin.\\n * @param tradingFeeRate The trading fee rate associated with the LP bin\\n * @param amount The maker margin amount specified for the LP bin\\n */\\nstruct BinMargin {\\n    uint16 tradingFeeRate;\\n    uint256 amount;\\n}\\n\\nusing BinMarginLib for BinMargin global;\\n\\n/**\\n * @title BinMarginLib\\n * @dev The BinMarginLib library provides functions to operate on BinMargin structs.\\n */\\nlibrary BinMarginLib {\\n    using Math for uint256;\\n\\n    uint256 constant TRADING_FEE_RATE_PRECISION = 10000;\\n\\n    /**\\n     * @notice Calculates the trading fee based on the margin amount and the trading fee rate.\\n     * @param self The BinMargin struct\\n     * @param _feeProtocol The protocol fee for the market\\n     * @return The trading fee amount\\n     */\\n    function tradingFee(BinMargin memory self, uint8 _feeProtocol) internal pure returns (uint256) {\\n        uint256 _tradingFee = self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION);\\n        return _tradingFee - _protocolFee(_tradingFee, _feeProtocol);\\n    }\\n\\n    /**\\n     * @notice Calculates the protocol fee based on the margin amount and the trading fee rate.\\n     * @param self The BinMargin struct\\n     * @param _feeProtocol The protocol fee for the market\\n     * @return The protocol fee amount\\n     */\\n    function protocolFee(\\n        BinMargin memory self,\\n        uint8 _feeProtocol\\n    ) internal pure returns (uint256) {\\n        return\\n            _protocolFee(\\n                self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION),\\n                _feeProtocol\\n            );\\n    }\\n\\n    function _protocolFee(uint256 _tradingFee, uint8 _feeProtocol) private pure returns (uint256) {\\n        return _feeProtocol != 0 ? _tradingFee / _feeProtocol : 0;\\n    }\\n}\\n\",\"keccak256\":\"0xb07cb55836319b7414a9feacba79ad5bdc44bbea8abf5d2ee25d1c4aefa4a8d9\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/CLBTokenLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {FEE_RATES_LENGTH} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\n\\n/**\\n * @title CLBTokenLib\\n * @notice Provides utility functions for working with CLB tokens.\\n */\\nlibrary CLBTokenLib {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n\\n    uint256 private constant DIRECTION_PRECISION = 10 ** 10;\\n    uint16 private constant MIN_FEE_RATE = 1;\\n\\n    /**\\n     * @notice Encode the CLB token ID of ERC1155 token type\\n     * @dev If `tradingFeeRate` is negative, it adds `DIRECTION_PRECISION` to the absolute fee rate.\\n     *      Otherwise it returns the fee rate directly.\\n     * @return id The ID of ERC1155 token\\n     */\\n    function encodeId(int16 tradingFeeRate) internal pure returns (uint256) {\\n        bool long = tradingFeeRate > 0;\\n        return _encodeId(uint16(long ? tradingFeeRate : -tradingFeeRate), long);\\n    }\\n\\n    /**\\n     * @notice Decode the trading fee rate from the CLB token ID of ERC1155 token type\\n     * @dev If `id` is greater than or equal to `DIRECTION_PRECISION`,\\n     *      then it substracts `DIRECTION_PRECISION` from `id`\\n     *      and returns the negation of the substracted value.\\n     *      Otherwise it returns `id` directly.\\n     * @return tradingFeeRate The trading fee rate\\n     */\\n    function decodeId(uint256 id) internal pure returns (int16 tradingFeeRate) {\\n        if (id >= DIRECTION_PRECISION) {\\n            tradingFeeRate = -int16((id - DIRECTION_PRECISION).toUint16());\\n        } else {\\n            tradingFeeRate = int16(id.toUint16());\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the array of supported trading fee rates.\\n     * @dev This function returns the array of supported trading fee rates,\\n     *      ranging from the minimum fee rate to the maximum fee rate with step increments.\\n     * @return tradingFeeRates The array of supported trading fee rates.\\n     */\\n    function tradingFeeRates() internal pure returns (uint16[FEE_RATES_LENGTH] memory) {\\n        // prettier-ignore\\n        return [\\n            MIN_FEE_RATE, 2, 3, 4, 5, 6, 7, 8, 9, // 0.01% ~ 0.09%, step 0.01%\\n            10, 20, 30, 40, 50, 60, 70, 80, 90, // 0.1% ~ 0.9%, step 0.1%\\n            100, 200, 300, 400, 500, 600, 700, 800, 900, // 1% ~ 9%, step 1%\\n            1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000 // 10% ~ 50%, step 5%\\n        ];\\n    }\\n\\n    function tokenIds() internal pure returns (uint256[] memory) {\\n        uint16[FEE_RATES_LENGTH] memory feeRates = tradingFeeRates();\\n\\n        uint256[] memory ids = new uint256[](FEE_RATES_LENGTH * 2);\\n        for (uint256 i; i < FEE_RATES_LENGTH; ) {\\n            ids[i] = _encodeId(feeRates[i], true);\\n            ids[i + FEE_RATES_LENGTH] = _encodeId(feeRates[i], false);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return ids;\\n    }\\n\\n    function _encodeId(uint16 tradingFeeRate, bool long) private pure returns (uint256 id) {\\n        id = long ? tradingFeeRate : tradingFeeRate + DIRECTION_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0xbd995bde42a6162c1281d42e52a2def3bf74abbc97e12850d0577e405219ddca\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nuint256 constant BPS = 10000;\\nuint256 constant FEE_RATES_LENGTH = 36;\\nuint256 constant PRICE_PRECISION = 1e18;\",\"keccak256\":\"0xd14bb41459e61008626b00dd6f5eebd6669d20a280e3d1ffcb043dd401922c7c\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Errors\\n * @dev This library provides a set of error codes as string constants for handling exceptions and revert messages in the library.\\n */\\nlibrary Errors {\\n    /**\\n     * @dev Error code indicating that there is not enough free liquidity available in liquidity pool when open a new poisition.\\n     */\\n    string constant NOT_ENOUGH_FREE_LIQUIDITY = \\\"NEFL\\\";\\n\\n    /**\\n     * @dev Error code indicating that the specified amount is too small when add liquidity to each bin.\\n     */\\n    string constant TOO_SMALL_AMOUNT = \\\"TSA\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided oracle version is invalid or unsupported.\\n     */\\n    string constant INVALID_ORACLE_VERSION = \\\"IOV\\\";\\n\\n    /**\\n     * @dev Error code indicating that the specified value exceeds the allowed margin range when claim a position.\\n     */\\n    string constant EXCEED_MARGIN_RANGE = \\\"IOV\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided trading fee rate is not supported.\\n     */\\n    string constant UNSUPPORTED_TRADING_FEE_RATE = \\\"UTFR\\\";\\n\\n    /**\\n     * @dev Error code indicating that the oracle provider is already registered.\\n     */\\n    string constant ALREADY_REGISTERED_ORACLE_PROVIDER = \\\"ARO\\\";\\n\\n    /**\\n     * @dev Error code indicating that the settlement token is already registered.\\n     */\\n    string constant ALREADY_REGISTERED_TOKEN = \\\"ART\\\";\\n\\n    /**\\n     * @dev Error code indicating that the settlement token is not registered.\\n     */\\n    string constant UNREGISTERED_TOKEN = \\\"URT\\\";\\n\\n    /**\\n     * @dev Error code indicating that the interest rate has not been initialized.\\n     */\\n    string constant INTEREST_RATE_NOT_INITIALIZED = \\\"IRNI\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided interest rate exceeds the maximum allowed rate.\\n     */\\n    string constant INTEREST_RATE_OVERFLOW = \\\"IROF\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided timestamp for an interest rate is in the past.\\n     */\\n    string constant INTEREST_RATE_PAST_TIMESTAMP = \\\"IRPT\\\";\\n\\n    /**\\n     * @dev Error code indicating that the provided interest rate record cannot be appended to the existing array.\\n     */\\n    string constant INTEREST_RATE_NOT_APPENDABLE = \\\"IRNA\\\";\\n\\n    /**\\n     * @dev Error code indicating that an interest rate has already been applied and cannot be modified further.\\n     */\\n    string constant INTEREST_RATE_ALREADY_APPLIED = \\\"IRAA\\\";\\n\\n    /**\\n     * @dev Error code indicating that the position is unsettled.\\n     */\\n    string constant UNSETTLED_POSITION = \\\"USP\\\";\\n\\n    /**\\n     * @dev Error code indicating that the position quantity is invalid.\\n     */\\n    string constant INVALID_POSITION_QTY = \\\"IPQ\\\";\\n\\n    /**\\n     * @dev Error code indicating that the oracle price is not positive.\\n     */\\n    string constant NOT_POSITIVE_PRICE = \\\"NPP\\\";\\n}\\n\",\"keccak256\":\"0x2243516d87f4b064250fa810fef1caaf62544e651556c3d5326ea2f7406d1787\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/InterestRate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {BPS} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title InterestRate\\n * @notice Provides functions for managing interest rates.\\n * @dev The library allows for the initialization, appending, and removal of interest rate records,\\n *      as well as calculating interest based on these records.\\n */\\nlibrary InterestRate {\\n    using Math for uint256;\\n\\n    /**\\n     * @dev Record type\\n     * @param annualRateBPS Annual interest rate in BPS\\n     * @param beginTimestamp Timestamp when the interest rate becomes effective\\n     */\\n    struct Record {\\n        uint256 annualRateBPS;\\n        uint256 beginTimestamp;\\n    }\\n\\n    uint256 private constant MAX_RATE_BPS = BPS; // max interest rate is 100%\\n    uint256 private constant YEAR = 365 * 24 * 3600;\\n\\n    /**\\n     * @dev Ensure that the interest rate records have been initialized before certain functions can be called.\\n     *      It checks whether the length of the Record array is greater than 0.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty (it indicates that the interest rate has not been initialized).\\n     */\\n    modifier initialized(Record[] storage self) {\\n        require(self.length != 0, Errors.INTEREST_RATE_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the interest rate records.\\n     * @param self The stored record array\\n     * @param initialInterestRate The initial interest rate\\n     */\\n    function initialize(Record[] storage self, uint256 initialInterestRate) internal {\\n        self.push(Record({annualRateBPS: initialInterestRate, beginTimestamp: 0}));\\n    }\\n\\n    /**\\n     * @notice Add a new interest rate record to the array.\\n     * @dev Annual rate is not greater than the maximum rate and that the begin timestamp is in the future,\\n     *      and the new record's begin timestamp is greater than the previous record's timestamp.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_OVERFLOW` if the rate exceed the maximum allowed rate (100%).\\n     *      Throws an error with the code `Errors.INTEREST_RATE_PAST_TIMESTAMP` if the timestamp is in the past, ensuring that the interest rate period has not already started.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_APPENDABLE` if the timestamp is greater than the last recorded timestamp, ensuring that the new record is appended in chronological order.\\n     * @param self The stored record array\\n     * @param annualRateBPS The annual interest rate in BPS\\n     * @param beginTimestamp Begin timestamp of this record\\n     */\\n    function appendRecord(\\n        Record[] storage self,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) internal initialized(self) {\\n        require(annualRateBPS <= MAX_RATE_BPS, Errors.INTEREST_RATE_OVERFLOW);\\n        //slither-disable-next-line timestamp\\n        require(beginTimestamp > block.timestamp, Errors.INTEREST_RATE_PAST_TIMESTAMP);\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        require(beginTimestamp > lastRecord.beginTimestamp, Errors.INTEREST_RATE_NOT_APPENDABLE);\\n\\n        self.push(Record({annualRateBPS: annualRateBPS, beginTimestamp: beginTimestamp}));\\n    }\\n\\n    /**\\n     * @notice Remove the last interest rate record from the array.\\n     * @dev The current time must be less than the begin timestamp of the last record.\\n     *      If the array has only one record, it returns false along with an empty record.\\n     *      Otherwise, it removes the last record from the array and returns true along with the removed record.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_ALREADY_APPLIED` if the `beginTimestamp` of the last record is not in the future.\\n     * @param self The stored record array\\n     * @return removed Whether the last record is removed\\n     * @return record The removed record\\n     */\\n    function removeLastRecord(\\n        Record[] storage self\\n    ) internal initialized(self) returns (bool removed, Record memory record) {\\n        if (self.length <= 1) {\\n            // empty\\n            return (false, Record(0, 0));\\n        }\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        //slither-disable-next-line timestamp\\n        require(block.timestamp < lastRecord.beginTimestamp, Errors.INTEREST_RATE_ALREADY_APPLIED);\\n\\n        self.pop();\\n\\n        return (true, lastRecord);\\n    }\\n\\n    /**\\n     * @notice Find the interest rate record that applies to a given timestamp.\\n     * @dev It iterates through the array from the end to the beginning\\n     *      and returns the first record with a begin timestamp less than or equal to the provided timestamp.\\n     *      Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     * @param self The stored record array\\n     * @param timestamp Given timestamp\\n     * @return interestRate The record which is found\\n     * @return index The index of record\\n     */\\n    function findRecordAt(\\n        Record[] storage self,\\n        uint256 timestamp\\n    ) internal view initialized(self) returns (Record memory interestRate, uint256 index) {\\n        for (uint256 i = self.length; i != 0; ) {\\n            unchecked {\\n                index = i - 1;\\n            }\\n            interestRate = self[index];\\n\\n            if (interestRate.beginTimestamp <= timestamp) {\\n                return (interestRate, index);\\n            }\\n\\n            unchecked {\\n                i--;\\n            }\\n        }\\n\\n        return (self[0], 0); // empty result (this line is not reachable)\\n    }\\n\\n    /**\\n     * @notice Calculate the interest\\n     * @dev Throws an error with the code `Errors.INTEREST_RATE_NOT_INITIALIZED` if the array is empty.\\n     * @param self The stored record array\\n     * @param amount Token amount\\n     * @param from Begin timestamp (inclusive)\\n     * @param to End timestamp (exclusive)\\n     */\\n    function calculateInterest(\\n        Record[] storage self,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) internal view initialized(self) returns (uint256) {\\n        if (from >= to) {\\n            return 0;\\n        }\\n\\n        uint256 interest = 0;\\n\\n        uint256 endTimestamp = type(uint256).max;\\n        for (uint256 idx = self.length; idx != 0; ) {\\n            Record memory record = self[idx - 1];\\n            if (endTimestamp <= from) {\\n                break;\\n            }\\n\\n            interest += _interest(\\n                amount,\\n                record.annualRateBPS,\\n                Math.min(to, endTimestamp) - Math.max(from, record.beginTimestamp)\\n            );\\n            endTimestamp = record.beginTimestamp;\\n\\n            unchecked {\\n                idx--;\\n            }\\n        }\\n        return interest;\\n    }\\n\\n    function _interest(\\n        uint256 amount,\\n        uint256 rateBPS, // annual rate\\n        uint256 period // in seconds\\n    ) private pure returns (uint256) {\\n        return amount.mulDiv(rateBPS * period, BPS * YEAR, Math.Rounding.Up);\\n    }\\n}\\n\",\"keccak256\":\"0x1ba597a94b3e70bc851d88e7340609e46e3f56cc971f5969a62c2a1264adab0a\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/LpContext.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\n\\n/**\\n * @dev Represents the context information required for LP bin operations.\\n * @param oracleProvider The Oracle Provider contract used for price feed\\n * @param interestCalculator The Interest Calculator contract used for interest calculations\\n * @param vault The Chromatic Vault contract responsible for managing liquidity and margin\\n * @param clbToken The CLB token contract that represents LP ownership in the pool\\n * @param market The address of market contract\\n * @param settlementToken The address of the settlement token used in the market\\n * @param tokenPrecision The precision of the settlement token used in the market\\n * @param _currentVersionCache Cached instance of the current oracle version\\n */\\nstruct LpContext {\\n    IOracleProvider oracleProvider;\\n    IInterestCalculator interestCalculator;\\n    IChromaticVault vault;\\n    ICLBToken clbToken;\\n    address market;\\n    address settlementToken;\\n    uint256 tokenPrecision;\\n    IOracleProvider.OracleVersion _currentVersionCache;\\n}\\n\\nusing LpContextLib for LpContext global;\\n\\n/**\\n * @title LpContextLib\\n * @notice Provides functions that operate on the `LpContext` struct\\n */\\nlibrary LpContextLib {\\n    /**\\n     * @notice Syncs the oracle version used by the market.\\n     * @param self The memory instance of `LpContext` struct\\n     */\\n    function syncOracleVersion(LpContext memory self) internal {\\n        self._currentVersionCache = self.oracleProvider.sync();\\n    }\\n\\n    /**\\n     * @notice Retrieves the current oracle version used by the market\\n     * @dev If the `_currentVersionCache` has been initialized, then returns it.\\n     *      If not, it calls the `currentVersion` function on the `oracleProvider of the market\\n     *      to fetch the current version and stores it in the cache,\\n     *      and then returns the current version.\\n     * @param self The memory instance of `LpContext` struct\\n     * @return OracleVersion The current oracle version\\n     */\\n    function currentOracleVersion(\\n        LpContext memory self\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._currentVersionCache.version == 0) {\\n            //slither-disable-next-line calls-loop\\n            self._currentVersionCache = self.oracleProvider.currentVersion();\\n        }\\n\\n        return self._currentVersionCache;\\n    }\\n\\n    /**\\n     * @notice Retrieves the oracle version at a specific version number\\n     * @dev If the `_currentVersionCache` matches the requested version, then returns it.\\n     *      Otherwise, it calls the `atVersion` function on the `oracleProvider` of the market\\n     *      to fetch the desired version.\\n     * @param self The memory instance of `LpContext` struct\\n     * @param version The requested version number\\n     * @return OracleVersion The oracle version at the requested version number\\n     */\\n    function oracleVersionAt(\\n        LpContext memory self,\\n        uint256 version\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._currentVersionCache.version == version) {\\n            return self._currentVersionCache;\\n        }\\n        return self.oracleProvider.atVersion(version);\\n    }\\n\\n    /**\\n     * @notice Calculates the interest accrued for a given amount of settlement tokens\\n               within a specified time range.\\n     * @dev This function internally calls the `calculateInterest` function on the `interestCalculator` contract.\\n     * @param self The memory instance of the `LpContext` struct.\\n     * @param amount The amount of settlement tokens for which the interest needs to be calculated.\\n     * @param from The starting timestamp of the time range (inclusive).\\n     * @param to The ending timestamp of the time range (exclusive).\\n     * @return The accrued interest as a `uint256` value.\\n     */\\n    function calculateInterest(\\n        LpContext memory self,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal view returns (uint256) {\\n        //slither-disable-next-line calls-loop\\n        return\\n            amount == 0 || from >= to\\n                ? 0\\n                : self.interestCalculator.calculateInterest(self.settlementToken, amount, from, to);\\n    }\\n\\n    /**\\n     * @notice Checks if an oracle version is in the past.\\n     * @param self The memory instance of the `LpContext` struct.\\n     * @param oracleVersion The oracle version to check.\\n     * @return A boolean value indicating whether the oracle version is in the past.\\n     */\\n    function isPastVersion(\\n        LpContext memory self,\\n        uint256 oracleVersion\\n    ) internal view returns (bool) {\\n        return oracleVersion != 0 && oracleVersion < self.currentOracleVersion().version;\\n    }\\n}\\n\",\"keccak256\":\"0x56ff062a6341949cf9ca971571c279b23f843646855699550c6bd0ea85f6e5ec\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/LpReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\n\\n/**\\n * @dev The LpAction enum represents the types of LP actions that can be performed.\\n */\\nenum LpAction {\\n    ADD_LIQUIDITY,\\n    REMOVE_LIQUIDITY\\n}\\n\\n/**\\n * @dev The LpReceipt struct represents a receipt of an LP action performed.\\n * @param id An identifier for the receipt\\n * @param oracleVersion The oracle version associated with the action\\n * @param amount The amount involved in the action,\\n *        when the action is `ADD_LIQUIDITY`, this value represents the amount of settlement tokens\\n *        when the action is `REMOVE_LIQUIDITY`, this value represents the amount of CLB tokens\\n * @param recipient The address of the recipient of the action\\n * @param action An enumeration representing the type of LP action performed (ADD_LIQUIDITY or REMOVE_LIQUIDITY)\\n * @param tradingFeeRate The trading fee rate associated with the LP action\\n */\\nstruct LpReceipt {\\n    uint256 id;\\n    uint256 oracleVersion;\\n    uint256 amount;\\n    address recipient;\\n    LpAction action;\\n    int16 tradingFeeRate;\\n}\\n\\nusing LpReceiptLib for LpReceipt global;\\n\\n/**\\n * @title LpReceiptLib\\n * @notice Provides functions that operate on the `LpReceipt` struct\\n */\\nlibrary LpReceiptLib {\\n    /**\\n     * @notice Computes the ID of the CLBToken contract based on the trading fee rate.\\n     * @param self The LpReceipt struct.\\n     * @return The ID of the CLBToken contract.\\n     */\\n    function clbTokenId(LpReceipt memory self) internal pure returns (uint256) {\\n        return CLBTokenLib.encodeId(self.tradingFeeRate);\\n    }\\n}\\n\",\"keccak256\":\"0x5c4f467639892f5005338012d3f961edb6d46f15003a0ce12c89a9c40286426b\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/MarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport {IChromaticMarketFactory} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\nimport {ILiquidator} from \\\"@chromatic-protocol/contracts/core/interfaces/ILiquidator.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {IKeeperFeePayer} from \\\"@chromatic-protocol/contracts/core/interfaces/IKeeperFeePayer.sol\\\";\\nimport {LiquidityPool} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/LiquidityPool.sol\\\";\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\nimport {BinMargin} from \\\"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\\\";\\n\\nstruct MarketStorage {\\n    IChromaticMarketFactory factory;\\n    IOracleProvider oracleProvider;\\n    IERC20Metadata settlementToken;\\n    ICLBToken clbToken;\\n    ILiquidator liquidator;\\n    IChromaticVault vault;\\n    IKeeperFeePayer keeperFeePayer;\\n    LiquidityPool liquidityPool;\\n    uint8 feeProtocol;\\n}\\n\\nstruct LpReceiptStorage {\\n    uint256 lpReceiptId;\\n    mapping(uint256 => LpReceipt) lpReceipts;\\n}\\n\\nstruct PositionStorage {\\n    uint256 positionId;\\n    mapping(uint256 => Position) positions;\\n}\\n\\nlibrary MarketStorageLib {\\n    bytes32 constant MARKET_STORAGE_POSITION = keccak256(\\\"protocol.chromatic.market.storage\\\");\\n\\n    function marketStorage() internal pure returns (MarketStorage storage ms) {\\n        bytes32 position = MARKET_STORAGE_POSITION;\\n        assembly {\\n            ms.slot := position\\n        }\\n    }\\n}\\n\\nusing LpReceiptStorageLib for LpReceiptStorage global;\\n\\nlibrary LpReceiptStorageLib {\\n    bytes32 constant LP_RECEIPT_STORAGE_POSITION =\\n        keccak256(\\\"protocol.chromatic.lpreceipt.storage\\\");\\n\\n    function lpReceiptStorage() internal pure returns (LpReceiptStorage storage ls) {\\n        bytes32 position = LP_RECEIPT_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function nextId(LpReceiptStorage storage self) internal returns (uint256 id) {\\n        id = ++self.lpReceiptId;\\n    }\\n\\n    function setReceipt(LpReceiptStorage storage self, LpReceipt memory receipt) internal {\\n        self.lpReceipts[receipt.id] = receipt;\\n    }\\n\\n    function getReceipt(\\n        LpReceiptStorage storage self,\\n        uint256 receiptId\\n    ) internal view returns (LpReceipt memory receipt) {\\n        receipt = self.lpReceipts[receiptId];\\n    }\\n\\n    function deleteReceipt(LpReceiptStorage storage self, uint256 receiptId) internal {\\n        delete self.lpReceipts[receiptId];\\n    }\\n\\n    function deleteReceipts(LpReceiptStorage storage self, uint256[] memory receiptIds) internal {\\n        for (uint256 i; i < receiptIds.length; ) {\\n            delete self.lpReceipts[receiptIds[i]];\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n}\\n\\nusing PositionStorageLib for PositionStorage global;\\n\\nlibrary PositionStorageLib {\\n    bytes32 constant POSITION_STORAGE_POSITION = keccak256(\\\"protocol.chromatic.position.storage\\\");\\n\\n    function positionStorage() internal pure returns (PositionStorage storage ls) {\\n        bytes32 position = POSITION_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function nextId(PositionStorage storage self) internal returns (uint256 id) {\\n        id = ++self.positionId;\\n    }\\n\\n    function setPosition(PositionStorage storage self, Position memory position) internal {\\n        Position storage _p = self.positions[position.id];\\n\\n        _p.id = position.id;\\n        _p.openVersion = position.openVersion;\\n        _p.closeVersion = position.closeVersion;\\n        _p.qty = position.qty;\\n        _p.openTimestamp = position.openTimestamp;\\n        _p.closeTimestamp = position.closeTimestamp;\\n        _p.takerMargin = position.takerMargin;\\n        _p.owner = position.owner;\\n        _p._feeProtocol = position._feeProtocol;\\n        // can not convert memory array to storage array\\n        delete _p._binMargins;\\n        for (uint i; i < position._binMargins.length; ) {\\n            BinMargin memory binMargin = position._binMargins[i];\\n            if (binMargin.amount != 0) {\\n                _p._binMargins.push(position._binMargins[i]);\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function getPosition(\\n        PositionStorage storage self,\\n        uint256 positionId\\n    ) internal view returns (Position memory position) {\\n        position = self.positions[positionId];\\n    }\\n\\n    function getStoragePosition(\\n        PositionStorage storage self,\\n        uint256 positionId\\n    ) internal view returns (Position storage position) {\\n        position = self.positions[positionId];\\n    }\\n\\n    function deletePosition(PositionStorage storage self, uint256 positionId) internal {\\n        delete self.positions[positionId];\\n    }\\n}\\n\",\"keccak256\":\"0x3d0eb5a3b7dfbb8e8a3af5fbf1f06c4349f7839db309f3b80d379abd3190f74d\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {BinMargin} from \\\"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\\\";\\n\\n/**\\n * @dev The Position struct represents a trading position.\\n * @param id The position identifier\\n * @param openVersion The version of the oracle when the position was opened\\n * @param closeVersion The version of the oracle when the position was closed\\n * @param qty The quantity of the position\\n * @param openTimestamp The timestamp when the position was opened\\n * @param closeTimestamp The timestamp when the position was closed\\n * @param takerMargin The amount of collateral that a trader must provide\\n * @param owner The owner of the position, usually it is the account address of trader\\n * @param _binMargins The bin margins for the position, it represents the amount of collateral for each bin\\n * @param _feeProtocol The protocol fee for the market\\n */\\nstruct Position {\\n    uint256 id;\\n    uint256 openVersion;\\n    uint256 closeVersion;\\n    int256 qty;\\n    uint256 openTimestamp;\\n    uint256 closeTimestamp;\\n    uint256 takerMargin;\\n    address owner;\\n    BinMargin[] _binMargins;\\n    uint8 _feeProtocol;\\n}\\n\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Provides functions that operate on the `Position` struct\\n */\\nlibrary PositionLib {\\n    // using Math for uint256;\\n    // using SafeCast for uint256;\\n    // using SignedMath for int256;\\n\\n    /**\\n     * @notice Calculates the entry price of the position based on the position's open oracle version\\n     * @dev It fetches oracle price from `IOracleProvider`\\n     *      at the settle version calculated based on the position's open oracle version\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return uint256 The entry price\\n     */\\n    function entryPrice(\\n        Position memory self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.openVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the exit price of the position based on the position's close oracle version\\n     * @dev It fetches oracle price from `IOracleProvider`\\n     *      at the settle version calculated based on the position's close oracle version\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return uint256 The exit price\\n     */\\n    function exitPrice(Position memory self, LpContext memory ctx) internal view returns (uint256) {\\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.closeVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the profit or loss of the position based on the close oracle version and the qty\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return int256 The profit or loss\\n     */\\n    function pnl(Position memory self, LpContext memory ctx) internal view returns (int256) {\\n        return\\n            self.closeVersion > self.openVersion\\n                ? PositionUtil.pnl(self.qty, self.entryPrice(ctx), self.exitPrice(ctx))\\n                : int256(0);\\n    }\\n\\n    /**\\n     * @notice Calculates the total margin required for the makers of the position\\n     * @dev The maker margin is calculated by summing up the amounts of all bin margins\\n     *      in the `_binMargins` array\\n     * @param self The memory instance of the `Position` struct\\n     * @return margin The maker margin\\n     */\\n    function makerMargin(Position memory self) internal pure returns (uint256 margin) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            margin += self._binMargins[i].amount;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total trading fee for the position\\n     * @dev The trading fee is calculated by summing up the trading fees of all bin margins\\n     *      in the `_binMargins` array\\n     * @param self The memory instance of the `Position` struct\\n     * @return fee The trading fee\\n     */\\n    function tradingFee(Position memory self) internal pure returns (uint256 fee) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            fee += self._binMargins[i].tradingFee(self._feeProtocol);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total protocol fee for a position.\\n     * @param self The Position struct representing the position.\\n     * @return fee The total protocol fee amount.\\n     */\\n    function protocolFee(Position memory self) internal pure returns (uint256 fee) {\\n        for (uint256 i; i < self._binMargins.length; ) {\\n            fee += self._binMargins[i].protocolFee(self._feeProtocol);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns an array of BinMargin instances\\n     *         representing the bin margins for the position\\n     * @param self The memory instance of the `Position` struct\\n     * @return margins The bin margins for the position\\n     */\\n    function binMargins(Position memory self) internal pure returns (BinMargin[] memory margins) {\\n        margins = self._binMargins;\\n    }\\n\\n    /**\\n     * @notice Sets the `_binMargins` array for the position\\n     * @param self The memory instance of the `Position` struct\\n     * @param margins The bin margins for the position\\n     */\\n    function setBinMargins(Position memory self, BinMargin[] memory margins) internal pure {\\n        self._binMargins = margins;\\n    }\\n}\\n\",\"keccak256\":\"0x8ce12ab9d3fe83b8b9dc46700ff9ee13bb12fd6d41f781f9f8ac7a3d3a0084a3\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/PositionUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PRICE_PRECISION} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title PositionUtil\\n * @notice Provides utility functions for managing positions\\n */\\nlibrary PositionUtil {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n\\n    /**\\n     * @notice Returns next oracle version to settle\\n     * @dev It adds 1 to the `oracleVersion`\\n     *      and ensures that the `oracleVersion` is greater than 0 using a require statement.\\n     *      Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if the `oracleVersion` is not valid.\\n     * @param oracleVersion Input oracle version\\n     * @return uint256 Next oracle version to settle\\n     */\\n    function settleVersion(uint256 oracleVersion) internal pure returns (uint256) {\\n        require(oracleVersion != 0, Errors.INVALID_ORACLE_VERSION);\\n        return oracleVersion + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\\n     * @dev It calls another overloaded `settlePrice` function\\n     *      with an additional `OracleVersion` parameter,\\n     *      passing the `currentVersion` obtained from the `provider`\\n     * @param provider The oracle provider\\n     * @param oracleVersion The oracle version of position\\n     * @return uint256 The calculated price to settle\\n     */\\n    function settlePrice(\\n        IOracleProvider provider,\\n        uint256 oracleVersion\\n    ) internal view returns (uint256) {\\n        return settlePrice(provider, oracleVersion, provider.currentVersion());\\n    }\\n\\n    /**\\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\\n     * @dev It calculates the price by considering the `settleVersion`\\n     *      and the `currentVersion` obtained from the `IOracleProvider`.\\n     *      It ensures that the settle version is not greater than the current version;\\n     *      otherwise, it triggers an error with the message `Errors.UNSETTLED_POSITION`.\\n     *      It retrieves the corresponding `OracleVersion` using `atVersion` from the `IOracleProvider`,\\n     *      and then calls `oraclePrice` to obtain the price.\\n     * @param provider The oracle provider\\n     * @param oracleVersion The oracle version of position\\n     * @param currentVersion The current oracle version\\n     * @return uint256 The calculated entry price to settle\\n     */\\n    function settlePrice(\\n        IOracleProvider provider,\\n        uint256 oracleVersion,\\n        IOracleProvider.OracleVersion memory currentVersion\\n    ) internal view returns (uint256) {\\n        uint256 _settleVersion = settleVersion(oracleVersion);\\n        require(_settleVersion <= currentVersion.version, Errors.UNSETTLED_POSITION);\\n\\n        //slither-disable-next-line calls-loop\\n        IOracleProvider.OracleVersion memory _oracleVersion = _settleVersion ==\\n            currentVersion.version\\n            ? currentVersion\\n            : provider.atVersion(_settleVersion);\\n        return oraclePrice(_oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Extracts the price value from an `OracleVersion` struct\\n     * @dev If the price is not positive value, it triggers an error with the message `Errors.NOT_POSITIVE_PRICE`.\\n     * @param oracleVersion The memory instance of `OracleVersion` struct\\n     * @return uint256 The price value of `oracleVersion`\\n     */\\n    function oraclePrice(\\n        IOracleProvider.OracleVersion memory oracleVersion\\n    ) internal pure returns (uint256) {\\n        require(oracleVersion.price > 0, Errors.NOT_POSITIVE_PRICE);\\n        return oracleVersion.price.abs();\\n    }\\n\\n    /**\\n     * @notice Calculates the profit or loss (PnL) for a position based on the quantity, entry price, and exit price\\n     * @dev It first calculates the price difference (`delta`) between the exit price and the entry price.\\n     *      If the quantity is negative, indicating short position, it adjusts the `delta` to reflect a negative change.\\n     *      The function then calculates the absolute PnL by multiplying the absolute value of the quantity\\n     *          with the absolute value of the `delta`, divided by the entry price.\\n     *      Finally, if `delta` is negative, indicating a loss, the absolute PnL is negated to represent a negative value.\\n     * @param qty The quantity of the position\\n     * @param _entryPrice The entry price of the position\\n     * @param _exitPrice The exit price of the position\\n     * @return int256 The profit or loss\\n     */\\n    function pnl(\\n        int256 qty, // as token precision\\n        uint256 _entryPrice,\\n        uint256 _exitPrice\\n    ) internal pure returns (int256) {\\n        if (qty == 0 || _entryPrice == _exitPrice) return 0;\\n\\n        int256 delta = _exitPrice > _entryPrice\\n            ? (_exitPrice - _entryPrice).toInt256()\\n            : -(_entryPrice - _exitPrice).toInt256();\\n        if (qty < 0) delta *= -1;\\n\\n        int256 absPnl = qty.abs().mulDiv(delta.abs(), _entryPrice).toInt256();\\n\\n        return delta < 0 ? -absPnl : absPnl;\\n    }\\n\\n    /**\\n     * @notice Verifies the validity of a position quantity added to the bin\\n     * @dev It ensures that the sign of the current quantity of the bin's position\\n     *      and the added quantity are same or zero.\\n     *      If the condition is not met, it triggers an error with the message `Errors.INVALID_POSITION_QTY`.\\n     * @param currentQty The current quantity of the bin's pending position\\n     * @param addedQty The position quantity added\\n     */\\n    function checkAddPositionQty(int256 currentQty, int256 addedQty) internal pure {\\n        require(\\n            !((currentQty > 0 && addedQty <= 0) || (currentQty < 0 && addedQty >= 0)),\\n            Errors.INVALID_POSITION_QTY\\n        );\\n    }\\n\\n    /**\\n     * @notice Verifies the validity of a position quantity removed from the bin\\n     * @dev It ensures that the sign of the current quantity of the bin's position\\n     *      and the removed quantity are same or zero,\\n     *      and the absolute removed quantity is not greater than the absolute current quantity.\\n     *      If the condition is not met, it triggers an error with the message `Errors.INVALID_POSITION_QTY`.\\n     * @param currentQty The current quantity of the bin's position\\n     * @param removeQty The position quantity removed\\n     */\\n    function checkRemovePositionQty(int256 currentQty, int256 removeQty) internal pure {\\n        require(\\n            !((currentQty == 0) ||\\n                (removeQty == 0) ||\\n                (currentQty > 0 && removeQty > currentQty) ||\\n                (currentQty < 0 && removeQty < currentQty)),\\n            Errors.INVALID_POSITION_QTY\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the transaction amount based on the quantity and price\\n     * @param qty The quantity of the position\\n     * @param price The price of the position\\n     * @return uint256 The transaction amount\\n     */\\n    function transactionAmount(int256 qty, uint256 price) internal pure returns (uint256) {\\n        return qty.abs().mulDiv(price, PRICE_PRECISION);\\n    }\\n}\\n\",\"keccak256\":\"0xd65fc99fdb27f0d40c91906514029f9ebc9a658ed45e754266c76151ec6dbefe\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/liquidity/AccruedInterest.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\n\\n/**\\n * @dev Structure for tracking accumulated interest\\n * @param accumulatedAt The timestamp at which the interest was last accumulated.\\n * @param accumulatedAmount The total amount of interest accumulated.\\n */\\nstruct AccruedInterest {\\n    uint256 accumulatedAt;\\n    uint256 accumulatedAmount;\\n}\\n\\n/**\\n * @title AccruedInterestLib\\n * @notice Tracks the accumulated interest for a given token amount and period of time\\n */\\nlibrary AccruedInterestLib {\\n    /**\\n     * @notice Accumulates interest for a given token amount and period of time\\n     * @param self The AccruedInterest storage\\n     * @param ctx The LpContext instance for interest calculation\\n     * @param tokenAmount The amount of tokens to calculate interest for\\n     * @param until The timestamp until which interest should be accumulated\\n     */\\n    function accumulate(\\n        AccruedInterest storage self,\\n        LpContext memory ctx,\\n        uint256 tokenAmount,\\n        uint256 until\\n    ) internal {\\n        uint256 accumulatedAt = self.accumulatedAt;\\n        // check if the interest is already accumulated for the given period of time.\\n        if (until <= accumulatedAt) return;\\n\\n        if (tokenAmount != 0) {\\n            // calculate the interest for the given period of time and accumulate it\\n            self.accumulatedAmount += ctx.calculateInterest(tokenAmount, accumulatedAt, until);\\n        }\\n        // update the timestamp at which the interest was last accumulated.\\n        self.accumulatedAt = until;\\n    }\\n\\n    /**\\n     * @notice Deducts interest from the accumulated interest.\\n     * @param self The AccruedInterest storage.\\n     * @param amount The amount of interest to deduct.\\n     */\\n    function deduct(AccruedInterest storage self, uint256 amount) internal {\\n        uint256 accumulatedAmount = self.accumulatedAmount;\\n        // check if the amount is greater than the accumulated interest.\\n        if (amount >= accumulatedAmount) {\\n            self.accumulatedAmount = 0;\\n        } else {\\n            self.accumulatedAmount = accumulatedAmount - amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the accumulated interest for a given token amount and period of time\\n     * @param self The AccruedInterest storage\\n     * @param ctx The LpContext instance for interest calculation\\n     * @param tokenAmount The amount of tokens to calculate interest for\\n     * @param until The timestamp until which interest should be accumulated\\n     * @return The accumulated interest amount\\n     */\\n    function calculateInterest(\\n        AccruedInterest storage self,\\n        LpContext memory ctx,\\n        uint256 tokenAmount,\\n        uint256 until\\n    ) internal view returns (uint256) {\\n        if (tokenAmount == 0) return 0;\\n\\n        uint256 accumulatedAt = self.accumulatedAt;\\n        uint256 accumulatedAmount = self.accumulatedAmount;\\n        if (until <= accumulatedAt) return accumulatedAmount;\\n\\n        return accumulatedAmount + ctx.calculateInterest(tokenAmount, accumulatedAt, until);\\n    }\\n}\\n\",\"keccak256\":\"0x03dd608dd1c3edcddb6fd908713d3c6e3a993be7bd87674308e3c50a889a5d9f\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/liquidity/BinClosedPosition.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {AccruedInterest, AccruedInterestLib} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/AccruedInterest.sol\\\";\\nimport {BinClosingPosition, BinClosingPositionLib} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/BinClosingPosition.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/PositionParam.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {ClosingPosition} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\n\\n/**\\n * @dev Represents a closed position within an LiquidityBin.\\n */\\nstruct BinClosedPosition {\\n    uint256 _totalMakerMargin;\\n    uint256 _totalTakerMargin;\\n    BinClosingPosition _closing;\\n    EnumerableSet.UintSet _waitingVersions;\\n    mapping(uint256 => _ClaimWaitingPosition) _waitingPositions;\\n    AccruedInterest _accruedInterest;\\n}\\n\\n/**\\n * @dev Represents the accumulated values of the waiting positions to be claimed\\n *      for a specific version within BinClosedPosition.\\n */\\nstruct _ClaimWaitingPosition {\\n    int256 totalQty;\\n    uint256 totalEntryAmount;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n}\\n\\n/**\\n * @title BinClosedPositionLib\\n * @notice A library that provides functions to manage the closed position within an LiquidityBin.\\n */\\nlibrary BinClosedPositionLib {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using AccruedInterestLib for AccruedInterest;\\n    using BinClosingPositionLib for BinClosingPosition;\\n\\n    /**\\n     * @notice Settles the closing position within the BinClosedPosition.\\n     * @dev If the closeVersion is not set or is equal to the current oracle version, no action is taken.\\n     *      Otherwise, the waiting position is stored and the accrued interest is accumulated.\\n     * @param self The BinClosedPosition storage.\\n     * @param ctx The LpContext memory.\\n     */\\n    function settleClosingPosition(BinClosedPosition storage self, LpContext memory ctx) internal {\\n        uint256 closeVersion = self._closing.closeVersion;\\n        if (!ctx.isPastVersion(closeVersion)) return;\\n\\n        _ClaimWaitingPosition memory waitingPosition = _ClaimWaitingPosition({\\n            totalQty: self._closing.totalQty,\\n            totalEntryAmount: self._closing.totalEntryAmount,\\n            totalMakerMargin: self._closing.totalMakerMargin,\\n            totalTakerMargin: self._closing.totalTakerMargin\\n        });\\n\\n        // accumulate interest before update `_totalMakerMargin`\\n        self._accruedInterest.accumulate(ctx, self._totalMakerMargin, block.timestamp);\\n\\n        self._totalMakerMargin += waitingPosition.totalMakerMargin;\\n        self._totalTakerMargin += waitingPosition.totalTakerMargin;\\n        //slither-disable-next-line unused-return\\n        self._waitingVersions.add(closeVersion);\\n        self._waitingPositions[closeVersion] = waitingPosition;\\n\\n        self._closing.settleAccruedInterest(ctx);\\n        self._accruedInterest.accumulatedAmount += self._closing.accruedInterest.accumulatedAmount;\\n\\n        delete self._closing;\\n    }\\n\\n    /**\\n     * @notice Closes the position within the BinClosedPosition.\\n     * @dev Delegates the onClosePosition function call to the underlying BinClosingPosition.\\n     * @param self The BinClosedPosition storage.\\n     * @param ctx The LpContext memory.\\n     * @param param The PositionParam memory.\\n     */\\n    function onClosePosition(\\n        BinClosedPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        self._closing.onClosePosition(ctx, param);\\n    }\\n\\n    /**\\n     * @notice Claims the position within the BinClosedPosition.\\n     * @dev If the closeVersion is equal to the BinClosingPosition's closeVersion, the claim is made directly.\\n     *      Otherwise, the claim is made from the waiting position, and if exhausted, the waiting position is removed.\\n     *      The accrued interest is accumulated and deducted accordingly.\\n     * @param self The BinClosedPosition storage.\\n     * @param ctx The LpContext memory.\\n     * @param param The PositionParam memory.\\n     */\\n    function onClaimPosition(\\n        BinClosedPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        uint256 closeVersion = param.closeVersion;\\n\\n        if (closeVersion == self._closing.closeVersion) {\\n            self._closing.onClaimPosition(ctx, param);\\n        } else {\\n            bool exhausted = _onClaimPosition(self._waitingPositions[closeVersion], ctx, param);\\n\\n            // accumulate interest before update `_totalMakerMargin`\\n            self._accruedInterest.accumulate(ctx, self._totalMakerMargin, block.timestamp);\\n\\n            self._totalMakerMargin -= param.makerMargin;\\n            self._totalTakerMargin -= param.takerMargin;\\n            self._accruedInterest.deduct(param.calculateInterest(ctx, block.timestamp));\\n\\n            if (exhausted) {\\n                //slither-disable-next-line unused-return\\n                self._waitingVersions.remove(closeVersion);\\n                delete self._waitingPositions[closeVersion];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Claims the position from the waiting position within the BinClosedPosition.\\n     *      Updates the waiting position and returns whether the waiting position is exhausted.\\n     * @param waitingPosition The waiting position storage.\\n     * @param ctx The LpContext memory.\\n     * @param param The PositionParam memory.\\n     * @return exhausted Whether the waiting position is exhausted.\\n     */\\n    function _onClaimPosition(\\n        _ClaimWaitingPosition storage waitingPosition,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) private returns (bool exhausted) {\\n        int256 totalQty = waitingPosition.totalQty;\\n        int256 qty = param.qty;\\n        PositionUtil.checkRemovePositionQty(totalQty, qty);\\n        if (totalQty == qty) return true;\\n\\n        waitingPosition.totalQty = totalQty - qty;\\n        waitingPosition.totalEntryAmount -= param.entryAmount(ctx);\\n        waitingPosition.totalMakerMargin -= param.makerMargin;\\n        waitingPosition.totalTakerMargin -= param.takerMargin;\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns the total maker margin for a liquidity bin closed position.\\n     * @param self The BinClosedPosition storage struct.\\n     * @return uint256 The total maker margin.\\n     */\\n    function totalMakerMargin(BinClosedPosition storage self) internal view returns (uint256) {\\n        return self._totalMakerMargin + self._closing.totalMakerMargin;\\n    }\\n\\n    /**\\n     * @notice Returns the total taker margin for a liquidity bin closed position.\\n     * @param self The BinClosedPosition storage struct.\\n     * @return uint256 The total taker margin.\\n     */\\n    function totalTakerMargin(BinClosedPosition storage self) internal view returns (uint256) {\\n        return self._totalTakerMargin + self._closing.totalTakerMargin;\\n    }\\n\\n    /**\\n     * @dev Retrieves the closing position information.\\n     * @param self The reference to the BinClosedPosition struct.\\n     * @return closingPosition An instance of ClosingPosition representing the closing position information.\\n     */\\n    function closingPosition(\\n        BinClosedPosition storage self\\n    ) internal view returns (ClosingPosition memory) {\\n        return\\n            ClosingPosition({\\n                closeVersion: self._closing.closeVersion,\\n                totalQty: self._closing.totalQty,\\n                totalEntryAmount: self._closing.totalEntryAmount,\\n                totalMakerMargin: self._closing.totalMakerMargin,\\n                totalTakerMargin: self._closing.totalTakerMargin\\n            });\\n    }\\n\\n    /**\\n     * @dev Calculates the current interest for a liquidity bin closed position.\\n     * @param self The BinClosedPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @return uint256 The current interest.\\n     */\\n    function currentInterest(\\n        BinClosedPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return _currentInterest(self, ctx) + self._closing.currentInterest(ctx);\\n    }\\n\\n    /**\\n     * @dev Calculates the current interest for a liquidity bin closed position without closing position.\\n     * @param self The BinClosedPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @return uint256 The current interest.\\n     */\\n    function _currentInterest(\\n        BinClosedPosition storage self,\\n        LpContext memory ctx\\n    ) private view returns (uint256) {\\n        return\\n            self._accruedInterest.calculateInterest(ctx, self._totalMakerMargin, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x3a4c2d266b6f812cd7331444a7b7188ab5c7b87413496c0301bd5f48776acc09\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/liquidity/BinClosingPosition.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {AccruedInterest, AccruedInterestLib} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/AccruedInterest.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/PositionParam.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @dev Represents the closing position within an LiquidityBin.\\n * @param closeVersion The oracle version when the position was closed.\\n * @param totalQty The total quantity of the closing position.\\n * @param totalEntryAmount The total entry amount of the closing position.\\n * @param totalMakerMargin The total maker margin of the closing position.\\n * @param totalTakerMargin The total taker margin of the closing position.\\n * @param accruedInterest The accumulated interest of the closing position.\\n */\\nstruct BinClosingPosition {\\n    uint256 closeVersion;\\n    int256 totalQty;\\n    uint256 totalEntryAmount;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n    AccruedInterest accruedInterest;\\n}\\n\\n/**\\n * @title BinClosingPositionLib\\n * @notice A library that provides functions to manage the closing position within an LiquidityBin.\\n */\\nlibrary BinClosingPositionLib {\\n    using AccruedInterestLib for AccruedInterest;\\n\\n    /**\\n     * @notice Settles the accumulated interest of the closing position.\\n     * @param self The BinClosingPosition storage.\\n     * @param ctx The LpContext.\\n     */\\n    function settleAccruedInterest(BinClosingPosition storage self, LpContext memory ctx) internal {\\n        self.accruedInterest.accumulate(ctx, self.totalMakerMargin, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Handles the closing of a position.\\n     * @dev Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if the `closeVersion` is not valid.\\n     * @param self The BinClosingPosition storage.\\n     * @param ctx The LpContext.\\n     * @param param The position parameters.\\n     */\\n    function onClosePosition(\\n        BinClosingPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        uint256 closeVersion = self.closeVersion;\\n        require(\\n            closeVersion == 0 || closeVersion == param.closeVersion,\\n            Errors.INVALID_ORACLE_VERSION\\n        );\\n\\n        int256 totalQty = self.totalQty;\\n        int256 qty = param.qty;\\n        PositionUtil.checkAddPositionQty(totalQty, qty);\\n\\n        // accumulate interest before update `totalMakerMargin`\\n        settleAccruedInterest(self, ctx);\\n\\n        self.closeVersion = param.closeVersion;\\n        self.totalQty = totalQty + qty;\\n        self.totalEntryAmount += param.entryAmount(ctx);\\n        self.totalMakerMargin += param.makerMargin;\\n        self.totalTakerMargin += param.takerMargin;\\n        self.accruedInterest.accumulatedAmount += param.calculateInterest(ctx, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Handles the claiming of a position.\\n     * @dev Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if the `closeVersion` is not valid.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     * @param param The position parameters.\\n     */\\n    function onClaimPosition(\\n        BinClosingPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        require(self.closeVersion == param.closeVersion, Errors.INVALID_ORACLE_VERSION);\\n\\n        int256 totalQty = self.totalQty;\\n        int256 qty = param.qty;\\n        PositionUtil.checkRemovePositionQty(totalQty, qty);\\n\\n        // accumulate interest before update `totalMakerMargin`\\n        settleAccruedInterest(self, ctx);\\n\\n        self.totalQty = totalQty - qty;\\n        self.totalEntryAmount -= param.entryAmount(ctx);\\n        self.totalMakerMargin -= param.makerMargin;\\n        self.totalTakerMargin -= param.takerMargin;\\n        self.accruedInterest.deduct(param.calculateInterest(ctx, block.timestamp));\\n    }\\n\\n    /**\\n     * @notice Calculates the current accrued interest of the closing position.\\n     * @param self The BinClosingPosition storage.\\n     * @param ctx The LpContext.\\n     * @return uint256 The current accrued interest.\\n     */\\n    function currentInterest(\\n        BinClosingPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return self.accruedInterest.calculateInterest(ctx, self.totalMakerMargin, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xd1a4721dbff5bd57b415ba914f711ab7681da3e7996ee3216f84bf566e563f59\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/liquidity/BinLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {DoubleEndedQueue} from \\\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\nimport {PendingLiquidity, ClaimableLiquidity} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @dev Represents the liquidity information within an LiquidityBin.\\n */\\nstruct BinLiquidity {\\n    uint256 total;\\n    PendingLiquidity _pending;\\n    mapping(uint256 => _ClaimMinting) _claimMintings;\\n    mapping(uint256 => _ClaimBurning) _claimBurnings;\\n    DoubleEndedQueue.Bytes32Deque _burningVersions;\\n}\\n\\n/**\\n * @dev Represents the accumulated values of minting claims\\n *      for a specific oracle version within BinLiquidity.\\n */\\nstruct _ClaimMinting {\\n    uint256 tokenAmountRequested;\\n    uint256 clbTokenAmount;\\n}\\n\\n/**\\n * @dev Represents the accumulated values of burning claims\\n *      for a specific oracle version within BinLiquidity.\\n */\\nstruct _ClaimBurning {\\n    uint256 clbTokenAmountRequested;\\n    uint256 clbTokenAmount;\\n    uint256 tokenAmount;\\n}\\n\\n/**\\n * @title BinLiquidityLib\\n * @notice A library that provides functions to manage the liquidity within an LiquidityBin.\\n */\\nlibrary BinLiquidityLib {\\n    using Math for uint256;\\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\\n\\n    /// @dev Minimum amount constant to prevent division by zero.\\n    uint256 private constant MIN_AMOUNT = 1000;\\n\\n    /**\\n     * @notice Settles the pending liquidity within the BinLiquidity.\\n     * @dev This function settles pending liquidity in the BinLiquidity storage by performing the following steps:\\n     *      1. Settles pending liquidity\\n     *          - If the pending oracle version is not set or is greater than or equal to the current oracle version,\\n     *            no action is taken.\\n     *          - Otherwise, the pending liquidity and burning CLB tokens are settled by following steps:\\n     *              a. If there is a pending deposit,\\n     *                 it calculates the minting amount of CLB tokens\\n     *                 based on the pending deposit, bin value, and CLB token total supply.\\n     *                 It updates the total liquidity and adds the pending deposit to the claim mintings.\\n     *              b. If there is a pending CLB token burning,\\n     *                 it adds the oracle version to the burning versions list\\n     *                 and initializes the claim burning details.\\n     *      2. Settles bunding CLB tokens\\n     *          a. It trims all completed burning versions from the burning versions list.\\n     *          b. For each burning version in the list,\\n     *             it calculates the pending CLB token amount and the pending withdrawal amount\\n     *             based on the bin value and CLB token total supply.\\n     *             - If there is sufficient free liquidity, it calculates the burning amount of CLB tokens.\\n     *             - If there is insufficient free liquidity, it calculates the burning amount\\n     *               based on the available free liquidity and updates the pending withdrawal accordingly.\\n     *          c. It updates the burning amount and pending withdrawal,\\n     *             and reduces the free liquidity accordingly.\\n     *          d. Finally, it updates the total liquidity by subtracting the pending withdrawal.\\n     *      And the CLB tokens are minted or burned accordingly.\\n     *      The pending deposit and withdrawal amounts are passed to the vault for further processing.\\n     * @param self The BinLiquidity storage.\\n     * @param ctx The LpContext memory.\\n     * @param binValue The current value of the bin.\\n     * @param freeLiquidity The amount of free liquidity available in the bin.\\n     * @param clbTokenId The ID of the CLB token.\\n     */\\n    function settlePendingLiquidity(\\n        BinLiquidity storage self,\\n        LpContext memory ctx,\\n        uint256 binValue,\\n        uint256 freeLiquidity,\\n        uint256 clbTokenId,\\n        uint256 clbTokenTotalSupply\\n    ) internal {\\n        (uint256 pendingDeposit, uint256 mintingAmount) = _settlePending(\\n            self,\\n            ctx,\\n            binValue,\\n            clbTokenTotalSupply\\n        );\\n        (uint256 burningAmount, uint256 pendingWithdrawal) = _settleBurning(\\n            self,\\n            freeLiquidity + pendingDeposit,\\n            binValue,\\n            clbTokenTotalSupply\\n        );\\n\\n        if (mintingAmount > burningAmount) {\\n            //slither-disable-next-line calls-loop\\n            ctx.clbToken.mint(ctx.market, clbTokenId, mintingAmount - burningAmount, bytes(\\\"\\\"));\\n        } else if (mintingAmount < burningAmount) {\\n            //slither-disable-next-line calls-loop\\n            ctx.clbToken.burn(ctx.market, clbTokenId, burningAmount - mintingAmount);\\n        }\\n\\n        if (pendingDeposit != 0 || pendingWithdrawal != 0) {\\n            //slither-disable-next-line calls-loop\\n            ctx.vault.onSettlePendingLiquidity(\\n                ctx.settlementToken,\\n                pendingDeposit,\\n                pendingWithdrawal\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds liquidity to the BinLiquidity.\\n     * @dev Sets the pending liquidity with the specified amount and oracle version.\\n     *      Throws an error with the code `Errors.TOO_SMALL_AMOUNT` if the amount is too small.\\n     *      Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if there is already pending liquidity with a different oracle version, it reverts with an error.\\n     * @param self The BinLiquidity storage.\\n     * @param amount The amount of tokens to add for liquidity.\\n     * @param oracleVersion The oracle version associated with the liquidity.\\n     */\\n    function onAddLiquidity(\\n        BinLiquidity storage self,\\n        uint256 amount,\\n        uint256 oracleVersion\\n    ) internal {\\n        require(amount > MIN_AMOUNT, Errors.TOO_SMALL_AMOUNT);\\n\\n        uint256 pendingOracleVersion = self._pending.oracleVersion;\\n        require(\\n            pendingOracleVersion == 0 || pendingOracleVersion == oracleVersion,\\n            Errors.INVALID_ORACLE_VERSION\\n        );\\n\\n        self._pending.oracleVersion = oracleVersion;\\n        self._pending.mintingTokenAmountRequested += amount;\\n    }\\n\\n    /**\\n     * @notice Claims liquidity from the BinLiquidity by minting CLB tokens.\\n     * @dev Retrieves the minting details for the specified oracle version\\n     *      and calculates the CLB token amount to be claimed.\\n     *      Updates the claim minting details and returns the CLB token amount to be claimed.\\n     *      If there are no more tokens remaining for the claim, it is removed from the mapping.\\n     * @param self The BinLiquidity storage.\\n     * @param amount The amount of tokens to claim.\\n     * @param oracleVersion The oracle version associated with the claim.\\n     * @return clbTokenAmount The amount of CLB tokens to be claimed.\\n     */\\n    function onClaimLiquidity(\\n        BinLiquidity storage self,\\n        uint256 amount,\\n        uint256 oracleVersion\\n    ) internal returns (uint256 clbTokenAmount) {\\n        _ClaimMinting memory _cm = self._claimMintings[oracleVersion];\\n        clbTokenAmount = amount.mulDiv(_cm.clbTokenAmount, _cm.tokenAmountRequested);\\n\\n        _cm.clbTokenAmount -= clbTokenAmount;\\n        _cm.tokenAmountRequested -= amount;\\n        if (_cm.tokenAmountRequested == 0) {\\n            delete self._claimMintings[oracleVersion];\\n        } else {\\n            self._claimMintings[oracleVersion] = _cm;\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes liquidity from the BinLiquidity by setting pending CLB token amount.\\n     * @dev Sets the pending liquidity with the specified CLB token amount and oracle version.\\n     *      Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if there is already pending liquidity with a different oracle version, it reverts with an error.\\n     * @param self The BinLiquidity storage.\\n     * @param clbTokenAmount The amount of CLB tokens to remove liquidity.\\n     * @param oracleVersion The oracle version associated with the liquidity.\\n     */\\n    function onRemoveLiquidity(\\n        BinLiquidity storage self,\\n        uint256 clbTokenAmount,\\n        uint256 oracleVersion\\n    ) internal {\\n        uint256 pendingOracleVersion = self._pending.oracleVersion;\\n        require(\\n            pendingOracleVersion == 0 || pendingOracleVersion == oracleVersion,\\n            Errors.INVALID_ORACLE_VERSION\\n        );\\n\\n        self._pending.oracleVersion = oracleVersion;\\n        self._pending.burningCLBTokenAmountRequested += clbTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity from the BinLiquidity by burning CLB tokens and withdrawing tokens.\\n     * @dev Retrieves the burning details for the specified oracle version\\n     *      and calculates the CLB token amount and token amount to burn and withdraw, respectively.\\n     *      Updates the claim burning details and returns the token amount to withdraw and the burned CLB token amount.\\n     *      If there are no more CLB tokens remaining for the claim, it is removed from the mapping.\\n     * @param self The BinLiquidity storage.\\n     * @param clbTokenAmount The amount of CLB tokens to withdraw.\\n     * @param oracleVersion The oracle version associated with the claim.\\n     * @return amount The amount of tokens to be withdrawn for the claim.\\n     * @return burnedCLBTokenAmount The amount of CLB tokens to be burned for the claim.\\n     */\\n    function onWithdrawLiquidity(\\n        BinLiquidity storage self,\\n        uint256 clbTokenAmount,\\n        uint256 oracleVersion\\n    ) internal returns (uint256 amount, uint256 burnedCLBTokenAmount) {\\n        _ClaimBurning memory _cb = self._claimBurnings[oracleVersion];\\n        amount = clbTokenAmount.mulDiv(_cb.tokenAmount, _cb.clbTokenAmountRequested);\\n        burnedCLBTokenAmount = clbTokenAmount.mulDiv(\\n            _cb.clbTokenAmount,\\n            _cb.clbTokenAmountRequested\\n        );\\n\\n        _cb.clbTokenAmount -= burnedCLBTokenAmount;\\n        _cb.tokenAmount -= amount;\\n        _cb.clbTokenAmountRequested -= clbTokenAmount;\\n        if (_cb.clbTokenAmountRequested == 0) {\\n            delete self._claimBurnings[oracleVersion];\\n        } else {\\n            self._claimBurnings[oracleVersion] = _cb;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of CLB tokens to be minted\\n     *         for a given token amount, bin value, and CLB token total supply.\\n     * @dev If the CLB token total supply is zero, returns the token amount as is.\\n     *      Otherwise, calculates the minting amount\\n     *      based on the token amount, bin value, and CLB token total supply.\\n     * @param amount The amount of tokens to be minted.\\n     * @param binValue The current bin value.\\n     * @param clbTokenTotalSupply The total supply of CLB tokens.\\n     * @return The amount of CLB tokens to be minted.\\n     */\\n    function calculateCLBTokenMinting(\\n        uint256 amount,\\n        uint256 binValue,\\n        uint256 clbTokenTotalSupply\\n    ) internal pure returns (uint256) {\\n        return\\n            clbTokenTotalSupply == 0\\n                ? amount\\n                : amount.mulDiv(clbTokenTotalSupply, binValue < MIN_AMOUNT ? MIN_AMOUNT : binValue);\\n    }\\n\\n    /**\\n     * @notice Calculates the value of CLB tokens\\n     *         for a given CLB token amount, bin value, and CLB token total supply.\\n     * @dev If the CLB token total supply is zero, returns zero.\\n     *      Otherwise, calculates the value based on the CLB token amount, bin value, and CLB token total supply.\\n     * @param clbTokenAmount The amount of CLB tokens.\\n     * @param binValue The current bin value.\\n     * @param clbTokenTotalSupply The total supply of CLB tokens.\\n     * @return The value of the CLB tokens.\\n     */\\n    function calculateCLBTokenValue(\\n        uint256 clbTokenAmount,\\n        uint256 binValue,\\n        uint256 clbTokenTotalSupply\\n    ) internal pure returns (uint256) {\\n        return clbTokenTotalSupply == 0 ? 0 : clbTokenAmount.mulDiv(binValue, clbTokenTotalSupply);\\n    }\\n\\n    function needSettle(BinLiquidity storage self, LpContext memory ctx) internal returns (bool) {\\n        // trim all claim completed burning versions\\n        while (!self._burningVersions.empty()) {\\n            uint256 _ov = uint256(self._burningVersions.front());\\n            _ClaimBurning memory _cb = self._claimBurnings[_ov];\\n            if (_cb.clbTokenAmount >= _cb.clbTokenAmountRequested) {\\n                //slither-disable-next-line unused-return\\n                self._burningVersions.popFront();\\n                if (_cb.clbTokenAmountRequested == 0) {\\n                    delete self._claimBurnings[_ov];\\n                }\\n            } else {\\n                break;\\n            }\\n        }\\n        if (self._burningVersions.length() > 0) return true;\\n        if (!ctx.isPastVersion(self._pending.oracleVersion)) return false;\\n        return\\n            self._pending.mintingTokenAmountRequested != 0 ||\\n            self._pending.burningCLBTokenAmountRequested != 0;\\n    }\\n\\n    /**\\n     * @dev Settles the pending deposit and pending CLB token burning.\\n     * @param self The BinLiquidity storage.\\n     * @param ctx The LpContext.\\n     * @param binValue The current value of the bin.\\n     * @param totalSupply The total supply of CLB tokens.\\n     * @return pendingDeposit The amount of pending deposit to be settled.\\n     * @return mintingAmount The calculated minting amount of CLB tokens for the pending deposit.\\n     */\\n    function _settlePending(\\n        BinLiquidity storage self,\\n        LpContext memory ctx,\\n        uint256 binValue,\\n        uint256 totalSupply\\n    ) private returns (uint256 pendingDeposit, uint256 mintingAmount) {\\n        uint256 oracleVersion = self._pending.oracleVersion;\\n        if (!ctx.isPastVersion(oracleVersion)) return (0, 0);\\n\\n        pendingDeposit = self._pending.mintingTokenAmountRequested;\\n        uint256 pendingCLBTokenAmount = self._pending.burningCLBTokenAmountRequested;\\n\\n        if (pendingDeposit != 0) {\\n            mintingAmount = calculateCLBTokenMinting(pendingDeposit, binValue, totalSupply);\\n\\n            self.total += pendingDeposit;\\n            self._claimMintings[oracleVersion] = _ClaimMinting({\\n                tokenAmountRequested: pendingDeposit,\\n                clbTokenAmount: mintingAmount\\n            });\\n        }\\n\\n        if (pendingCLBTokenAmount != 0) {\\n            self._burningVersions.pushBack(bytes32(oracleVersion));\\n            self._claimBurnings[oracleVersion] = _ClaimBurning({\\n                clbTokenAmountRequested: pendingCLBTokenAmount,\\n                clbTokenAmount: 0,\\n                tokenAmount: 0\\n            });\\n        }\\n\\n        delete self._pending;\\n    }\\n\\n    /**\\n     * @dev Settles the pending CLB token burning and calculates the burning amount and pending withdrawal.\\n     * @param self The BinLiquidity storage.\\n     * @param freeLiquidity The amount of free liquidity available for burning.\\n     * @param binValue The current value of the bin.\\n     * @param totalSupply The total supply of CLB tokens.\\n     * @return burningAmount The calculated burning amount of CLB tokens.\\n     * @return pendingWithdrawal The calculated pending withdrawal amount.\\n     */\\n    function _settleBurning(\\n        BinLiquidity storage self,\\n        uint256 freeLiquidity,\\n        uint256 binValue,\\n        uint256 totalSupply\\n    ) private returns (uint256 burningAmount, uint256 pendingWithdrawal) {\\n        uint256 length = self._burningVersions.length();\\n        for (uint256 i; i < length && freeLiquidity != 0; ) {\\n            uint256 _ov = uint256(self._burningVersions.at(i));\\n            _ClaimBurning storage _cb = self._claimBurnings[_ov];\\n\\n            uint256 _pendingCLBTokenAmount = _cb.clbTokenAmountRequested - _cb.clbTokenAmount;\\n            if (_pendingCLBTokenAmount != 0) {\\n                uint256 _burningAmount;\\n                uint256 _pendingWithdrawal = calculateCLBTokenValue(\\n                    _pendingCLBTokenAmount,\\n                    binValue,\\n                    totalSupply\\n                );\\n\\n                if (freeLiquidity >= _pendingWithdrawal) {\\n                    _burningAmount = _pendingCLBTokenAmount;\\n                } else {\\n                    _burningAmount = calculateCLBTokenMinting(freeLiquidity, binValue, totalSupply);\\n                    require(_burningAmount < _pendingCLBTokenAmount);\\n                    _pendingWithdrawal = freeLiquidity;\\n                }\\n\\n                _cb.clbTokenAmount += _burningAmount;\\n                _cb.tokenAmount += _pendingWithdrawal;\\n                burningAmount += _burningAmount;\\n                pendingWithdrawal += _pendingWithdrawal;\\n                freeLiquidity -= _pendingWithdrawal;\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        self.total -= pendingWithdrawal;\\n    }\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information.\\n     * @param self The reference to the BinLiquidity struct.\\n     * @return pendingLiquidity An instance of PendingLiquidity representing the pending liquidity information.\\n     */\\n    function pendingLiquidity(\\n        BinLiquidity storage self\\n    ) internal view returns (PendingLiquidity memory) {\\n        return self._pending;\\n    }\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific oracle version.\\n     * @param self The reference to the BinLiquidity struct.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        BinLiquidity storage self,\\n        uint256 oracleVersion\\n    ) internal view returns (ClaimableLiquidity memory) {\\n        _ClaimMinting memory _cm = self._claimMintings[oracleVersion];\\n        _ClaimBurning memory _cb = self._claimBurnings[oracleVersion];\\n\\n        return\\n            ClaimableLiquidity({\\n                mintingTokenAmountRequested: _cm.tokenAmountRequested,\\n                mintingCLBTokenAmount: _cm.clbTokenAmount,\\n                burningCLBTokenAmountRequested: _cb.clbTokenAmountRequested,\\n                burningCLBTokenAmount: _cb.clbTokenAmount,\\n                burningTokenAmount: _cb.tokenAmount\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xe093f4b838b77f718e29ab058c897498b9de86a561752bca9050dd4e6990d4f0\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/liquidity/BinPendingPosition.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {AccruedInterest, AccruedInterestLib} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/AccruedInterest.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/PositionParam.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @dev Represents a pending position within the LiquidityBin\\n * @param openVersion The oracle version when the position was opened.\\n * @param totalQty The total quantity of the pending position.\\n * @param totalMakerMargin The total maker margin of the pending position.\\n * @param totalTakerMargin The total taker margin of the pending position.\\n * @param accruedInterest The accumulated interest of the pending position.\\n */\\nstruct BinPendingPosition {\\n    uint256 openVersion;\\n    int256 totalQty;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n    AccruedInterest accruedInterest;\\n}\\n\\n/**\\n * @title BinPendingPositionLib\\n * @notice Library for managing pending positions in the `LiquidityBin`\\n */\\nlibrary BinPendingPositionLib {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n    using AccruedInterestLib for AccruedInterest;\\n\\n    /**\\n     * @notice Settles the accumulated interest of the pending position.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     */\\n    function settleAccruedInterest(BinPendingPosition storage self, LpContext memory ctx) internal {\\n        self.accruedInterest.accumulate(ctx, self.totalMakerMargin, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Handles the opening of a position.\\n     * @dev Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if the `openVersion` is not valid.\\n     * @param self The BinPendingPosition storage.\\n     * @param param The position parameters.\\n     */\\n    function onOpenPosition(\\n        BinPendingPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        uint256 openVersion = self.openVersion;\\n        require(\\n            openVersion == 0 || openVersion == param.openVersion,\\n            Errors.INVALID_ORACLE_VERSION\\n        );\\n\\n        int256 totalQty = self.totalQty;\\n        int256 qty = param.qty;\\n        PositionUtil.checkAddPositionQty(totalQty, qty);\\n\\n        // accumulate interest before update `totalMakerMargin`\\n        settleAccruedInterest(self, ctx);\\n\\n        self.openVersion = param.openVersion;\\n        self.totalQty = totalQty + qty;\\n        self.totalMakerMargin += param.makerMargin;\\n        self.totalTakerMargin += param.takerMargin;\\n    }\\n\\n    /**\\n     * @notice Handles the closing of a position.\\n     * @dev Throws an error with the code `Errors.INVALID_ORACLE_VERSION` if the `openVersion` is not valid.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     * @param param The position parameters.\\n     */\\n    function onClosePosition(\\n        BinPendingPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        require(self.openVersion == param.openVersion, Errors.INVALID_ORACLE_VERSION);\\n\\n        int256 totalQty = self.totalQty;\\n        int256 qty = param.qty;\\n        PositionUtil.checkRemovePositionQty(totalQty, qty);\\n\\n        // accumulate interest before update `totalMakerMargin`\\n        settleAccruedInterest(self, ctx);\\n\\n        self.totalQty = totalQty - qty;\\n        self.totalMakerMargin -= param.makerMargin;\\n        self.totalTakerMargin -= param.takerMargin;\\n        self.accruedInterest.deduct(param.calculateInterest(ctx, block.timestamp));\\n    }\\n\\n    /**\\n     * @notice Calculates the unrealized profit or loss (PnL) of the pending position.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     * @return uint256 The unrealized PnL.\\n     */\\n    function unrealizedPnl(\\n        BinPendingPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (int256) {\\n        uint256 openVersion = self.openVersion;\\n        if (!ctx.isPastVersion(openVersion)) return 0;\\n\\n        IOracleProvider.OracleVersion memory currentVersion = ctx.currentOracleVersion();\\n        uint256 _entryPrice = PositionUtil.settlePrice(\\n            ctx.oracleProvider,\\n            openVersion,\\n            ctx.currentOracleVersion()\\n        );\\n        uint256 _exitPrice = PositionUtil.oraclePrice(currentVersion);\\n\\n        int256 pnl = PositionUtil.pnl(self.totalQty, _entryPrice, _exitPrice) +\\n            currentInterest(self, ctx).toInt256();\\n        uint256 absPnl = pnl.abs();\\n\\n        //slither-disable-next-line timestamp\\n        if (pnl >= 0) {\\n            return Math.min(absPnl, self.totalTakerMargin).toInt256();\\n        } else {\\n            return -(Math.min(absPnl, self.totalMakerMargin).toInt256());\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the current accrued interest of the pending position.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     * @return uint256 The current accrued interest.\\n     */\\n    function currentInterest(\\n        BinPendingPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return self.accruedInterest.calculateInterest(ctx, self.totalMakerMargin, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the entry price of the pending position.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     * @return uint256 The entry price.\\n     */\\n    function entryPrice(\\n        BinPendingPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return\\n            PositionUtil.settlePrice(\\n                ctx.oracleProvider,\\n                self.openVersion,\\n                ctx.currentOracleVersion()\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x87c72c4bb91e4da0b65deffebc2a69960a7a1235fab4d79b50074501e086dc6c\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/liquidity/BinPosition.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {AccruedInterest, AccruedInterestLib} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/AccruedInterest.sol\\\";\\nimport {BinPendingPosition, BinPendingPositionLib} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/BinPendingPosition.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/PositionParam.sol\\\";\\nimport {PRICE_PRECISION} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {PendingPosition} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\n\\n/**\\n * @dev Represents a position in the LiquidityBin\\n * @param totalQty The total quantity of the `LiquidityBin`\\n * @param totalEntryAmount The total entry amount of the `LiquidityBin`\\n * @param _totalMakerMargin The total maker margin of the `LiquidityBin`\\n * @param _totalTakerMargin The total taker margin of the `LiquidityBin`\\n * @param _pending The pending position of the `LiquidityBin`\\n * @param _accruedInterest The accumulated interest of the `LiquidityBin`\\n */\\nstruct BinPosition {\\n    int256 totalQty;\\n    uint256 totalEntryAmount;\\n    uint256 _totalMakerMargin;\\n    uint256 _totalTakerMargin;\\n    BinPendingPosition _pending;\\n    AccruedInterest _accruedInterest;\\n}\\n\\n/**\\n * @title BinPositionLib\\n * @notice Library for managing positions in the `LiquidityBin`\\n */\\nlibrary BinPositionLib {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n    using AccruedInterestLib for AccruedInterest;\\n    using BinPendingPositionLib for BinPendingPosition;\\n\\n    /**\\n     * @notice Settles pending positions for a liquidity bin position.\\n     * @param self The BinPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     */\\n    function settlePendingPosition(BinPosition storage self, LpContext memory ctx) internal {\\n        uint256 openVersion = self._pending.openVersion;\\n        if (!ctx.isPastVersion(openVersion)) return;\\n\\n        // accumulate interest before update `_totalMakerMargin`\\n        self._accruedInterest.accumulate(ctx, self._totalMakerMargin, block.timestamp);\\n\\n        int256 pendingQty = self._pending.totalQty;\\n        self.totalQty += pendingQty;\\n        self.totalEntryAmount += PositionUtil.transactionAmount(\\n            pendingQty,\\n            self._pending.entryPrice(ctx)\\n        );\\n        self._totalMakerMargin += self._pending.totalMakerMargin;\\n        self._totalTakerMargin += self._pending.totalTakerMargin;\\n\\n        self._pending.settleAccruedInterest(ctx);\\n        self._accruedInterest.accumulatedAmount += self._pending.accruedInterest.accumulatedAmount;\\n\\n        delete self._pending;\\n    }\\n\\n    /**\\n     * @notice Handles the opening of a position for a liquidity bin.\\n     * @param self The BinPosition storage.\\n     * @param ctx The LpContext data struct.\\n     * @param param The PositionParam containing the position parameters.\\n     */\\n    function onOpenPosition(\\n        BinPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        self._pending.onOpenPosition(ctx, param);\\n    }\\n\\n    /**\\n     * @notice Handles the closing of a position for a liquidity bin.\\n     * @param self The BinPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @param param The PositionParam data struct containing the position parameters.\\n     */\\n    function onClosePosition(\\n        BinPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        if (param.openVersion == self._pending.openVersion) {\\n            self._pending.onClosePosition(ctx, param);\\n        } else {\\n            int256 totalQty = self.totalQty;\\n            int256 qty = param.qty;\\n            PositionUtil.checkRemovePositionQty(totalQty, qty);\\n\\n            // accumulate interest before update `_totalMakerMargin`\\n            self._accruedInterest.accumulate(ctx, self._totalMakerMargin, block.timestamp);\\n\\n            self.totalQty = totalQty - qty;\\n            self.totalEntryAmount -= param.entryAmount(ctx);\\n            self._totalMakerMargin -= param.makerMargin;\\n            self._totalTakerMargin -= param.takerMargin;\\n            self._accruedInterest.deduct(param.calculateInterest(ctx, block.timestamp));\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the total maker margin for a liquidity bin position.\\n     * @param self The BinPosition storage struct.\\n     * @return uint256 The total maker margin.\\n     */\\n    function totalMakerMargin(BinPosition storage self) internal view returns (uint256) {\\n        return self._totalMakerMargin + self._pending.totalMakerMargin;\\n    }\\n\\n    /**\\n     * @notice Returns the total taker margin for a liquidity bin position.\\n     * @param self The BinPosition storage struct.\\n     * @return uint256 The total taker margin.\\n     */\\n    function totalTakerMargin(BinPosition storage self) internal view returns (uint256) {\\n        return self._totalTakerMargin + self._pending.totalTakerMargin;\\n    }\\n\\n    /**\\n     * @notice Calculates the unrealized profit or loss for a liquidity bin position.\\n     * @param self The BinPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @return int256 The unrealized profit or loss.\\n     */\\n    function unrealizedPnl(\\n        BinPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (int256) {\\n        IOracleProvider.OracleVersion memory currentVersion = ctx.currentOracleVersion();\\n\\n        int256 qty = self.totalQty;\\n\\n        int256 rawPnl;\\n        if (qty != 0) {\\n            uint256 avgEntryPrice = self.totalEntryAmount.mulDiv(PRICE_PRECISION, qty.abs());\\n            uint256 exitPrice = PositionUtil.oraclePrice(currentVersion);\\n            rawPnl = PositionUtil.pnl(qty, avgEntryPrice, exitPrice);\\n        }\\n\\n        int256 pnl = rawPnl +\\n            self._pending.unrealizedPnl(ctx) +\\n            _currentInterest(self, ctx).toInt256();\\n        uint256 absPnl = pnl.abs();\\n\\n        //slither-disable-next-line timestamp\\n        if (pnl >= 0) {\\n            return Math.min(absPnl, totalTakerMargin(self)).toInt256();\\n        } else {\\n            return -(Math.min(absPnl, totalMakerMargin(self)).toInt256());\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves the pending position information.\\n     * @param self The reference to the BinPosition struct.\\n     * @return pendingPosition An instance of PendingPosition representing the pending position information.\\n     */\\n    function pendingPosition(\\n        BinPosition storage self\\n    ) internal view returns (PendingPosition memory) {\\n        return\\n            PendingPosition({\\n                openVersion: self._pending.openVersion,\\n                totalQty: self._pending.totalQty,\\n                totalMakerMargin: self._pending.totalMakerMargin,\\n                totalTakerMargin: self._pending.totalTakerMargin\\n            });\\n    }\\n\\n    /**\\n     * @dev Calculates the current interest for a liquidity bin position.\\n     * @param self The BinPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @return uint256 The current interest.\\n     */\\n    function currentInterest(\\n        BinPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return _currentInterest(self, ctx) + self._pending.currentInterest(ctx);\\n    }\\n\\n    /**\\n     * @dev Calculates the current interest for a liquidity bin position without pending position.\\n     * @param self The BinPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @return uint256 The current interest.\\n     */\\n    function _currentInterest(\\n        BinPosition storage self,\\n        LpContext memory ctx\\n    ) private view returns (uint256) {\\n        return\\n            self._accruedInterest.calculateInterest(ctx, self._totalMakerMargin, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x4742b76b693e7a9981ee357d659649ee663d2d0ad9f2dea9366897ccd31de21a\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/liquidity/LiquidityBin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {PendingPosition, ClosingPosition, PendingLiquidity, ClaimableLiquidity} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\nimport {BinLiquidity, BinLiquidityLib} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/BinLiquidity.sol\\\";\\nimport {BinPosition, BinPositionLib} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/BinPosition.sol\\\";\\nimport {BinClosedPosition, BinClosedPositionLib} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/BinClosedPosition.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/PositionParam.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @dev Structure representing a liquidity bin\\n * @param clbTokenId The ID of the CLB token\\n * @param _liquidity The liquidity data for the bin\\n * @param _position The position data for the bin\\n * @param _closedPosition The closed position data for the bin\\n */\\nstruct LiquidityBin {\\n    uint256 clbTokenId;\\n    BinLiquidity _liquidity;\\n    BinPosition _position;\\n    BinClosedPosition _closedPosition;\\n}\\n\\n/**\\n * @title LiquidityBinLib\\n * @notice Library for managing liquidity bin\\n */\\nlibrary LiquidityBinLib {\\n    using SignedMath for int256;\\n    using LiquidityBinLib for LiquidityBin;\\n    using BinLiquidityLib for BinLiquidity;\\n    using BinPositionLib for BinPosition;\\n    using BinClosedPositionLib for BinClosedPosition;\\n\\n    /**\\n     * @notice Modifier to settle the pending positions, closing positions,\\n     *         and pending liquidity of the bin before executing a function.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext data struct.\\n     */\\n    modifier _settle(LiquidityBin storage self, LpContext memory ctx) {\\n        self.settle(ctx);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Settles the pending positions, closing positions, and pending liquidity of the bin.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext data struct.\\n     */\\n    function settle(LiquidityBin storage self, LpContext memory ctx) internal {\\n        self._closedPosition.settleClosingPosition(ctx);\\n        self._position.settlePendingPosition(ctx);\\n        if (self._liquidity.needSettle(ctx)) {\\n            uint256 clbTokenId = self.clbTokenId;\\n\\n            self._liquidity.settlePendingLiquidity(\\n                ctx,\\n                self.value(ctx),\\n                self.freeLiquidity(),\\n                clbTokenId,\\n                ctx.clbToken.totalSupply(clbTokenId)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Initializes the liquidity bin with the given trading fee rate\\n     * @param self The LiquidityBin storage\\n     * @param tradingFeeRate The trading fee rate to set\\n     */\\n    function initialize(LiquidityBin storage self, int16 tradingFeeRate) internal {\\n        self.clbTokenId = CLBTokenLib.encodeId(tradingFeeRate);\\n    }\\n\\n    /**\\n     * @notice Opens a new position in the liquidity bin\\n     * @dev Throws an error with the code `Errors.NOT_ENOUGH_FREE_LIQUIDITY` if there is not enough free liquidity.\\n     * @param self The LiquidityBin storage\\n     * @param ctx The LpContext data struct\\n     * @param param The position parameters\\n     * @param tradingFee The trading fee amount\\n     */\\n    function openPosition(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param,\\n        uint256 tradingFee\\n    ) internal {\\n        require(param.makerMargin <= self.freeLiquidity(), Errors.NOT_ENOUGH_FREE_LIQUIDITY);\\n\\n        self._position.onOpenPosition(ctx, param);\\n        self._liquidity.total += tradingFee;\\n    }\\n\\n    /**\\n     * @notice Closes a position in the liquidity bin\\n     * @param self The LiquidityBin storage\\n     * @param ctx The LpContext data struct\\n     * @param param The position parameters\\n     */\\n    function closePosition(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal _settle(self, ctx) {\\n        self._position.onClosePosition(ctx, param);\\n        if (param.closeVersion > param.openVersion) {\\n            self._closedPosition.onClosePosition(ctx, param);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims an existing liquidity position in the bin.\\n     * @dev This function claims the position using the specified parameters\\n     *      and updates the total by subtracting the absolute value\\n     *      of the taker's profit or loss (takerPnl) from it.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @param param The PositionParam memory.\\n     * @param takerPnl The taker's profit/loss.\\n     */\\n    function claimPosition(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param,\\n        int256 takerPnl\\n    ) internal _settle(self, ctx) {\\n        if (param.closeVersion == 0) {\\n            // called when liquidate\\n            self._position.onClosePosition(ctx, param);\\n        } else if (param.closeVersion > param.openVersion) {\\n            self._closedPosition.onClaimPosition(ctx, param);\\n        }\\n\\n        uint256 absTakerPnl = takerPnl.abs();\\n        if (takerPnl < 0) {\\n            self._liquidity.total += absTakerPnl;\\n        } else {\\n            self._liquidity.total -= absTakerPnl;\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the total liquidity in the bin\\n     * @param self The LiquidityBin storage\\n     * @return uint256 The total liquidity in the bin\\n     */\\n    function liquidity(LiquidityBin storage self) internal view returns (uint256) {\\n        return self._liquidity.total;\\n    }\\n\\n    /**\\n     * @notice Retrieves the free liquidity in the bin (liquidity minus total maker margin)\\n     * @param self The LiquidityBin storage\\n     * @return uint256 The free liquidity in the bin\\n     */\\n    function freeLiquidity(LiquidityBin storage self) internal view returns (uint256) {\\n        return\\n            self._liquidity.total -\\n            self._position.totalMakerMargin() -\\n            self._closedPosition.totalMakerMargin();\\n    }\\n\\n    /**\\n     * @notice Applies earnings to the liquidity bin\\n     * @param self The LiquidityBin storage\\n     * @param earning The earning amount to apply\\n     */\\n    function applyEarning(LiquidityBin storage self, uint256 earning) internal {\\n        self._liquidity.total += earning;\\n    }\\n\\n    /**\\n     * @notice Calculates the value of the bin.\\n     * @dev This function considers the unrealized profit or loss of the position\\n     *      and adds it to the total value.\\n     *      Additionally, it includes the pending bin share from the market's vault.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @return uint256 The value of the bin.\\n     */\\n    function value(\\n        LiquidityBin storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        int256 unrealizedPnl = self._position.unrealizedPnl(ctx);\\n\\n        uint256 absPnl = unrealizedPnl.abs();\\n\\n        uint256 _liquidity = self.liquidity();\\n        uint256 _value = unrealizedPnl < 0 ? _liquidity - absPnl : _liquidity + absPnl;\\n        return\\n            _value +\\n            self._closedPosition.currentInterest(ctx) +\\n            ctx.vault.getPendingBinShare(ctx.market, ctx.settlementToken, _liquidity);\\n    }\\n\\n    /**\\n     * @notice Accepts an add liquidity request.\\n     * @dev This function adds liquidity to the bin by calling the `onAddLiquidity` function\\n     *      of the liquidity component.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @param amount The amount of liquidity to add.\\n     */\\n    function acceptAddLiquidity(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        uint256 amount\\n    ) internal _settle(self, ctx) {\\n        self._liquidity.onAddLiquidity(amount, ctx.currentOracleVersion().version);\\n    }\\n\\n    /**\\n     * @notice Accepts a claim liquidity request.\\n     * @dev This function claims liquidity from the bin by calling the `onClaimLiquidity` function\\n     *      of the liquidity component.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @param amount The amount of liquidity to claim.\\n     *        (should be the same as the one used in acceptAddLiquidity)\\n     * @param oracleVersion The oracle version used for the claim.\\n     *        (should be the oracle version when call acceptAddLiquidity)\\n     * @return The amount of liquidity (CLB tokens) received as a result of the liquidity claim.\\n     */\\n    function acceptClaimLiquidity(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        uint256 amount,\\n        uint256 oracleVersion\\n    ) internal _settle(self, ctx) returns (uint256) {\\n        return self._liquidity.onClaimLiquidity(amount, oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Accepts a remove liquidity request.\\n     * @dev This function removes liquidity from the bin by calling the `onRemoveLiquidity` function\\n     *      of the liquidity component.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @param clbTokenAmount The amount of CLB tokens to remove.\\n     */\\n    function acceptRemoveLiquidity(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        uint256 clbTokenAmount\\n    ) internal _settle(self, ctx) {\\n        self._liquidity.onRemoveLiquidity(clbTokenAmount, ctx.currentOracleVersion().version);\\n    }\\n\\n    /**\\n     * @notice Accepts a withdraw liquidity request.\\n     * @dev This function withdraws liquidity from the bin by calling the `onWithdrawLiquidity` function\\n     *      of the liquidity component.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @param clbTokenAmount The amount of CLB tokens to withdraw.\\n     *        (should be the same as the one used in acceptRemoveLiquidity)\\n     * @param oracleVersion The oracle version used for the withdrawal.\\n     *        (should be the oracle version when call acceptRemoveLiquidity)\\n     * @return amount The amount of liquidity withdrawn\\n     * @return burnedCLBTokenAmount The amount of CLB tokens burned during the withdrawal.\\n     */\\n    function acceptWithdrawLiquidity(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        uint256 clbTokenAmount,\\n        uint256 oracleVersion\\n    ) internal _settle(self, ctx) returns (uint256 amount, uint256 burnedCLBTokenAmount) {\\n        (amount, burnedCLBTokenAmount) = self._liquidity.onWithdrawLiquidity(\\n            clbTokenAmount,\\n            oracleVersion\\n        );\\n    }\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information from a LiquidityBin.\\n     * @param self The reference to the LiquidityBin struct.\\n     * @return pendingLiquidity An instance of PendingLiquidity representing the pending liquidity information.\\n     */\\n    function pendingLiquidity(\\n        LiquidityBin storage self\\n    ) internal view returns (PendingLiquidity memory) {\\n        return self._liquidity.pendingLiquidity();\\n    }\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific oracle version from a LiquidityBin.\\n     * @param self The reference to the LiquidityBin struct.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        LiquidityBin storage self,\\n        uint256 oracleVersion\\n    ) internal view returns (ClaimableLiquidity memory) {\\n        return self._liquidity.claimableLiquidity(oracleVersion);\\n    }\\n\\n    /**\\n     * @dev Retrieves the pending position information from a LiquidityBin.\\n     * @param self The reference to the LiquidityBin struct.\\n     * @return pendingPosition An instance of PendingPosition representing the pending position information.\\n     */\\n    function pendingPosition(\\n        LiquidityBin storage self\\n    ) internal view returns (PendingPosition memory) {\\n        return self._position.pendingPosition();\\n    }\\n\\n    /**\\n     * @dev Retrieves the closing position information from a LiquidityBin.\\n     * @param self The reference to the LiquidityBin struct.\\n     * @return closingPosition An instance of ClosingPosition representing the closing position information.\\n     */\\n    function closingPosition(\\n        LiquidityBin storage self\\n    ) internal view returns (ClosingPosition memory) {\\n        return self._closedPosition.closingPosition();\\n    }\\n}\\n\",\"keccak256\":\"0xa31942517d81da2a05e2082b8cad5328a83ccc55727e8afea5a69cb76e023ef1\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/liquidity/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {PendingPosition, ClosingPosition, PendingLiquidity, ClaimableLiquidity, LiquidityBinStatus} from \\\"@chromatic-protocol/contracts/core/interfaces/market/Types.sol\\\";\\nimport {LiquidityBin, LiquidityBinLib} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/LiquidityBin.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/libraries/liquidity/PositionParam.sol\\\";\\nimport {FEE_RATES_LENGTH} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\nimport {BinMargin} from \\\"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @dev Represents a collection of long and short liquidity bins\\n */\\nstruct LiquidityPool {\\n    mapping(uint16 => LiquidityBin) _longBins;\\n    mapping(uint16 => LiquidityBin) _shortBins;\\n}\\n\\nusing LiquidityPoolLib for LiquidityPool global;\\n\\n/**\\n * @title LiquidityPoolLib\\n * @notice Library for managing liquidity bins in an LiquidityPool\\n */\\nlibrary LiquidityPoolLib {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n    using LiquidityBinLib for LiquidityBin;\\n\\n    /**\\n     * @notice Emitted when earning is accumulated for a liquidity bin.\\n     * @param feeRate The fee rate of the bin.\\n     * @param binType The type of the bin (\\\"L\\\" for long, \\\"S\\\" for short).\\n     * @param earning The accumulated earning.\\n     */\\n    event LiquidityBinEarningAccumulated(\\n        uint16 indexed feeRate,\\n        bytes1 indexed binType,\\n        uint256 indexed earning\\n    );\\n\\n    struct _proportionalPositionParamValue {\\n        int256 qty;\\n        uint256 takerMargin;\\n    }\\n\\n    /**\\n     * @notice Modifier to validate the trading fee rate.\\n     * @param tradingFeeRate The trading fee rate to validate.\\n     */\\n    modifier _validTradingFeeRate(int16 tradingFeeRate) {\\n        validateTradingFeeRate(tradingFeeRate);\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the LiquidityPool.\\n     * @param self The reference to the LiquidityPool.\\n     */\\n    function initialize(LiquidityPool storage self) internal {\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n        for (uint256 i; i < FEE_RATES_LENGTH; ) {\\n            uint16 feeRate = _tradingFeeRates[i];\\n            self._longBins[feeRate].initialize(int16(feeRate));\\n            self._shortBins[feeRate].initialize(-int16(feeRate));\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Settles the liquidity bins in the LiquidityPool.\\n     * @param self The reference to the LiquidityPool.\\n     * @param ctx The LpContext object.\\n     * @param feeRates The feeRate list of liquidity bin to settle.\\n     */\\n    function settle(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int16[] memory feeRates\\n    ) internal {\\n        for (uint256 i; i < feeRates.length; ) {\\n            int16 feeRate = feeRates[i];\\n\\n            if (feeRate < 0) {\\n                self._shortBins[uint16(-feeRate)].settle(ctx);\\n            } else {\\n                self._longBins[uint16(feeRate)].settle(ctx);\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Settles the liquidity bins in the LiquidityPool.\\n     * @param self The reference to the LiquidityPool.\\n     * @param ctx The LpContext object.\\n     */\\n    function settleAll(LiquidityPool storage self, LpContext memory ctx) internal {\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n        for (uint256 i; i < FEE_RATES_LENGTH; ) {\\n            uint16 feeRate = _tradingFeeRates[i];\\n            self._longBins[feeRate].settle(ctx);\\n            self._shortBins[feeRate].settle(ctx);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Prepares bin margins based on the given quantity and maker margin.\\n     * @dev This function prepares bin margins by performing the following steps:\\n     *      1. Calculates the appropriate bin margins\\n     *         for each trading fee rate based on the provided quantity and maker margin.\\n     *      2. Iterates through the target bins based on the quantity,\\n     *         finds the minimum available fee rate,\\n     *         and determines the upper bound for calculating bin margins.\\n     *      3. Iterates from the minimum fee rate until the upper bound,\\n     *         assigning the remaining maker margin to the bins until it is exhausted.\\n     *      4. Creates an array of BinMargin structs\\n     *         containing the trading fee rate and corresponding margin amount for each bin.\\n     *      Throws an error with the code `Errors.NOT_ENOUGH_FREE_LIQUIDITY` if there is not enough free liquidity.\\n     * @param self The reference to the LiquidityPool.\\n     * @param ctx The LpContext data struct\\n     * @param qty The quantity of the position.\\n     * @param makerMargin The maker margin of the position.\\n     * @return binMargins An array of BinMargin representing the calculated bin margins.\\n     */\\n    function prepareBinMargins(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int256 qty,\\n        uint256 makerMargin,\\n        uint256 minimumBinMargin\\n    ) internal returns (BinMargin[] memory) {\\n        // Retrieve the target liquidity bins based on the position quantity\\n        mapping(uint16 => LiquidityBin) storage _bins = targetBins(self, qty);\\n\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n        //slither-disable-next-line uninitialized-local\\n        uint256[FEE_RATES_LENGTH] memory _binMargins;\\n\\n        //slither-disable-next-line uninitialized-local\\n        uint256 to;\\n        //slither-disable-next-line uninitialized-local\\n        uint256 cnt;\\n        uint256 remain = makerMargin;\\n        for (; to < FEE_RATES_LENGTH; ) {\\n            if (remain == 0) break;\\n\\n            LiquidityBin storage _bin = _bins[_tradingFeeRates[to]];\\n            _bin.settle(ctx);\\n\\n            uint256 freeLiquidity = _bin.freeLiquidity();\\n            if (freeLiquidity >= minimumBinMargin) {\\n                if (remain <= freeLiquidity) {\\n                    _binMargins[to] = remain;\\n                    remain = 0;\\n                } else {\\n                    _binMargins[to] = freeLiquidity;\\n                    remain -= freeLiquidity;\\n                }\\n                cnt++;\\n            }\\n\\n            unchecked {\\n                to++;\\n            }\\n        }\\n\\n        require(remain == 0, Errors.NOT_ENOUGH_FREE_LIQUIDITY);\\n\\n        BinMargin[] memory binMargins = new BinMargin[](cnt);\\n        for ((uint256 i, uint256 idx) = (0, 0); i < to; ) {\\n            if (_binMargins[i] != 0) {\\n                binMargins[idx] = BinMargin({\\n                    tradingFeeRate: _tradingFeeRates[i],\\n                    amount: _binMargins[i]\\n                });\\n\\n                unchecked {\\n                    idx++;\\n                }\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return binMargins;\\n    }\\n\\n    /**\\n     * @notice Accepts an open position and opens corresponding liquidity bins.\\n     * @dev This function calculates the target liquidity bins based on the position quantity.\\n     *      It prepares the bin margins and divides the position parameters accordingly.\\n     *      Then, it opens the liquidity bins with the corresponding parameters and trading fees.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param position The Position object representing the open position.\\n     */\\n    function acceptOpenPosition(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        Position memory position\\n    ) internal {\\n        // Retrieve the target liquidity bins based on the position quantity\\n        mapping(uint16 => LiquidityBin) storage _bins = targetBins(self, position.qty);\\n\\n        uint256 makerMargin = position.makerMargin();\\n        BinMargin[] memory binMargins = position.binMargins();\\n\\n        // Divide the position parameters to match the bin margins\\n        _proportionalPositionParamValue[] memory paramValues = divideToPositionParamValue(\\n            position.qty,\\n            makerMargin,\\n            position.takerMargin,\\n            binMargins\\n        );\\n\\n        PositionParam memory param = newPositionParam(position.openVersion, position.openTimestamp);\\n        for (uint256 i; i < binMargins.length; ) {\\n            BinMargin memory binMargin = binMargins[i];\\n\\n            if (binMargin.amount != 0) {\\n                param.qty = paramValues[i].qty;\\n                param.takerMargin = paramValues[i].takerMargin;\\n                param.makerMargin = binMargin.amount;\\n\\n                _bins[binMargins[i].tradingFeeRate].openPosition(\\n                    ctx,\\n                    param,\\n                    binMargin.tradingFee(position._feeProtocol)\\n                );\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accepts a close position request and closes the corresponding liquidity bins.\\n     * @dev This function calculates the target liquidity bins based on the position quantity.\\n     *      It retrieves the maker margin and bin margins from the position.\\n     *      Then, it divides the position parameters to match the bin margins.\\n     *      Finally, it closes the liquidity bins with the provided parameters.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param position The Position object representing the close position request.\\n     */\\n    function acceptClosePosition(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        Position memory position\\n    ) internal {\\n        // Retrieve the target liquidity bins based on the position quantity\\n        mapping(uint16 => LiquidityBin) storage _bins = targetBins(self, position.qty);\\n\\n        uint256 makerMargin = position.makerMargin();\\n        BinMargin[] memory binMargins = position.binMargins();\\n\\n        // Divide the position parameters to match the bin margins\\n        _proportionalPositionParamValue[] memory paramValues = divideToPositionParamValue(\\n            position.qty,\\n            makerMargin,\\n            position.takerMargin,\\n            binMargins\\n        );\\n\\n        PositionParam memory param = newPositionParam(\\n            position.openVersion,\\n            position.closeVersion,\\n            position.openTimestamp,\\n            position.closeTimestamp\\n        );\\n\\n        for (uint256 i; i < binMargins.length; ) {\\n            if (binMargins[i].amount != 0) {\\n                LiquidityBin storage _bin = _bins[binMargins[i].tradingFeeRate];\\n\\n                param.qty = paramValues[i].qty;\\n                param.takerMargin = paramValues[i].takerMargin;\\n                param.makerMargin = binMargins[i].amount;\\n\\n                _bin.closePosition(ctx, param);\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accepts a claim position request and processes the corresponding liquidity bins\\n     *         based on the realized position pnl.\\n     * @dev This function verifies if the absolute value of the realized position pnl is within the acceptable margin range.\\n     *      It retrieves the target liquidity bins based on the position quantity and the bin margins from the position.\\n     *      Then, it divides the position parameters to match the bin margins.\\n     *      Depending on the value of the realized position pnl, it either claims the position fully or partially.\\n     *      The claimed pnl is distributed among the liquidity bins according to their respective margins.\\n     *      Throws an error with the code `Errors.EXCEED_MARGIN_RANGE` if the realized profit or loss does not falls within the acceptable margin range.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param position The Position object representing the position to claim.\\n     * @param realizedPnl The realized position pnl (taker side).\\n     */\\n    function acceptClaimPosition(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        Position memory position,\\n        int256 realizedPnl // realized position pnl (taker side)\\n    ) internal {\\n        uint256 absRealizedPnl = realizedPnl.abs();\\n        uint256 makerMargin = position.makerMargin();\\n        // Ensure that the realized position pnl is within the acceptable margin range\\n        require(\\n            !((realizedPnl > 0 && absRealizedPnl > makerMargin) ||\\n                (realizedPnl < 0 && absRealizedPnl > position.takerMargin)),\\n            Errors.EXCEED_MARGIN_RANGE\\n        );\\n\\n        // Retrieve the target liquidity bins based on the position quantity\\n        mapping(uint16 => LiquidityBin) storage _bins = targetBins(self, position.qty);\\n        BinMargin[] memory binMargins = position.binMargins();\\n\\n        // Divide the position parameters to match the bin margins\\n        _proportionalPositionParamValue[] memory paramValues = divideToPositionParamValue(\\n            position.qty,\\n            makerMargin,\\n            position.takerMargin,\\n            binMargins\\n        );\\n\\n        PositionParam memory param = newPositionParam(\\n            position.openVersion,\\n            position.closeVersion,\\n            position.openTimestamp,\\n            position.closeTimestamp\\n        );\\n\\n        if (realizedPnl == 0) {\\n            for (uint256 i; i < binMargins.length; ) {\\n                if (binMargins[i].amount != 0) {\\n                    LiquidityBin storage _bin = _bins[binMargins[i].tradingFeeRate];\\n\\n                    param.qty = paramValues[i].qty;\\n                    param.takerMargin = paramValues[i].takerMargin;\\n                    param.makerMargin = binMargins[i].amount;\\n\\n                    _bin.claimPosition(ctx, param, 0);\\n                }\\n\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        } else if (realizedPnl > 0 && absRealizedPnl == makerMargin) {\\n            for (uint256 i; i < binMargins.length; ) {\\n                if (binMargins[i].amount != 0) {\\n                    LiquidityBin storage _bin = _bins[binMargins[i].tradingFeeRate];\\n\\n                    param.qty = paramValues[i].qty;\\n                    param.takerMargin = paramValues[i].takerMargin;\\n                    param.makerMargin = binMargins[i].amount;\\n\\n                    _bin.claimPosition(ctx, param, param.makerMargin.toInt256());\\n                }\\n\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        } else {\\n            uint256 remainMakerMargin = makerMargin;\\n            uint256 remainRealizedPnl = absRealizedPnl;\\n\\n            for (uint256 i; i < binMargins.length; ) {\\n                if (binMargins[i].amount != 0) {\\n                    LiquidityBin storage _bin = _bins[binMargins[i].tradingFeeRate];\\n\\n                    param.qty = paramValues[i].qty;\\n                    param.takerMargin = paramValues[i].takerMargin;\\n                    param.makerMargin = binMargins[i].amount;\\n\\n                    uint256 absTakerPnl = remainRealizedPnl.mulDiv(\\n                        param.makerMargin,\\n                        remainMakerMargin\\n                    );\\n                    if (realizedPnl < 0) {\\n                        // maker profit\\n                        absTakerPnl = Math.min(absTakerPnl, param.takerMargin);\\n                    } else {\\n                        // taker profit\\n                        absTakerPnl = Math.min(absTakerPnl, param.makerMargin);\\n                    }\\n\\n                    int256 takerPnl = realizedPnl < 0\\n                        ? -(absTakerPnl.toInt256())\\n                        : absTakerPnl.toInt256();\\n\\n                    _bin.claimPosition(ctx, param, takerPnl);\\n\\n                    remainMakerMargin -= param.makerMargin;\\n                    remainRealizedPnl -= absTakerPnl;\\n                }\\n\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n\\n            require(remainRealizedPnl == 0, Errors.EXCEED_MARGIN_RANGE);\\n        }\\n    }\\n\\n    /**\\n     * @notice Accepts an add liquidity request\\n     *         and processes the liquidity bin corresponding to the given trading fee rate.\\n     * @dev This function validates the trading fee rate\\n     *      and calls the acceptAddLiquidity function on the target liquidity bin.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @param amount The amount of liquidity to add.\\n     */\\n    function acceptAddLiquidity(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int16 tradingFeeRate,\\n        uint256 amount\\n    ) internal _validTradingFeeRate(tradingFeeRate) {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Process the add liquidity request on the liquidity bin\\n        bin.acceptAddLiquidity(ctx, amount);\\n    }\\n\\n    /**\\n     * @notice Accepts a claim liquidity request\\n     *         and processes the liquidity bin corresponding to the given trading fee rate.\\n     * @dev This function validates the trading fee rate\\n     *      and calls the acceptClaimLiquidity function on the target liquidity bin.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @param amount The amount of liquidity to claim.\\n     *        (should be the same as the one used in acceptAddLiquidity)\\n     * @param oracleVersion The oracle version used for the claim.\\n     *        (should be the oracle version when call acceptAddLiquidity)\\n     * @return The amount of liquidity (CLB tokens) received as a result of the liquidity claim.\\n     */\\n    function acceptClaimLiquidity(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int16 tradingFeeRate,\\n        uint256 amount,\\n        uint256 oracleVersion\\n    ) internal _validTradingFeeRate(tradingFeeRate) returns (uint256) {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Process the claim liquidity request on the liquidity bin and return the actual claimed amount\\n        return bin.acceptClaimLiquidity(ctx, amount, oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Accepts a remove liquidity request\\n     *         and processes the liquidity bin corresponding to the given trading fee rate.\\n     * @dev This function validates the trading fee rate\\n     *      and calls the acceptRemoveLiquidity function on the target liquidity bin.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @param clbTokenAmount The amount of CLB tokens to remove.\\n     */\\n    function acceptRemoveLiquidity(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int16 tradingFeeRate,\\n        uint256 clbTokenAmount\\n    ) internal _validTradingFeeRate(tradingFeeRate) {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Process the remove liquidity request on the liquidity bin\\n        bin.acceptRemoveLiquidity(ctx, clbTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Accepts a withdraw liquidity request\\n     *         and processes the liquidity bin corresponding to the given trading fee rate.\\n     * @dev This function validates the trading fee rate\\n     *      and calls the acceptWithdrawLiquidity function on the target liquidity bin.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @param clbTokenAmount The amount of CLB tokens to withdraw.\\n     *        (should be the same as the one used in acceptRemoveLiquidity)\\n     * @param oracleVersion The oracle version used for the withdrawal.\\n     *        (should be the oracle version when call acceptRemoveLiquidity)\\n     * @return amount The amount of base tokens withdrawn\\n     * @return burnedCLBTokenAmount the amount of CLB tokens burned.\\n     */\\n    function acceptWithdrawLiquidity(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int16 tradingFeeRate,\\n        uint256 clbTokenAmount,\\n        uint256 oracleVersion\\n    )\\n        internal\\n        _validTradingFeeRate(tradingFeeRate)\\n        returns (uint256 amount, uint256 burnedCLBTokenAmount)\\n    {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Process the withdraw liquidity request on the liquidity bin\\n        // and get the amount of base tokens withdrawn and CLB tokens burned\\n        (amount, burnedCLBTokenAmount) = bin.acceptWithdrawLiquidity(\\n            ctx,\\n            clbTokenAmount,\\n            oracleVersion\\n        );\\n    }\\n\\n    /**\\n     * @notice Retrieves the total liquidity amount in base tokens for the specified trading fee rate.\\n     * @dev This function retrieves the liquidity bin based on the trading fee rate\\n     *      and calls the liquidity function on it.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @return amount The total liquidity amount in base tokens.\\n     */\\n    function getBinLiquidity(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate\\n    ) internal view returns (uint256 amount) {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Get the total liquidity amount in base tokens from the liquidity bin\\n        return bin.liquidity();\\n    }\\n\\n    /**\\n     * @notice Retrieves the free liquidity amount in base tokens for the specified trading fee rate.\\n     * @dev This function retrieves the liquidity bin based on the trading fee rate\\n     *      and calls the freeLiquidity function on it.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @return amount The free liquidity amount in base tokens.\\n     */\\n    function getBinFreeLiquidity(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate\\n    ) internal view returns (uint256 amount) {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Get the free liquidity amount in base tokens from the liquidity bin\\n        return bin.freeLiquidity();\\n    }\\n\\n    /**\\n     * @notice Retrieves the target bins based on the sign of the given value.\\n     * @dev This function retrieves the target bins mapping (short or long) based on the sign of the given value.\\n     * @param self The storage reference to the LiquidityPool.\\n     * @param sign The sign of the value (-1 for negative, 1 for positive).\\n     * @return _bins The target bins mapping associated with the sign of the value.\\n     */\\n    function targetBins(\\n        LiquidityPool storage self,\\n        int256 sign\\n    ) private view returns (mapping(uint16 => LiquidityBin) storage) {\\n        return sign < 0 ? self._shortBins : self._longBins;\\n    }\\n\\n    /**\\n     * @notice Retrieves the target bin based on the trading fee rate.\\n     * @dev This function retrieves the target bin based on the sign of the trading fee rate and returns it.\\n     * @param self The storage reference to the LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate associated with the bin.\\n     * @return bin The target bin associated with the trading fee rate.\\n     */\\n    function targetBin(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate\\n    ) private view returns (LiquidityBin storage) {\\n        return\\n            tradingFeeRate < 0\\n                ? self._shortBins[abs(tradingFeeRate)]\\n                : self._longBins[abs(tradingFeeRate)];\\n    }\\n\\n    /**\\n     * @notice Divides the quantity, maker margin, and taker margin into proportional position parameter values.\\n     * @dev This function divides the quantity, maker margin, and taker margin\\n     *      into proportional position parameter values based on the bin margins.\\n     *      It calculates the proportional values for each bin margin and returns them in an array.\\n     * @param qty The position quantity.\\n     * @param makerMargin The maker margin amount.\\n     * @param takerMargin The taker margin amount.\\n     * @param binMargins The array of bin margins.\\n     * @return values The array of proportional position parameter values.\\n     */\\n    function divideToPositionParamValue(\\n        int256 qty,\\n        uint256 makerMargin,\\n        uint256 takerMargin,\\n        BinMargin[] memory binMargins\\n    ) private pure returns (_proportionalPositionParamValue[] memory) {\\n        uint256 remainQty = qty.abs();\\n        uint256 remainTakerMargin = takerMargin;\\n\\n        _proportionalPositionParamValue[] memory values = new _proportionalPositionParamValue[](\\n            binMargins.length\\n        );\\n\\n        for (uint256 i; i < binMargins.length - 1; ) {\\n            uint256 _qty = remainQty.mulDiv(binMargins[i].amount, makerMargin);\\n            uint256 _takerMargin = remainTakerMargin.mulDiv(binMargins[i].amount, makerMargin);\\n\\n            values[i] = _proportionalPositionParamValue({\\n                qty: qty < 0 ? _qty.toInt256() : -(_qty.toInt256()), // opposit side\\n                takerMargin: _takerMargin\\n            });\\n\\n            remainQty -= _qty;\\n            remainTakerMargin -= _takerMargin;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        values[binMargins.length - 1] = _proportionalPositionParamValue({\\n            qty: qty < 0 ? remainQty.toInt256() : -(remainQty.toInt256()), // opposit side\\n            takerMargin: remainTakerMargin\\n        });\\n\\n        return values;\\n    }\\n\\n    /**\\n     * @notice Creates a new PositionParam struct with the given oracle version and timestamp.\\n     * @param openVersion The version of the oracle when the position was opened\\n     * @param openTimestamp The timestamp when the position was opened\\n     * @return param The new PositionParam struct.\\n     */\\n    function newPositionParam(\\n        uint256 openVersion,\\n        uint256 openTimestamp\\n    ) private pure returns (PositionParam memory param) {\\n        param.openVersion = openVersion;\\n        param.openTimestamp = openTimestamp;\\n    }\\n\\n    /**\\n     * @notice Creates a new PositionParam struct with the given oracle version and timestamp.\\n     * @param openVersion The version of the oracle when the position was opened\\n     * @param closeVersion The version of the oracle when the position was closed\\n     * @param openTimestamp The timestamp when the position was opened\\n     * @param closeTimestamp The timestamp when the position was closed\\n     * @return param The new PositionParam struct.\\n     */\\n    function newPositionParam(\\n        uint256 openVersion,\\n        uint256 closeVersion,\\n        uint256 openTimestamp,\\n        uint256 closeTimestamp\\n    ) private pure returns (PositionParam memory param) {\\n        param.openVersion = openVersion;\\n        param.closeVersion = closeVersion;\\n        param.openTimestamp = openTimestamp;\\n        param.closeTimestamp = closeTimestamp;\\n    }\\n\\n    /**\\n     * @notice Validates the trading fee rate.\\n     * @dev This function validates the trading fee rate by checking if it is supported.\\n     *      It compares the absolute value of the fee rate with the predefined trading fee rates\\n     *      to determine if it is a valid rate.\\n     *      Throws an error with the code `Errors.UNSUPPORTED_TRADING_FEE_RATE` if the trading fee rate is not supported.\\n     * @param tradingFeeRate The trading fee rate to be validated.\\n     */\\n    function validateTradingFeeRate(int16 tradingFeeRate) private pure {\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n\\n        uint16 absFeeRate = abs(tradingFeeRate);\\n\\n        uint256 idx = findUpperBound(_tradingFeeRates, absFeeRate);\\n        require(\\n            idx < _tradingFeeRates.length && absFeeRate == _tradingFeeRates[idx],\\n            Errors.UNSUPPORTED_TRADING_FEE_RATE\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the absolute value of an int16 number.\\n     * @param i The int16 number.\\n     * @return absValue The absolute value of the input number.\\n     */\\n    function abs(int16 i) private pure returns (uint16) {\\n        return i < 0 ? uint16(-i) : uint16(i);\\n    }\\n\\n    /**\\n     * @notice Finds the upper bound index of an element in a sorted array.\\n     * @dev This function performs a binary search on the sorted array\\n     *      to find * the index of the upper bound of the given element.\\n     *      It returns the index as the exclusive upper bound,\\n     *      or the inclusive upper bound if the element is found at the end of the array.\\n     * @param array The sorted array.\\n     * @param element The element to find the upper bound for.\\n     * @return uint256 The index of the upper bound of the element in the array.\\n     */\\n    function findUpperBound(\\n        uint16[FEE_RATES_LENGTH] memory array,\\n        uint16 element\\n    ) private pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low != 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @notice Distributes earnings among the liquidity bins.\\n     * @dev This function distributes the earnings among the liquidity bins,\\n     *      proportional to their total balances.\\n     *      It iterates through the trading fee rates\\n     *      and distributes the proportional amount of earnings to each bin\\n     *      based on its total balance relative to the market balance.\\n     * @param self The LiquidityPool storage.\\n     * @param earning The total earnings to be distributed.\\n     * @param marketBalance The market balance.\\n     */\\n    function distributeEarning(\\n        LiquidityPool storage self,\\n        uint256 earning,\\n        uint256 marketBalance\\n    ) internal {\\n        uint256 remainEarning = earning;\\n        uint256 remainBalance = marketBalance;\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n\\n        (remainEarning, remainBalance) = distributeEarning(\\n            self._longBins,\\n            remainEarning,\\n            remainBalance,\\n            _tradingFeeRates,\\n            \\\"L\\\"\\n        );\\n        (remainEarning, remainBalance) = distributeEarning(\\n            self._shortBins,\\n            remainEarning,\\n            remainBalance,\\n            _tradingFeeRates,\\n            \\\"S\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Distributes earnings among the liquidity bins of a specific type.\\n     * @dev This function distributes the earnings among the liquidity bins of\\n     *      the specified type, proportional to their total balances.\\n     *      It iterates through the trading fee rates\\n     *      and distributes the proportional amount of earnings to each bin\\n     *      based on its total balance relative to the market balance.\\n     * @param bins The liquidity bins mapping.\\n     * @param earning The total earnings to be distributed.\\n     * @param marketBalance The market balance.\\n     * @param _tradingFeeRates The array of supported trading fee rates.\\n     * @param binType The type of liquidity bin (\\\"L\\\" for long, \\\"S\\\" for short).\\n     * @return remainEarning The remaining earnings after distribution.\\n     * @return remainBalance The remaining market balance after distribution.\\n     */\\n    function distributeEarning(\\n        mapping(uint16 => LiquidityBin) storage bins,\\n        uint256 earning,\\n        uint256 marketBalance,\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates,\\n        bytes1 binType\\n    ) private returns (uint256 remainEarning, uint256 remainBalance) {\\n        remainBalance = marketBalance;\\n        remainEarning = earning;\\n\\n        for (uint256 i; i < FEE_RATES_LENGTH; ) {\\n            uint16 feeRate = _tradingFeeRates[i];\\n            LiquidityBin storage bin = bins[feeRate];\\n            uint256 binLiquidity = bin.liquidity();\\n\\n            if (binLiquidity == 0) {\\n                unchecked {\\n                    i++;\\n                }\\n                continue;\\n            }\\n\\n            uint256 binEarning = remainEarning.mulDiv(binLiquidity, remainBalance);\\n\\n            bin.applyEarning(binEarning);\\n\\n            remainBalance -= binLiquidity;\\n            remainEarning -= binEarning;\\n\\n            emit LiquidityBinEarningAccumulated(feeRate, binType, binEarning);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves the value of a specific bin in the LiquidityPool storage for the provided trading fee rate.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LP context containing relevant information for the calculation.\\n     * @param _tradingFeeRate The trading fee rate for which to calculate the bin value.\\n     * @return value The value of the specified bin.\\n     */\\n    function binValue(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int16 _tradingFeeRate\\n    ) internal view returns (uint256 value) {\\n        value = targetBin(self, _tradingFeeRate).value(ctx);\\n    }\\n\\n    /**\\n     * @dev Retrieves the pending liquidity information for a specific trading fee rate from a LiquidityPool.\\n     * @param self The reference to the LiquidityPool struct.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.\\n     * @return pendingLiquidity An instance of PendingLiquidity representing the pending liquidity information.\\n     */\\n    function pendingLiquidity(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate\\n    ) internal view _validTradingFeeRate(tradingFeeRate) returns (PendingLiquidity memory) {\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        return bin.pendingLiquidity();\\n    }\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from a LiquidityPool.\\n     * @param self The reference to the LiquidityPool struct.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate,\\n        uint256 oracleVersion\\n    ) internal view _validTradingFeeRate(tradingFeeRate) returns (ClaimableLiquidity memory) {\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        return bin.claimableLiquidity(oracleVersion);\\n    }\\n\\n    /**\\n     * @dev Retrieves the liquidity bin statuses for the LiquidityPool using the provided context.\\n     * @param self The LiquidityPool storage instance.\\n     * @param ctx The LpContext containing the necessary context for calculating the bin statuses.\\n     * @return stats An array of LiquidityBinStatus representing the liquidity bin statuses.\\n     */\\n    function liquidityBinStatuses(\\n        LiquidityPool storage self,\\n        LpContext memory ctx\\n    ) internal view returns (LiquidityBinStatus[] memory) {\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n\\n        LiquidityBinStatus[] memory stats = new LiquidityBinStatus[](FEE_RATES_LENGTH * 2);\\n        for (uint256 i; i < FEE_RATES_LENGTH; ) {\\n            uint16 _feeRate = _tradingFeeRates[i];\\n            LiquidityBin storage longBin = targetBin(self, int16(_feeRate));\\n            LiquidityBin storage shortBin = targetBin(self, -int16(_feeRate));\\n\\n            stats[i] = LiquidityBinStatus({\\n                tradingFeeRate: int16(_feeRate),\\n                liquidity: longBin.liquidity(),\\n                freeLiquidity: longBin.freeLiquidity(),\\n                binValue: longBin.value(ctx)\\n            });\\n            stats[i + FEE_RATES_LENGTH] = LiquidityBinStatus({\\n                tradingFeeRate: -int16(_feeRate),\\n                liquidity: shortBin.liquidity(),\\n                freeLiquidity: shortBin.freeLiquidity(),\\n                binValue: shortBin.value(ctx)\\n            });\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return stats;\\n    }\\n\\n    /**\\n     * @dev Retrieves the pending position information for a specific trading fee rate from a LiquidityPool.\\n     * @param self The reference to the LiquidityPool struct.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.\\n     * @return pendingPositin An instance of PendingPositin representing the pending position information.\\n     */\\n    function pendingPosition(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate\\n    ) internal view _validTradingFeeRate(tradingFeeRate) returns (PendingPosition memory) {\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        return bin.pendingPosition();\\n    }\\n\\n    /**\\n     * @dev Retrieves the closing position information for a specific trading fee rate from a LiquidityPool.\\n     * @param self The reference to the LiquidityPool struct.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.\\n     * @return closingPositin An instance of ClosingPositin representing the closing position information.\\n     */\\n    function closingPosition(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate\\n    ) internal view _validTradingFeeRate(tradingFeeRate) returns (ClosingPosition memory) {\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        return bin.closingPosition();\\n    }\\n}\\n\",\"keccak256\":\"0x09dd7be9a345b8b87e3fe9d098f27b26594620123ee028b25ca490e91491bd85\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/liquidity/PositionParam.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\n\\n/**\\n * @dev A struct representing the parameters of a position.\\n * @param openVersion The version of the position's open transaction\\n * @param closeVersion The version of the position's close transaction\\n * @param qty The quantity of the position\\n * @param takerMargin The margin amount provided by the taker\\n * @param makerMargin The margin amount provided by the maker\\n * @param openTimestamp The timestamp of the position's open transaction\\n * @param closeTimestamp The timestamp of the position's close transaction\\n * @param _entryVersionCache Caches the settled oracle version for the position's entry\\n * @param _exitVersionCache Caches the settled oracle version for the position's exit\\n */\\nstruct PositionParam {\\n    uint256 openVersion;\\n    uint256 closeVersion;\\n    int256 qty;\\n    uint256 takerMargin;\\n    uint256 makerMargin;\\n    uint256 openTimestamp;\\n    uint256 closeTimestamp;\\n    IOracleProvider.OracleVersion _entryVersionCache;\\n    IOracleProvider.OracleVersion _exitVersionCache;\\n}\\n\\nusing PositionParamLib for PositionParam global;\\n\\n/**\\n * @title PositionParamLib\\n * @notice Library for manipulating PositionParam struct.\\n */\\nlibrary PositionParamLib {\\n    using SignedMath for int256;\\n\\n    /**\\n     * @notice Returns the settled version for the position's entry.\\n     * @param self The PositionParam struct.\\n     * @return uint256 The settle version for the position's entry.\\n     */\\n    function entryVersion(PositionParam memory self) internal pure returns (uint256) {\\n        return PositionUtil.settleVersion(self.openVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the entry price for a PositionParam.\\n     * @param self The PositionParam struct.\\n     * @param ctx The LpContext struct.\\n     * @return uint256 The entry price.\\n     */\\n    function entryPrice(\\n        PositionParam memory self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return\\n            PositionUtil.settlePrice(\\n                ctx.oracleProvider,\\n                self.openVersion,\\n                self.entryOracleVersion(ctx)\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the entry amount for a PositionParam.\\n     * @param self The PositionParam struct.\\n     * @param ctx The LpContext struct.\\n     * @return uint256 The entry amount.\\n     */\\n    function entryAmount(\\n        PositionParam memory self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return PositionUtil.transactionAmount(self.qty, self.entryPrice(ctx));\\n    }\\n\\n    /**\\n     * @notice Retrieves the settled oracle version for the position's entry.\\n     * @param self The PositionParam struct.\\n     * @param ctx The LpContext struct.\\n     * @return OracleVersion The settle oracle version for the position's entry.\\n     */\\n    function entryOracleVersion(\\n        PositionParam memory self,\\n        LpContext memory ctx\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._entryVersionCache.version == 0) {\\n            self._entryVersionCache = ctx.oracleVersionAt(self.entryVersion());\\n        }\\n        return self._entryVersionCache;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest for a PositionParam until a specified timestamp.\\n     * @dev It is used only to deduct accumulated accrued interest when close position\\n     * @param self The PositionParam struct.\\n     * @param ctx The LpContext struct.\\n     * @param until The timestamp until which to calculate the interest.\\n     * @return uint256 The calculated interest.\\n     */\\n    function calculateInterest(\\n        PositionParam memory self,\\n        LpContext memory ctx,\\n        uint256 until\\n    ) internal view returns (uint256) {\\n        return ctx.calculateInterest(self.makerMargin, self.openTimestamp, until);\\n    }\\n\\n    /**\\n     * @notice Creates a clone of a PositionParam.\\n     * @param self The PositionParam data struct.\\n     * @return PositionParam The cloned PositionParam.\\n     */\\n    function clone(PositionParam memory self) internal pure returns (PositionParam memory) {\\n        return\\n            PositionParam({\\n                openVersion: self.openVersion,\\n                closeVersion: self.closeVersion,\\n                qty: self.qty,\\n                takerMargin: self.takerMargin,\\n                makerMargin: self.makerMargin,\\n                openTimestamp: self.openTimestamp,\\n                closeTimestamp: self.closeTimestamp,\\n                _entryVersionCache: self._entryVersionCache,\\n                _exitVersionCache: self._exitVersionCache\\n            });\\n    }\\n\\n    /**\\n     * @notice Creates the inverse of a PositionParam by negating the qty.\\n     * @param self The PositionParam data struct.\\n     * @return PositionParam The inverted PositionParam.\\n     */\\n    function inverse(PositionParam memory self) internal pure returns (PositionParam memory) {\\n        PositionParam memory param = self.clone();\\n        param.qty *= -1;\\n        return param;\\n    }\\n}\\n\",\"keccak256\":\"0x70e94354a0fd0b8c16a299bce4e39b11852a69aaca5e945c4806e8089021fb9a\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IOracleProvider {\\n    /// @dev Error for invalid oracle round\\n    error InvalidOracleRound();\\n\\n    /**\\n     * @dev A singular oracle version with its corresponding data\\n     * @param version The iterative version\\n     * @param timestamp the timestamp of the oracle update\\n     * @param price The oracle price of the corresponding version\\n     */\\n    struct OracleVersion {\\n        uint256 version;\\n        uint256 timestamp;\\n        int256 price;\\n    }\\n\\n    /**\\n     * @notice Checks for a new price and updates the internal phase annotation state accordingly\\n     * @dev `sync` is expected to be called soon after a phase update occurs in the underlying proxy.\\n     *      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call\\n     *      This is feasible in the short term due to how infrequent phase updates are, but phase update\\n     *      and roundCount detection should eventually be implemented at the contract level.\\n     *      Reverts if there is more than 1 phase to update in a single sync because we currently cannot\\n     *      determine the startingRoundId for the intermediary phase.\\n     * @return The current oracle version after sync\\n     */\\n    function sync() external returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @return oracleVersion Current oracle version\\n     */\\n    function currentVersion() external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @param version The version of which to lookup\\n     * @return oracleVersion Oracle version at version `version`\\n     */\\n    function atVersion(uint256 version) external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Retrieves the description of the Oracle Provider.\\n     * @return A string representing the description of the Oracle Provider.\\n     */\\n    function description() external view returns (string memory);\\n\\n    /**\\n     * @notice Retrieves the name of the Oracle Provider.\\n     * @return A string representing the name of the Oracle Provider.\\n     */\\n    function oracleProviderName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7578ac3fc7a41e93a3e3d0c8eebebd559a0a34f8464079914e9f4f5cf39e427d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612233806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634c32f73a1461003b578063a015aefe14610050575b600080fd5b61004e610049366004611d41565b610058565b005b61004e6100d8565b7f492a974aed1be5cd7fa4ce3b0cfab809a1de17af5ade68dd0729b36f2ed09793600061008482610120565b905061008f81610295565b6100d28185858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600787019392915050610312565b50505050565b7f492a974aed1be5cd7fa4ce3b0cfab809a1de17af5ade68dd0729b36f2ed09793600061010482610120565b905061010f81610295565b61011c60078301826103a0565b5050565b61017b60408051610100810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905284519081018552828152908101829052928301529060e082015290565b61019f60405180606001604052806000815260200160008152602001600081525090565b6040805161010081018252600185015473ffffffffffffffffffffffffffffffffffffffff9081168252855481166020808401919091526005870154821683850152600387015482166060840152306080840152600287015490911660a0830181905283517f313ce5670000000000000000000000000000000000000000000000000000000081529351929360c0850193919263313ce567926004808401938290030181865afa158015610257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027b9190611db6565b61028690600a611f28565b81526020019190915292915050565b806000015173ffffffffffffffffffffffffffffffffffffffff1663fff6cae96040518163ffffffff1660e01b81526004016060604051808303816000875af11580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190611f37565b60e090910152565b60005b81518110156100d257600082828151811061033257610332611fba565b6020026020010151905060008160010b121561037a576103758460018701600061035b85611fe9565b61ffff16815260208101919091526040016000209061041e565b610397565b61ffff81166000908152602086905260409020610397908561041e565b50600101610315565b60006103aa61050b565b905060005b60248110156100d25760008282602481106103cc576103cc611fba565b6020908102919091015161ffff811660009081529187905260409091209091506103f6908561041e565b61ffff811660009081526001860160205260409020610415908561041e565b506001016103af565b61042b6015830182610647565b610438600983018261078d565b61044560018301826108a3565b1561011c5781546105068261045a85826109d8565b61046386610b07565b60608601516040517fbd85b03900000000000000000000000000000000000000000000000000000000815260048101879052869173ffffffffffffffffffffffffffffffffffffffff169063bd85b03990602401602060405180830381865afa1580156104d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f89190612027565b600189019493929190610b3a565b505050565b610513611d22565b50604080516104808101825260018152600260208201526003918101919091526004606082015260056080820152600660a0820152600760c0820152600860e08201526009610100820152600a6101208201526014610140820152601e610160820152602861018082015260326101a0820152603c6101c082015260466101e08201526050610200820152605a610220820152606461024082015260c861026082015261012c6102808201526101906102a08201526101f46102c08201526102586102e08201526102bc610300820152610320808201526103846103408201526103e86103608201526105dc6103808201526107d06103a08201526109c46103c0820152610bb86103e0820152610dac610400820152610fa061042082015261119461044082015261138861046082015290565b60028201546106568282610d88565b61065f57505050565b6040805160808101825260038501548152600485015460208201526005850154918101919091526006840154606082015283546106a390600c860190859042610da7565b80604001518460000160008282546106bb9190612040565b909155505060608101516001850180546000906106d9908490612040565b909155506106ec90506009850183610de9565b506000828152600b850160209081526040918290208351815590830151600182015590820151600280830191909155606083015160039092019190915561073590850184610df5565b6008840154600d8501805460009061074e908490612040565b90915550506000600285018190556003850181905560048501819055600585018190556006850181905560078501819055600890940193909355505050565b600482015461079c8282610d88565b6107a557505050565b60028301546107bb90600a850190849042610da7565b60058301548354819085906000906107d4908490612053565b909155506107f09050816107eb6004870186610e0b565b610e24565b8460010160008282546108039190612040565b90915550506006840154600285018054600090610821908490612040565b9091555050600784015460038501805460009061083f908490612040565b9091555061085290506004850184610e43565b6009840154600b8501805460009061086b908490612040565b909155505060006004850181905560058501819055600685018190556007850181905560088501819055600990940193909355505050565b60005b6006830154600f81810b700100000000000000000000000000000000909204900b13156109665760006108db84600601610e59565b6000818152600586016020908152604091829020825160608101845281548082526001830154938201849052600290920154938101939093529293509091116109585761092a85600601610ed3565b508051600003610953576000828152600586016020526040812081815560018101829055600201555b61095f565b5050610966565b50506108a6565b60006109908460060154600f81810b700100000000000000000000000000000000909204900b0390565b111561099e575060016109d2565b60018301546109ae908390610d88565b6109ba575060006109d2565b60028301541515806109cf5750600383015415155b90505b92915050565b6000806109e86009850184610f90565b905060006109f582611071565b90506000610a04866001015490565b90506000808412610a1e57610a198383612040565b610a28565b610a28838361207b565b604080880151608089015160a08a015192517f4e82c4b700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529281166024840152604483018690529293509190911690634e82c4b790606401602060405180830381865afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190612027565b610ae86015890188611088565b610af29083612040565b610afc9190612040565b979650505050505050565b6000610b15826015016110ab565b610b21836009016110be565b6001840154610b30919061207b565b6109d2919061207b565b600080610b49888888866110d4565b9092509050600080610b668a610b5f868a612040565b8a8861121c565b9150915081831115610c0a57886060015173ffffffffffffffffffffffffffffffffffffffff1663731133e98a60800151888587610ba4919061207b565b604051806020016040528060008152506040518563ffffffff1660e01b8152600401610bd394939291906120f2565b600060405180830381600087803b158015610bed57600080fd5b505af1158015610c01573d6000803e3d6000fd5b50505050610cd0565b81831015610cd057886060015173ffffffffffffffffffffffffffffffffffffffff1663f5298aca8a60800151888686610c44919061207b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff909316600484015260248301919091526044820152606401600060405180830381600087803b158015610cb757600080fd5b505af1158015610ccb573d6000803e3d6000fd5b505050505b83151580610cdd57508015155b15610d7c576040808a015160a08b015191517f8b41411700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810187905260448101849052911690638b41411790606401600060405180830381600087803b158015610d6357600080fd5b505af1158015610d77573d6000803e3d6000fd5b505050505b50505050505050505050565b600081158015906109cf5750610d9d83611366565b5190911092915050565b8354808211610db657506100d2565b8215610de157610dc884848385611418565b856001016000828254610ddb9190612040565b90915550505b509092555050565b60006109cf83836114ed565b600382015461011c906005840190839042610da7565b805182546000916109cf91610e1f85611366565b61153c565b60006109cf82670de0b6b3a7640000610e3c86611071565b919061167d565b600282015461011c906004840190839042610da7565b6000610e818254600f81810b700100000000000000000000000000000000909204900b131590565b15610eb8576040517f3db2a12a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b508054600f0b60009081526001909101602052604090205490565b6000610efb8254600f81810b700100000000000000000000000000000000909204900b131590565b15610f32576040517f3db2a12a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583547fffffffffffffffffffffffffffffffff000000000000000000000000000000001692016fffffffffffffffffffffffffffffffff169190911790915590565b600080610f9c83611366565b845490915060008115610feb576000610fcc670de0b6b3a7640000610fc085611071565b60018a0154919061167d565b90506000610fd9856117a7565b9050610fe684838361182c565b925050505b6000610fff610ffa88886118e4565b6118fd565b61100c60048901886119af565b6110169084612053565b6110209190612053565b9050600061102d82611071565b9050600082126110585761104c610ffa826110478b611a73565b611a89565b955050505050506109d2565b611068610ffa826110478b6110be565b61104c90612137565b60008082121561108457816000036109d2565b5090565b60006110976002840183611a9f565b6110a18484611ab8565b6109cf9190612040565b600581015481546000916109d291612040565b600681015460028201546000916109d291612040565b600184015460009081906110e88682610d88565b6110f9576000809250925050611213565b60028701546003880154909350831561116257611117848787611ace565b92508388600001600082825461112d9190612040565b90915550506040805180820182528581526020808201868152600086815260048d019092529290209051815590516001909101555b80156111fb5760068801805470010000000000000000000000000000000090819004600f0b600081815260078c016020526040902085905582546fffffffffffffffffffffffffffffffff908116600190920116909102179055604080516060810182528281526000602080830182815283850183815287845260058e0190925293909120915182559151600182015590516002909101555b50506000600187018190556002870181905560038701555b94509492505050565b60008060006112498760060154600f81810b700100000000000000000000000000000000909204900b0390565b905060005b818110801561125c57508615155b1561134057600061127060068a0183611b02565b600081815260058b0160205260408120600181015481549394509092611296919061207b565b90508015611335576000806112ac838c8c611b99565b9050808c106112bd578291506112d9565b6112c88c8c8c611ace565b91508282106112d657600080fd5b508a5b818460010160008282546112ed9190612040565b92505081905550808460020160008282546113089190612040565b909155506113189050828a612040565b98506113248189612040565b9750611330818d61207b565b9b5050505b50505060010161124e565b5081876000016000828254611355919061207b565b925050819055505094509492505050565b61138a60405180606001604052806000815260200160008152602001600081525090565b60e08201515160000361141057816000015173ffffffffffffffffffffffffffffffffffffffff16639d888e866040518163ffffffff1660e01b8152600401606060405180830381865afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190611f37565b60e08301525b5060e0015190565b60008315806114275750818310155b6114df57602085015160a08601516040517f705b170e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260248101879052604481018690526064810185905291169063705b170e90608401602060405180830381865afa1580156114b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114da9190612027565b6114e2565b60005b90505b949350505050565b6000818152600183016020526040812054611534575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109d2565b5060006109d2565b60008061154884611bb6565b835160408051808201909152600381527f555350000000000000000000000000000000000000000000000000000000000060208201529192508211156115c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bb919061216f565b60405180910390fd5b5082516000908214611664576040517f7ece075d0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff871690637ece075d90602401606060405180830381865afa15801561163b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165f9190611f37565b611666565b835b9050611671816117a7565b925050505b9392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000036116d5578382816116cb576116cb612182565b0492505050611676565b80841161173e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f77000000000000000000000060448201526064016115bb565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000808260400151136040518060400160405280600381526020017f4e505000000000000000000000000000000000000000000000000000000000008152509061181e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bb919061216f565b506109d28260400151611071565b600083158061183a57508183145b1561184757506000611676565b600083831161186b5761185d610ffa848661207b565b61186690612137565b611878565b611878610ffa858561207b565b905060008512156118b0576118ad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826121b1565b90505b60006118cb610ffa6118c184611071565b87610e3c8a611071565b9050600082126118db5780611671565b61167181612137565b60028201546000906109cf90600a850190849042611c31565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e7432353600000000000000000000000000000000000000000000000060648201526084016115bb565b81546000906119be8382610d88565b6119cc5760009150506109d2565b60006119d784611366565b905060006119ed856000015184610e1f88611366565b905060006119fa836117a7565b90506000611a0b610ffa8989611c70565b611a1a8960010154858561182c565b611a249190612053565b90506000611a3182611071565b905060008212611a5957611a4c610ffa828b60030154611a89565b96505050505050506109d2565b611a6a610ffa828b60020154611a89565b611a4c90612137565b600781015460038201546000916109d291612040565b6000818310611a9857816109cf565b5090919050565b60038201546000906109cf906005850190849042611c31565b81546000906109cf90600c850190849042611c31565b60008115611afa57611af5826103e88510611ae95784611aed565b6103e85b86919061167d565b6114e5565b509192915050565b600080611b25611b11846118fd565b8554611b209190600f0b612053565b611c89565b84549091507001000000000000000000000000000000009004600f90810b9082900b12611b7e576040517fb4120f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f0b60009081526001939093016020525050604090205490565b60008115611bac57611af584848461167d565b5060009392505050565b60408051808201909152600381527f494f560000000000000000000000000000000000000000000000000000000000602082015260009082611c25576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bb919061216f565b506109d2826001612040565b600082600003611c43575060006114e5565b84546001860154818411611c5a5791506114e59050565b611c6686868487611418565b610afc9082612040565b60028201546000906109cf906004850190849042611c31565b80600f81900b8114611d1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016115bb565b919050565b6040518061048001604052806024906020820280368337509192915050565b60008060208385031215611d5457600080fd5b823567ffffffffffffffff80821115611d6c57600080fd5b818501915085601f830112611d8057600080fd5b813581811115611d8f57600080fd5b8660208260051b8501011115611da457600080fd5b60209290920196919550909350505050565b600060208284031215611dc857600080fd5b815160ff8116811461167657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115611e6157817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611e4757611e47611dd9565b80851615611e5457918102915b93841c9390800290611e0d565b509250929050565b600082611e78575060016109d2565b81611e85575060006109d2565b8160018114611e9b5760028114611ea557611ec1565b60019150506109d2565b60ff841115611eb657611eb6611dd9565b50506001821b6109d2565b5060208310610133831016604e8410600b8410161715611ee4575081810a6109d2565b611eee8383611e08565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611f2057611f20611dd9565b029392505050565b60006109cf60ff841683611e69565b600060608284031215611f4957600080fd5b6040516060810181811067ffffffffffffffff82111715611f93577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160010b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000810361201e5761201e611dd9565b60000392915050565b60006020828403121561203957600080fd5b5051919050565b808201808211156109d2576109d2611dd9565b808201828112600083128015821682158216171561207357612073611dd9565b505092915050565b818103818111156109d2576109d2611dd9565b6000815180845260005b818110156120b457602081850181015186830182015201612098565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b73ffffffffffffffffffffffffffffffffffffffff8516815283602082015282604082015260806060820152600061212d608083018461208e565b9695505050505050565b60007f8000000000000000000000000000000000000000000000000000000000000000820361216857612168611dd9565b5060000390565b6020815260006109cf602083018461208e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b808202600082127f8000000000000000000000000000000000000000000000000000000000000000841416156121e9576121e9611dd9565b81810583148215176109d2576109d2611dd956fea26469706673582212201d65de986e96e61c19513fbda5306b993911d42b3e9ebc2ac5949eff593ce6a164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80634c32f73a1461003b578063a015aefe14610050575b600080fd5b61004e610049366004611d41565b610058565b005b61004e6100d8565b7f492a974aed1be5cd7fa4ce3b0cfab809a1de17af5ade68dd0729b36f2ed09793600061008482610120565b905061008f81610295565b6100d28185858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600787019392915050610312565b50505050565b7f492a974aed1be5cd7fa4ce3b0cfab809a1de17af5ade68dd0729b36f2ed09793600061010482610120565b905061010f81610295565b61011c60078301826103a0565b5050565b61017b60408051610100810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905284519081018552828152908101829052928301529060e082015290565b61019f60405180606001604052806000815260200160008152602001600081525090565b6040805161010081018252600185015473ffffffffffffffffffffffffffffffffffffffff9081168252855481166020808401919091526005870154821683850152600387015482166060840152306080840152600287015490911660a0830181905283517f313ce5670000000000000000000000000000000000000000000000000000000081529351929360c0850193919263313ce567926004808401938290030181865afa158015610257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027b9190611db6565b61028690600a611f28565b81526020019190915292915050565b806000015173ffffffffffffffffffffffffffffffffffffffff1663fff6cae96040518163ffffffff1660e01b81526004016060604051808303816000875af11580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190611f37565b60e090910152565b60005b81518110156100d257600082828151811061033257610332611fba565b6020026020010151905060008160010b121561037a576103758460018701600061035b85611fe9565b61ffff16815260208101919091526040016000209061041e565b610397565b61ffff81166000908152602086905260409020610397908561041e565b50600101610315565b60006103aa61050b565b905060005b60248110156100d25760008282602481106103cc576103cc611fba565b6020908102919091015161ffff811660009081529187905260409091209091506103f6908561041e565b61ffff811660009081526001860160205260409020610415908561041e565b506001016103af565b61042b6015830182610647565b610438600983018261078d565b61044560018301826108a3565b1561011c5781546105068261045a85826109d8565b61046386610b07565b60608601516040517fbd85b03900000000000000000000000000000000000000000000000000000000815260048101879052869173ffffffffffffffffffffffffffffffffffffffff169063bd85b03990602401602060405180830381865afa1580156104d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f89190612027565b600189019493929190610b3a565b505050565b610513611d22565b50604080516104808101825260018152600260208201526003918101919091526004606082015260056080820152600660a0820152600760c0820152600860e08201526009610100820152600a6101208201526014610140820152601e610160820152602861018082015260326101a0820152603c6101c082015260466101e08201526050610200820152605a610220820152606461024082015260c861026082015261012c6102808201526101906102a08201526101f46102c08201526102586102e08201526102bc610300820152610320808201526103846103408201526103e86103608201526105dc6103808201526107d06103a08201526109c46103c0820152610bb86103e0820152610dac610400820152610fa061042082015261119461044082015261138861046082015290565b60028201546106568282610d88565b61065f57505050565b6040805160808101825260038501548152600485015460208201526005850154918101919091526006840154606082015283546106a390600c860190859042610da7565b80604001518460000160008282546106bb9190612040565b909155505060608101516001850180546000906106d9908490612040565b909155506106ec90506009850183610de9565b506000828152600b850160209081526040918290208351815590830151600182015590820151600280830191909155606083015160039092019190915561073590850184610df5565b6008840154600d8501805460009061074e908490612040565b90915550506000600285018190556003850181905560048501819055600585018190556006850181905560078501819055600890940193909355505050565b600482015461079c8282610d88565b6107a557505050565b60028301546107bb90600a850190849042610da7565b60058301548354819085906000906107d4908490612053565b909155506107f09050816107eb6004870186610e0b565b610e24565b8460010160008282546108039190612040565b90915550506006840154600285018054600090610821908490612040565b9091555050600784015460038501805460009061083f908490612040565b9091555061085290506004850184610e43565b6009840154600b8501805460009061086b908490612040565b909155505060006004850181905560058501819055600685018190556007850181905560088501819055600990940193909355505050565b60005b6006830154600f81810b700100000000000000000000000000000000909204900b13156109665760006108db84600601610e59565b6000818152600586016020908152604091829020825160608101845281548082526001830154938201849052600290920154938101939093529293509091116109585761092a85600601610ed3565b508051600003610953576000828152600586016020526040812081815560018101829055600201555b61095f565b5050610966565b50506108a6565b60006109908460060154600f81810b700100000000000000000000000000000000909204900b0390565b111561099e575060016109d2565b60018301546109ae908390610d88565b6109ba575060006109d2565b60028301541515806109cf5750600383015415155b90505b92915050565b6000806109e86009850184610f90565b905060006109f582611071565b90506000610a04866001015490565b90506000808412610a1e57610a198383612040565b610a28565b610a28838361207b565b604080880151608089015160a08a015192517f4e82c4b700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529281166024840152604483018690529293509190911690634e82c4b790606401602060405180830381865afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190612027565b610ae86015890188611088565b610af29083612040565b610afc9190612040565b979650505050505050565b6000610b15826015016110ab565b610b21836009016110be565b6001840154610b30919061207b565b6109d2919061207b565b600080610b49888888866110d4565b9092509050600080610b668a610b5f868a612040565b8a8861121c565b9150915081831115610c0a57886060015173ffffffffffffffffffffffffffffffffffffffff1663731133e98a60800151888587610ba4919061207b565b604051806020016040528060008152506040518563ffffffff1660e01b8152600401610bd394939291906120f2565b600060405180830381600087803b158015610bed57600080fd5b505af1158015610c01573d6000803e3d6000fd5b50505050610cd0565b81831015610cd057886060015173ffffffffffffffffffffffffffffffffffffffff1663f5298aca8a60800151888686610c44919061207b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff909316600484015260248301919091526044820152606401600060405180830381600087803b158015610cb757600080fd5b505af1158015610ccb573d6000803e3d6000fd5b505050505b83151580610cdd57508015155b15610d7c576040808a015160a08b015191517f8b41411700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810187905260448101849052911690638b41411790606401600060405180830381600087803b158015610d6357600080fd5b505af1158015610d77573d6000803e3d6000fd5b505050505b50505050505050505050565b600081158015906109cf5750610d9d83611366565b5190911092915050565b8354808211610db657506100d2565b8215610de157610dc884848385611418565b856001016000828254610ddb9190612040565b90915550505b509092555050565b60006109cf83836114ed565b600382015461011c906005840190839042610da7565b805182546000916109cf91610e1f85611366565b61153c565b60006109cf82670de0b6b3a7640000610e3c86611071565b919061167d565b600282015461011c906004840190839042610da7565b6000610e818254600f81810b700100000000000000000000000000000000909204900b131590565b15610eb8576040517f3db2a12a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b508054600f0b60009081526001909101602052604090205490565b6000610efb8254600f81810b700100000000000000000000000000000000909204900b131590565b15610f32576040517f3db2a12a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583547fffffffffffffffffffffffffffffffff000000000000000000000000000000001692016fffffffffffffffffffffffffffffffff169190911790915590565b600080610f9c83611366565b845490915060008115610feb576000610fcc670de0b6b3a7640000610fc085611071565b60018a0154919061167d565b90506000610fd9856117a7565b9050610fe684838361182c565b925050505b6000610fff610ffa88886118e4565b6118fd565b61100c60048901886119af565b6110169084612053565b6110209190612053565b9050600061102d82611071565b9050600082126110585761104c610ffa826110478b611a73565b611a89565b955050505050506109d2565b611068610ffa826110478b6110be565b61104c90612137565b60008082121561108457816000036109d2565b5090565b60006110976002840183611a9f565b6110a18484611ab8565b6109cf9190612040565b600581015481546000916109d291612040565b600681015460028201546000916109d291612040565b600184015460009081906110e88682610d88565b6110f9576000809250925050611213565b60028701546003880154909350831561116257611117848787611ace565b92508388600001600082825461112d9190612040565b90915550506040805180820182528581526020808201868152600086815260048d019092529290209051815590516001909101555b80156111fb5760068801805470010000000000000000000000000000000090819004600f0b600081815260078c016020526040902085905582546fffffffffffffffffffffffffffffffff908116600190920116909102179055604080516060810182528281526000602080830182815283850183815287845260058e0190925293909120915182559151600182015590516002909101555b50506000600187018190556002870181905560038701555b94509492505050565b60008060006112498760060154600f81810b700100000000000000000000000000000000909204900b0390565b905060005b818110801561125c57508615155b1561134057600061127060068a0183611b02565b600081815260058b0160205260408120600181015481549394509092611296919061207b565b90508015611335576000806112ac838c8c611b99565b9050808c106112bd578291506112d9565b6112c88c8c8c611ace565b91508282106112d657600080fd5b508a5b818460010160008282546112ed9190612040565b92505081905550808460020160008282546113089190612040565b909155506113189050828a612040565b98506113248189612040565b9750611330818d61207b565b9b5050505b50505060010161124e565b5081876000016000828254611355919061207b565b925050819055505094509492505050565b61138a60405180606001604052806000815260200160008152602001600081525090565b60e08201515160000361141057816000015173ffffffffffffffffffffffffffffffffffffffff16639d888e866040518163ffffffff1660e01b8152600401606060405180830381865afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190611f37565b60e08301525b5060e0015190565b60008315806114275750818310155b6114df57602085015160a08601516040517f705b170e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260248101879052604481018690526064810185905291169063705b170e90608401602060405180830381865afa1580156114b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114da9190612027565b6114e2565b60005b90505b949350505050565b6000818152600183016020526040812054611534575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109d2565b5060006109d2565b60008061154884611bb6565b835160408051808201909152600381527f555350000000000000000000000000000000000000000000000000000000000060208201529192508211156115c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bb919061216f565b60405180910390fd5b5082516000908214611664576040517f7ece075d0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff871690637ece075d90602401606060405180830381865afa15801561163b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165f9190611f37565b611666565b835b9050611671816117a7565b925050505b9392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000036116d5578382816116cb576116cb612182565b0492505050611676565b80841161173e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f77000000000000000000000060448201526064016115bb565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000808260400151136040518060400160405280600381526020017f4e505000000000000000000000000000000000000000000000000000000000008152509061181e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bb919061216f565b506109d28260400151611071565b600083158061183a57508183145b1561184757506000611676565b600083831161186b5761185d610ffa848661207b565b61186690612137565b611878565b611878610ffa858561207b565b905060008512156118b0576118ad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826121b1565b90505b60006118cb610ffa6118c184611071565b87610e3c8a611071565b9050600082126118db5780611671565b61167181612137565b60028201546000906109cf90600a850190849042611c31565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e7432353600000000000000000000000000000000000000000000000060648201526084016115bb565b81546000906119be8382610d88565b6119cc5760009150506109d2565b60006119d784611366565b905060006119ed856000015184610e1f88611366565b905060006119fa836117a7565b90506000611a0b610ffa8989611c70565b611a1a8960010154858561182c565b611a249190612053565b90506000611a3182611071565b905060008212611a5957611a4c610ffa828b60030154611a89565b96505050505050506109d2565b611a6a610ffa828b60020154611a89565b611a4c90612137565b600781015460038201546000916109d291612040565b6000818310611a9857816109cf565b5090919050565b60038201546000906109cf906005850190849042611c31565b81546000906109cf90600c850190849042611c31565b60008115611afa57611af5826103e88510611ae95784611aed565b6103e85b86919061167d565b6114e5565b509192915050565b600080611b25611b11846118fd565b8554611b209190600f0b612053565b611c89565b84549091507001000000000000000000000000000000009004600f90810b9082900b12611b7e576040517fb4120f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f0b60009081526001939093016020525050604090205490565b60008115611bac57611af584848461167d565b5060009392505050565b60408051808201909152600381527f494f560000000000000000000000000000000000000000000000000000000000602082015260009082611c25576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bb919061216f565b506109d2826001612040565b600082600003611c43575060006114e5565b84546001860154818411611c5a5791506114e59050565b611c6686868487611418565b610afc9082612040565b60028201546000906109cf906004850190849042611c31565b80600f81900b8114611d1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016115bb565b919050565b6040518061048001604052806024906020820280368337509192915050565b60008060208385031215611d5457600080fd5b823567ffffffffffffffff80821115611d6c57600080fd5b818501915085601f830112611d8057600080fd5b813581811115611d8f57600080fd5b8660208260051b8501011115611da457600080fd5b60209290920196919550909350505050565b600060208284031215611dc857600080fd5b815160ff8116811461167657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115611e6157817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611e4757611e47611dd9565b80851615611e5457918102915b93841c9390800290611e0d565b509250929050565b600082611e78575060016109d2565b81611e85575060006109d2565b8160018114611e9b5760028114611ea557611ec1565b60019150506109d2565b60ff841115611eb657611eb6611dd9565b50506001821b6109d2565b5060208310610133831016604e8410600b8410161715611ee4575081810a6109d2565b611eee8383611e08565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611f2057611f20611dd9565b029392505050565b60006109cf60ff841683611e69565b600060608284031215611f4957600080fd5b6040516060810181811067ffffffffffffffff82111715611f93577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160010b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000810361201e5761201e611dd9565b60000392915050565b60006020828403121561203957600080fd5b5051919050565b808201808211156109d2576109d2611dd9565b808201828112600083128015821682158216171561207357612073611dd9565b505092915050565b818103818111156109d2576109d2611dd9565b6000815180845260005b818110156120b457602081850181015186830182015201612098565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b73ffffffffffffffffffffffffffffffffffffffff8516815283602082015282604082015260806060820152600061212d608083018461208e565b9695505050505050565b60007f8000000000000000000000000000000000000000000000000000000000000000820361216857612168611dd9565b5060000390565b6020815260006109cf602083018461208e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b808202600082127f8000000000000000000000000000000000000000000000000000000000000000841416156121e9576121e9611dd9565b81810583148215176109d2576109d2611dd956fea26469706673582212201d65de986e96e61c19513fbda5306b993911d42b3e9ebc2ac5949eff593ce6a164736f6c63430008130033",
  "devdoc": {
    "errors": {
      "Empty()": [
        {
          "details": "An operation (e.g. {front}) couldn't be completed due to the queue being empty."
        }
      ],
      "OnlyAccessableByDao()": [
        {
          "details": "Throws an error indicating that the caller is not the DAO."
        }
      ],
      "OnlyAccessableByLiquidator()": [
        {
          "details": "Throws an error indicating that the caller is not the chromatic liquidator contract."
        }
      ],
      "OnlyAccessableByVault()": [
        {
          "details": "Throws an error indicating that the caller is not the chromatch vault contract."
        }
      ],
      "OutOfBounds()": [
        {
          "details": "An operation (e.g. {at}) couldn't be completed due to an index being out of bounds."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "settle(int16[])": {
        "details": "This function settles the market by synchronizing the oracle version      and calling the settle function of the liquidity pool.",
        "params": {
          "feeRates": "The feeRate list of liquidity bin to settle."
        }
      },
      "settleAll()": {
        "details": "This function settles the market by synchronizing the oracle version      and calling the settle function of the liquidity pool."
      }
    },
    "title": "MarketSettleFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "settle(int16[])": {
        "notice": "Executes the settlement process for the Chromatic market."
      },
      "settleAll()": {
        "notice": "Executes the settlement process for the Chromatic market."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}