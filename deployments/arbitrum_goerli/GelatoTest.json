{
  "address": "0xE988878C0B0a74983462c6883e0478a5bd995ad6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_automate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "TaskExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "automate",
      "outputs": [
        {
          "internalType": "contract IAutomate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dedicatedMsgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskIdx",
          "type": "uint256"
        }
      ],
      "name": "exec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskIdx",
          "type": "uint256"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xebe53efb06ec2896d932b741627fa29280726036e81d925427d1b4404cd80250",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0xE988878C0B0a74983462c6883e0478a5bd995ad6",
    "transactionIndex": 1,
    "gasUsed": "843311",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0b9adc56ca62b25b130223e5acc646d7ada21f67c01effca3a1e695af45e1a52",
    "transactionHash": "0xebe53efb06ec2896d932b741627fa29280726036e81d925427d1b4404cd80250",
    "logs": [],
    "blockNumber": 58344982,
    "cumulativeGasUsed": "843311",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2A6C106ae13B558BB9E2Ec64Bd2f1f7BEFF3A5E0"
  ],
  "numDeployments": 5,
  "solcInputHash": "5e9fcf540e770c4d2cc697226378a1a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_automate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"TaskExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"automate\",\"outputs\":[{\"internalType\":\"contract IAutomate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dedicatedMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskIdx\",\"type\":\"uint256\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskIdx\",\"type\":\"uint256\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/GelatoTest.sol\":\"GelatoTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/core/automation/gelato/AutomateReady.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@chromatic-protocol/contracts/core/automation/gelato/Types.sol\\\";\\n\\n/**\\n * @dev Inherit this contract to allow your smart contract to\\n * - Make synchronous fee payments.\\n * - Have call restrictions for functions to be automated.\\n */\\n// solhint-disable private-vars-leading-underscore\\nabstract contract AutomateReady {\\n    IAutomate public immutable automate;\\n    address public immutable dedicatedMsgSender;\\n    address private immutable feeCollector;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @dev\\n     * Only tasks created by _taskCreator defined in constructor can call\\n     * the functions with this modifier.\\n     */\\n    modifier onlyDedicatedMsgSender() {\\n        require(msg.sender == dedicatedMsgSender, \\\"Only dedicated msg.sender\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev\\n     * _taskCreator is the address which will create tasks for this contract.\\n     */\\n    constructor(address _automate, address _taskCreator) {\\n        automate = IAutomate(_automate);\\n        IGelato gelato = IGelato(IAutomate(_automate).gelato());\\n\\n        feeCollector = gelato.feeCollector();\\n\\n        address proxyModuleAddress = IAutomate(_automate).taskModuleAddresses(Module.PROXY);\\n\\n        address opsProxyFactoryAddress = IProxyModule(proxyModuleAddress).opsProxyFactory();\\n\\n        (dedicatedMsgSender, ) = IOpsProxyFactory(opsProxyFactoryAddress).getProxyOf(_taskCreator);\\n    }\\n\\n    /**\\n     * @dev\\n     * Transfers fee to gelato for synchronous fee payments.\\n     *\\n     * _fee & _feeToken should be queried from IAutomate.getFeeDetails()\\n     */\\n    function _transfer(uint256 _fee, address _feeToken) internal {\\n        if (_feeToken == ETH) {\\n            (bool success, ) = feeCollector.call{value: _fee}(\\\"\\\");\\n            require(success, \\\"_transfer: ETH transfer failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_feeToken), feeCollector, _fee);\\n        }\\n    }\\n\\n    function _getFeeDetails() internal view returns (uint256 fee, address feeToken) {\\n        (fee, feeToken) = automate.getFeeDetails();\\n    }\\n}\\n\",\"keccak256\":\"0x6caec798c39e482bbb56b210a71861e94051cabf93261b695c192fcb4838b01a\",\"license\":\"UNLICENSED\"},\"contracts/core/automation/gelato/Types.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nenum Module {\\n    RESOLVER,\\n    DEPRECATED_TIME,\\n    PROXY,\\n    SINGLE_EXEC,\\n    WEB3_FUNCTION,\\n    TRIGGER\\n}\\n\\nenum TriggerType {\\n    TIME,\\n    CRON,\\n    EVENT,\\n    BLOCK\\n}\\n\\nstruct ModuleData {\\n    Module[] modules;\\n    bytes[] args;\\n}\\n\\ninterface IAutomate {\\n    function createTask(\\n        address execAddress,\\n        bytes calldata execDataOrSelector,\\n        ModuleData calldata moduleData,\\n        address feeToken\\n    ) external returns (bytes32 taskId);\\n\\n    function cancelTask(bytes32 taskId) external;\\n\\n    function getFeeDetails() external view returns (uint256, address);\\n\\n    function gelato() external view returns (address payable);\\n\\n    function taskModuleAddresses(Module) external view returns (address);\\n}\\n\\ninterface IProxyModule {\\n    function opsProxyFactory() external view returns (address);\\n}\\n\\ninterface IOpsProxyFactory {\\n    function getProxyOf(address account) external view returns (address, bool);\\n}\\n\\ninterface IGelato1Balance {\\n    function depositNative(address _sponsor) external payable;\\n\\n    function depositToken(\\n        address _sponsor,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\\ninterface IGelato {\\n    function feeCollector() external view returns (address);\\n}\\n\",\"keccak256\":\"0xebf9ce67f80b133478d21048ffcee370777f28f497d5466990bb4703178be51f\",\"license\":\"UNLICENSED\"},\"contracts/mocks/GelatoTest.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@chromatic-protocol/contracts/core/automation/gelato/AutomateReady.sol\\\";\\nimport \\\"@chromatic-protocol/contracts/core/automation/gelato/Types.sol\\\";\\n\\ncontract GelatoTest is AutomateReady {\\n    mapping(uint256 taskIdx => uint256 fund) funds;\\n    mapping(uint256 taskIdx => address funder) funders;\\n    mapping(uint256 taskIdx => uint256 blockNumber) blockNumbers;\\n\\n    uint256 private _taskIdx;\\n\\n    event TaskCreated(uint256 indexed taskIdx, bytes32 taskId);\\n    event TaskExecuted(uint256 indexed taskIdx, uint256 fee, bool success);\\n\\n    constructor(address _automate) AutomateReady(_automate, address(this)) {}\\n\\n    function createTask() external payable {\\n        _taskIdx++;\\n\\n        funds[_taskIdx] = msg.value;\\n        funders[_taskIdx] = msg.sender;\\n\\n        ModuleData memory moduleData = ModuleData({modules: new Module[](4), args: new bytes[](4)});\\n\\n        moduleData.modules[0] = Module.RESOLVER;\\n        moduleData.modules[1] = Module.PROXY;\\n        moduleData.modules[2] = Module.SINGLE_EXEC;\\n        moduleData.modules[3] = Module.TRIGGER;\\n        moduleData.args[0] = abi.encode(address(this), abi.encodeCall(this.resolve, (_taskIdx)));\\n        moduleData.args[1] = bytes(\\\"\\\");\\n        moduleData.args[2] = bytes(\\\"\\\");\\n        moduleData.args[3] = abi.encode(TriggerType.BLOCK, bytes(\\\"\\\"));\\n\\n        bytes32 taskId = automate.createTask(\\n            address(this),\\n            abi.encode(this.exec.selector),\\n            moduleData,\\n            ETH\\n        );\\n\\n        emit TaskCreated(_taskIdx, taskId);\\n    }\\n\\n    function resolve(\\n        uint256 taskIdx\\n    ) external view returns (bool canExec, bytes memory execPayload) {\\n        canExec = block.timestamp - blockNumbers[taskIdx] > 10;\\n        execPayload = canExec ? abi.encodeCall(this.exec, (taskIdx)) : bytes(\\\"\\\");\\n    }\\n\\n    function exec(uint256 taskIdx) external {\\n        uint256 fund = funds[taskIdx];\\n        address funder = funders[taskIdx];\\n\\n        (uint256 fee, ) = _getFeeDetails();\\n        (bool s, ) = IGelato(automate.gelato()).feeCollector().call{value: fee}(\\\"\\\");\\n        (bool success, ) = funder.call{value: fund - fee}(\\\"\\\");\\n\\n        emit TaskExecuted(taskIdx, fee, success);\\n    }\\n}\\n\",\"keccak256\":\"0xc7b16135f0b0ad10095deaab97795dd3e41d9b3f0ad1792d92382630362dc04d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200109c3803806200109c8339810160408190526200003491620002a6565b8030816001600160a01b03166080816001600160a01b0316815250506000826001600160a01b031663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000091573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b79190620002a6565b9050806001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011e9190620002a6565b6001600160a01b0390811660c05260405163cd3d4fb960e01b815260009185169063cd3d4fb9906200015690600290600401620002cd565b602060405180830381865afa15801562000174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019a9190620002a6565b90506000816001600160a01b031663ba1d0ff46040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002039190620002a6565b6040516337b6269f60e21b81526001600160a01b0386811660048301529192509082169063ded89a7c906024016040805180830381865afa1580156200024d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002739190620002f6565b506001600160a01b031660a0525062000339945050505050565b6001600160a01b0381168114620002a357600080fd5b50565b600060208284031215620002b957600080fd5b8151620002c6816200028d565b9392505050565b6020810160068310620002f057634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156200030a57600080fd5b825162000317816200028d565b602084015190925080151581146200032e57600080fd5b809150509250929050565b60805160a05160c051610d236200037960003960005050600060cf01526000818160710152818161052d015281816106b301526108c20152610d236000f3fe60806040526004361061005a5760003560e01c80634f896d4f116100435780634f896d4f146100f1578063a74764931461011f578063f873cb911461012957600080fd5b8063049aacfe1461005f57806328f150eb146100bd575b600080fd5b34801561006b57600080fd5b506100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100c957600080fd5b506100937f000000000000000000000000000000000000000000000000000000000000000081565b3480156100fd57600080fd5b5061011161010c366004610957565b610149565b6040516100b49291906109d4565b6101276101f3565b005b34801561013557600080fd5b50610127610144366004610957565b610671565b600081815260026020526040812054606090600a906101689042610a26565b1191508161018557604051806020016040528060008152506101ec565b6040805160248082018690528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff873cb91000000000000000000000000000000000000000000000000000000001790525b9050915091565b6003805490600061020383610a3f565b909155505060038054600090815260208181526040808320349055925482526001905281812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016331790558151600481840181815260e08301909452919290918291906060830160808036833701905050815260408051600480825260a0820190925260209092019190816020015b606081526020019060019003908161029557505090528051805191925060009182906102c3576102c3610a77565b602002602001019060058111156102dc576102dc610aa6565b908160058111156102ef576102ef610aa6565b815250506002816000015160018151811061030c5761030c610a77565b6020026020010190600581111561032557610325610aa6565b9081600581111561033857610338610aa6565b815250506003816000015160028151811061035557610355610a77565b6020026020010190600581111561036e5761036e610aa6565b9081600581111561038157610381610aa6565b815250506005816000015160038151811061039e5761039e610a77565b602002602001019060058111156103b7576103b7610aa6565b908160058111156103ca576103ca610aa6565b90525060035460405130918291634f896d4f916103ed9160240190815260200190565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051602001610440929190610ad5565b604051602081830303815290604052816020015160008151811061046657610466610a77565b602002602001018190525060405180602001604052806000815250816020015160018151811061049857610498610a77565b60200260200101819052506040518060200160405280600081525081602001516002815181106104ca576104ca610a77565b60200260200101819052506003604051806020016040528060008152506040516020016104f8929190610b04565b604051602081830303815290604052816020015160038151811061051e5761051e610a77565b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633323b4673063f873cb9160e01b6040516020016105a891907fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6040516020818303038152906040528573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518563ffffffff1660e01b81526004016105ec9493929190610b2d565b6020604051808303816000875af115801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190610c5b565b90506003547f9c24ccb001ff60bbf8d259e9827f77f455131f313dd00ac430e9f909757f3d668260405161066591815260200190565b60405180910390a25050565b600081815260208181526040808320546001909252822054909173ffffffffffffffffffffffffffffffffffffffff909116906106ac6108bd565b50905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190610c99565b73ffffffffffffffffffffffffffffffffffffffff1663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190610c99565b73ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610805576040519150601f19603f3d011682016040523d82523d6000602084013e61080a565b606091505b5050905060008373ffffffffffffffffffffffffffffffffffffffff1683866108339190610a26565b604051600081818185875af1925050503d806000811461086f576040519150601f19603f3d011682016040523d82523d6000602084013e610874565b606091505b505060408051858152821515602082015291925087917f1689a85cf3afb8b27dd7408057802f5884cf95e7f86c2fb371acb70c9a20e451910160405180910390a2505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa15801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190610cbd565b90939092509050565b60006020828403121561096957600080fd5b5035919050565b6000815180845260005b818110156109965760208185018101518683018201520161097a565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b82151581526040602082015260006109ef6040830184610970565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610a3957610a396109f7565b92915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a7057610a706109f7565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006109ef6040830184610970565b600060048410610b1657610b16610aa6565b838252604060208301526109ef6040830184610970565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020608081840152610b5d6080840187610970565b8381036040808601919091528651818352805191830182905283019060009060608401905b80831015610bb257835160068110610b9c57610b9c610aa6565b8252928501926001929092019190850190610b82565b508885015184820394860194909452835180825281860194860193509150600582901b8101850160005b83811015610c28577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838303018652610c16828651610970565b95870195948701949150600101610bdc565b5073ffffffffffffffffffffffffffffffffffffffff891660608901529550610c52945050505050565b95945050505050565b600060208284031215610c6d57600080fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610c9657600080fd5b50565b600060208284031215610cab57600080fd5b8151610cb681610c74565b9392505050565b60008060408385031215610cd057600080fd5b825191506020830151610ce281610c74565b80915050925092905056fea264697066735822122051915808b9a5aa8f1e7cfbf803288d013665cb7ed893ae01cccda6fae3085aaf64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061005a5760003560e01c80634f896d4f116100435780634f896d4f146100f1578063a74764931461011f578063f873cb911461012957600080fd5b8063049aacfe1461005f57806328f150eb146100bd575b600080fd5b34801561006b57600080fd5b506100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100c957600080fd5b506100937f000000000000000000000000000000000000000000000000000000000000000081565b3480156100fd57600080fd5b5061011161010c366004610957565b610149565b6040516100b49291906109d4565b6101276101f3565b005b34801561013557600080fd5b50610127610144366004610957565b610671565b600081815260026020526040812054606090600a906101689042610a26565b1191508161018557604051806020016040528060008152506101ec565b6040805160248082018690528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff873cb91000000000000000000000000000000000000000000000000000000001790525b9050915091565b6003805490600061020383610a3f565b909155505060038054600090815260208181526040808320349055925482526001905281812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016331790558151600481840181815260e08301909452919290918291906060830160808036833701905050815260408051600480825260a0820190925260209092019190816020015b606081526020019060019003908161029557505090528051805191925060009182906102c3576102c3610a77565b602002602001019060058111156102dc576102dc610aa6565b908160058111156102ef576102ef610aa6565b815250506002816000015160018151811061030c5761030c610a77565b6020026020010190600581111561032557610325610aa6565b9081600581111561033857610338610aa6565b815250506003816000015160028151811061035557610355610a77565b6020026020010190600581111561036e5761036e610aa6565b9081600581111561038157610381610aa6565b815250506005816000015160038151811061039e5761039e610a77565b602002602001019060058111156103b7576103b7610aa6565b908160058111156103ca576103ca610aa6565b90525060035460405130918291634f896d4f916103ed9160240190815260200190565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051602001610440929190610ad5565b604051602081830303815290604052816020015160008151811061046657610466610a77565b602002602001018190525060405180602001604052806000815250816020015160018151811061049857610498610a77565b60200260200101819052506040518060200160405280600081525081602001516002815181106104ca576104ca610a77565b60200260200101819052506003604051806020016040528060008152506040516020016104f8929190610b04565b604051602081830303815290604052816020015160038151811061051e5761051e610a77565b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633323b4673063f873cb9160e01b6040516020016105a891907fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6040516020818303038152906040528573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518563ffffffff1660e01b81526004016105ec9493929190610b2d565b6020604051808303816000875af115801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190610c5b565b90506003547f9c24ccb001ff60bbf8d259e9827f77f455131f313dd00ac430e9f909757f3d668260405161066591815260200190565b60405180910390a25050565b600081815260208181526040808320546001909252822054909173ffffffffffffffffffffffffffffffffffffffff909116906106ac6108bd565b50905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190610c99565b73ffffffffffffffffffffffffffffffffffffffff1663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190610c99565b73ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610805576040519150601f19603f3d011682016040523d82523d6000602084013e61080a565b606091505b5050905060008373ffffffffffffffffffffffffffffffffffffffff1683866108339190610a26565b604051600081818185875af1925050503d806000811461086f576040519150601f19603f3d011682016040523d82523d6000602084013e610874565b606091505b505060408051858152821515602082015291925087917f1689a85cf3afb8b27dd7408057802f5884cf95e7f86c2fb371acb70c9a20e451910160405180910390a2505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa15801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190610cbd565b90939092509050565b60006020828403121561096957600080fd5b5035919050565b6000815180845260005b818110156109965760208185018101518683018201520161097a565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b82151581526040602082015260006109ef6040830184610970565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610a3957610a396109f7565b92915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a7057610a706109f7565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006109ef6040830184610970565b600060048410610b1657610b16610aa6565b838252604060208301526109ef6040830184610970565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020608081840152610b5d6080840187610970565b8381036040808601919091528651818352805191830182905283019060009060608401905b80831015610bb257835160068110610b9c57610b9c610aa6565b8252928501926001929092019190850190610b82565b508885015184820394860194909452835180825281860194860193509150600582901b8101850160005b83811015610c28577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838303018652610c16828651610970565b95870195948701949150600101610bdc565b5073ffffffffffffffffffffffffffffffffffffffff891660608901529550610c52945050505050565b95945050505050565b600060208284031215610c6d57600080fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610c9657600080fd5b50565b600060208284031215610cab57600080fd5b8151610cb681610c74565b9392505050565b60008060408385031215610cd057600080fd5b825191506020830151610ce281610c74565b80915050925092905056fea264697066735822122051915808b9a5aa8f1e7cfbf803288d013665cb7ed893ae01cccda6fae3085aaf64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1072,
        "contract": "contracts/mocks/GelatoTest.sol:GelatoTest",
        "label": "funds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1076,
        "contract": "contracts/mocks/GelatoTest.sol:GelatoTest",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1080,
        "contract": "contracts/mocks/GelatoTest.sol:GelatoTest",
        "label": "blockNumbers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1082,
        "contract": "contracts/mocks/GelatoTest.sol:GelatoTest",
        "label": "_taskIdx",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}